{"ast":null,"code":"import JSONRequest from '../jsonrequest';\nexport default class LookupApplicationLogs extends JSONRequest {\n  /**\r\n   * Returns log messages generated by the passed in application.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const appId = 60553466;\r\n   * const appLogs = await indexerClient.lookupApplicationLogs(appId).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idlogs)\r\n   * @param appID - The ID of the application which generated the logs.\r\n   * @category GET\r\n   */\n  constructor(c, intDecoding, appID) {\n    super(c, intDecoding);\n    this.appID = appID;\n    this.appID = appID;\n  }\n  /**\r\n   * @returns `/v2/applications/${appID}/logs`\r\n   */\n  path() {\n    return `/v2/applications/${this.appID}/logs`;\n  }\n  /**\r\n   * Limit results for pagination.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxResults = 20;\r\n   * const appLogs = await indexerClient\r\n   *        .lookupApplicationLogs(appId)\r\n   *        .limit(maxResults)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param limit - maximum number of results to return.\r\n   */\n  limit(limit) {\n    this.query.limit = limit;\n    return this;\n  }\n  /**\r\n   * Include results at or after the specified min-round.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const minRound = 18309917;\r\n   * const appLogs = await indexerClient\r\n   *        .lookupApplicationLogs(appId)\r\n   *        .minRound(minRound)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param round\r\n   * @category query\r\n   */\n  minRound(round) {\n    this.query['min-round'] = round;\n    return this;\n  }\n  /**\r\n   * Include results at or before the specified max-round.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxRound = 18309917;\r\n   * const appLogs = await indexerClient\r\n   *        .lookupApplicationLogs(appId)\r\n   *        .maxRound(maxRound)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param round\r\n   * @category query\r\n   */\n  maxRound(round) {\n    this.query['max-round'] = round;\n    return this;\n  }\n  /**\r\n   * The next page of results.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxResults = 25;\r\n   *\r\n   * const appLogsPage1 = await indexerClient\r\n   *        .lookupApplicationLogs(appId)\r\n   *        .limit(maxResults)\r\n   *        .do();\r\n   *\r\n   * const appLogsPage2 = await indexerClient\r\n   *        .lookupApplicationLogs(appId)\r\n   *        .limit(maxResults)\r\n   *        .nextToken(appLogsPage1[\"next-token\"])\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param nextToken - provided by the previous results.\r\n   * @category query\r\n   */\n  nextToken(nextToken) {\n    this.query.next = nextToken;\n    return this;\n  }\n  /**\r\n   * Only include transactions with this sender address.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const sender = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const appLogs = await indexerClient\r\n   *        .lookupApplicationLogs(appId)\r\n   *        .sender(sender)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param senderAddress\r\n   * @category query\r\n   */\n  sender(senderAddress) {\n    this.query['sender-address'] = senderAddress;\n    return this;\n  }\n  /**\r\n   * Lookup the specific transaction by ID.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const txId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\r\n   * const appLogs = await indexerClient\r\n   *        .lookupApplicationLogs(appId)\r\n   *        .txid(txId)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param txid\r\n   * @category query\r\n   */\n  txid(txid) {\n    this.query.txid = txid;\n    return this;\n  }\n}","map":{"version":3,"names":["JSONRequest","LookupApplicationLogs","constructor","c","intDecoding","appID","path","limit","query","minRound","round","maxRound","nextToken","next","sender","senderAddress","txid"],"sources":["C:\\Users\\Aditya singh\\AlgoEase\\frontend\\node_modules\\algosdk\\src\\client\\v2\\indexer\\lookupApplicationLogs.ts"],"sourcesContent":["import JSONRequest from '../jsonrequest';\r\nimport HTTPClient from '../../client';\r\nimport IntDecoding from '../../../types/intDecoding';\r\n\r\nexport default class LookupApplicationLogs extends JSONRequest {\r\n  /**\r\n   * Returns log messages generated by the passed in application.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const appId = 60553466;\r\n   * const appLogs = await indexerClient.lookupApplicationLogs(appId).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idlogs)\r\n   * @param appID - The ID of the application which generated the logs.\r\n   * @category GET\r\n   */\r\n  constructor(c: HTTPClient, intDecoding: IntDecoding, private appID: number) {\r\n    super(c, intDecoding);\r\n    this.appID = appID;\r\n  }\r\n\r\n  /**\r\n   * @returns `/v2/applications/${appID}/logs`\r\n   */\r\n  path() {\r\n    return `/v2/applications/${this.appID}/logs`;\r\n  }\r\n\r\n  /**\r\n   * Limit results for pagination.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxResults = 20;\r\n   * const appLogs = await indexerClient\r\n   *        .lookupApplicationLogs(appId)\r\n   *        .limit(maxResults)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param limit - maximum number of results to return.\r\n   */\r\n  limit(limit: number) {\r\n    this.query.limit = limit;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Include results at or after the specified min-round.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const minRound = 18309917;\r\n   * const appLogs = await indexerClient\r\n   *        .lookupApplicationLogs(appId)\r\n   *        .minRound(minRound)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param round\r\n   * @category query\r\n   */\r\n  minRound(round: number) {\r\n    this.query['min-round'] = round;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Include results at or before the specified max-round.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxRound = 18309917;\r\n   * const appLogs = await indexerClient\r\n   *        .lookupApplicationLogs(appId)\r\n   *        .maxRound(maxRound)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param round\r\n   * @category query\r\n   */\r\n  maxRound(round: number) {\r\n    this.query['max-round'] = round;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * The next page of results.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxResults = 25;\r\n   *\r\n   * const appLogsPage1 = await indexerClient\r\n   *        .lookupApplicationLogs(appId)\r\n   *        .limit(maxResults)\r\n   *        .do();\r\n   *\r\n   * const appLogsPage2 = await indexerClient\r\n   *        .lookupApplicationLogs(appId)\r\n   *        .limit(maxResults)\r\n   *        .nextToken(appLogsPage1[\"next-token\"])\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param nextToken - provided by the previous results.\r\n   * @category query\r\n   */\r\n  nextToken(nextToken: string) {\r\n    this.query.next = nextToken;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Only include transactions with this sender address.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const sender = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const appLogs = await indexerClient\r\n   *        .lookupApplicationLogs(appId)\r\n   *        .sender(sender)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param senderAddress\r\n   * @category query\r\n   */\r\n  sender(senderAddress: string) {\r\n    this.query['sender-address'] = senderAddress;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Lookup the specific transaction by ID.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const txId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\r\n   * const appLogs = await indexerClient\r\n   *        .lookupApplicationLogs(appId)\r\n   *        .txid(txId)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param txid\r\n   * @category query\r\n   */\r\n  txid(txid: string) {\r\n    this.query.txid = txid;\r\n    return this;\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,gBAAgB;AAIxC,eAAc,MAAOC,qBAAsB,SAAQD,WAAW;EAC5D;;;;;;;;;;;;;EAaAE,YAAYC,CAAa,EAAEC,WAAwB,EAAUC,KAAa;IACxE,KAAK,CAACF,CAAC,EAAEC,WAAW,CAAC;IADsC,KAAAC,KAAK,GAALA,KAAK;IAEhE,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;EAEA;;;EAGAC,IAAIA,CAAA;IACF,OAAO,oBAAoB,IAAI,CAACD,KAAK,OAAO;EAC9C;EAEA;;;;;;;;;;;;;;EAcAE,KAAKA,CAACA,KAAa;IACjB,IAAI,CAACC,KAAK,CAACD,KAAK,GAAGA,KAAK;IACxB,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;EAeAE,QAAQA,CAACC,KAAa;IACpB,IAAI,CAACF,KAAK,CAAC,WAAW,CAAC,GAAGE,KAAK;IAC/B,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;EAeAC,QAAQA,CAACD,KAAa;IACpB,IAAI,CAACF,KAAK,CAAC,WAAW,CAAC,GAAGE,KAAK;IAC/B,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;;;;;;;;EAsBAE,SAASA,CAACA,SAAiB;IACzB,IAAI,CAACJ,KAAK,CAACK,IAAI,GAAGD,SAAS;IAC3B,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;EAeAE,MAAMA,CAACC,aAAqB;IAC1B,IAAI,CAACP,KAAK,CAAC,gBAAgB,CAAC,GAAGO,aAAa;IAC5C,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;EAeAC,IAAIA,CAACA,IAAY;IACf,IAAI,CAACR,KAAK,CAACQ,IAAI,GAAGA,IAAI;IACtB,OAAO,IAAI;EACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
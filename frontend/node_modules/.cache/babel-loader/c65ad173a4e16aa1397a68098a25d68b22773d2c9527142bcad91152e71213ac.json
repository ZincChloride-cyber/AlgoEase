{"ast":null,"code":"import JSONRequest from '../jsonrequest';\nimport { base64StringFunnel } from './lookupAccountTransactions';\nexport default class LookupAssetTransactions extends JSONRequest {\n  /**\r\n   * Returns transactions relating to the given asset.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient.lookupAssetTransactions(assetId).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-idtransactions)\r\n   * @param index - The asset ID to look up.\r\n   */\n  constructor(c, intDecoding, index) {\n    super(c, intDecoding);\n    this.index = index;\n    this.index = index;\n  }\n  /**\r\n   * @returns `/v2/assets/${index}/transactions`\r\n   */\n  path() {\n    return `/v2/assets/${this.index}/transactions`;\n  }\n  /**\r\n   * Specifies a prefix which must be contained in the note field.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const notePrefixBase64Encoded = \"Y3JlYXRl\";\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .notePrefix(notePrefixBase64Encoded)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param prefix - base64 string or uint8array\r\n   * @category query\r\n   */\n  notePrefix(prefix) {\n    this.query['note-prefix'] = base64StringFunnel(prefix);\n    return this;\n  }\n  /**\r\n   * Type of transaction to filter with.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .txType(\"axfer\")\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param type - one of `pay`, `keyreg`, `acfg`, `axfer`, `afrz`, `appl`\r\n   * @category query\r\n   */\n  txType(type) {\n    this.query['tx-type'] = type;\n    return this;\n  }\n  /**\r\n   * Type of signature to filter with.\r\n   * - sig: Standard\r\n   * - msig: MultiSig\r\n   * - lsig: LogicSig\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .sigType(\"lsig\")\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param type - one of `sig`, `msig`, `lsig`\r\n   * @category query\r\n   */\n  sigType(type) {\n    this.query['sig-type'] = type;\n    return this;\n  }\n  /**\r\n   * Lookup the specific transaction by ID.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const txId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .txid(txId)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param txid\r\n   * @category query\r\n   */\n  txid(txid) {\n    this.query.txid = txid;\n    return this;\n  }\n  /**\r\n   * Include results for the specified round.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const targetBlock = 18309917;\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .round(targetBlock)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param round\r\n   * @category query\r\n   */\n  round(round) {\n    this.query.round = round;\n    return this;\n  }\n  /**\r\n   * Include results at or after the specified min-round.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const minRound = 18309917;\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .minRound(minRound)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param round\r\n   * @category query\r\n   */\n  minRound(round) {\n    this.query['min-round'] = round;\n    return this;\n  }\n  /**\r\n   * Include results at or before the specified max-round.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxRound = 18309917;\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .maxRound(maxRound)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param round\r\n   * @category query\r\n   */\n  maxRound(round) {\n    this.query['max-round'] = round;\n    return this;\n  }\n  /**\r\n   * Maximum number of results to return.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxResults = 25;\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .limit(maxResults)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param limit\r\n   * @category query\r\n   */\n  limit(limit) {\n    this.query.limit = limit;\n    return this;\n  }\n  /**\r\n   * Include results before the given time.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const beforeTime = \"2022-02-02T20:20:22.02Z\";\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .beforeTime(beforeTime)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param before - rfc3339 string\r\n   * @category query\r\n   */\n  beforeTime(before) {\n    this.query['before-time'] = before;\n    return this;\n  }\n  /**\r\n   * Include results after the given time.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const afterTime = \"2022-10-21T00:00:11.55Z\";\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .afterTime(afterTime)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param after - rfc3339 string\r\n   * @category query\r\n   */\n  afterTime(after) {\n    this.query['after-time'] = after;\n    return this;\n  }\n  /**\r\n   * Filtered results should have an amount greater than this value, as int, representing asset units.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const minBalance = 300000;\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .currencyGreaterThan(minBalance - 1)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param greater\r\n   * @category query\r\n   */\n  currencyGreaterThan(greater) {\n    // We convert the following to a string for now to correctly include zero values in request parameters.\n    this.query['currency-greater-than'] = greater.toString();\n    return this;\n  }\n  /**\r\n   * Filtered results should have an amount less than this value, as int, representing asset units.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxBalance = 500000;\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .currencyLessThan(maxBalance + 1)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param lesser\r\n   * @category query\r\n   */\n  currencyLessThan(lesser) {\n    this.query['currency-less-than'] = lesser;\n    return this;\n  }\n  /**\r\n   * Combined with address, defines what address to filter on, as string.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const assetId = 163650;\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const role = \"sender\";\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .address(address)\r\n   *        .addressRole(role)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param role - one of `sender`, `receiver`, `freeze-target`\r\n   * @category query\r\n   */\n  addressRole(role) {\n    this.query['address-role'] = role;\n    return this;\n  }\n  /**\r\n   * Only include transactions with this address in one of the transaction fields.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const assetId = 163650;\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .address(address)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param address\r\n   * @category query\r\n   */\n  address(address) {\n    this.query.address = address;\n    return this;\n  }\n  /**\r\n   * Whether or not to consider the `close-to` field as a receiver when filtering transactions, as bool. Set to `true` to ignore `close-to`.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .excludeCloseTo(true)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param exclude\r\n   * @category query\r\n   */\n  excludeCloseTo(exclude) {\n    this.query['exclude-close-to'] = exclude;\n    return this;\n  }\n  /**\r\n   * The next page of results.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxResults = 25;\r\n   * const assetId = 163650;\r\n   *\r\n   * const assetTxnsPage1 = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .limit(maxResults)\r\n   *        .do();\r\n   *\r\n   * const assetTxnsPage2 = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .limit(maxResults)\r\n   *        .nextToken(assetTxnsPage1[\"next-token\"])\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param nextToken - provided by the previous results.\r\n   * @category query\r\n   */\n  nextToken(nextToken) {\n    this.query.next = nextToken;\n    return this;\n  }\n  /**\r\n   * Whether or not to include rekeying transactions.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .rekeyTo(false)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param rekeyTo\r\n   * @category query\r\n   */\n  rekeyTo(rekeyTo) {\n    this.query['rekey-to'] = rekeyTo;\n    return this;\n  }\n}","map":{"version":3,"names":["JSONRequest","base64StringFunnel","LookupAssetTransactions","constructor","c","intDecoding","index","path","notePrefix","prefix","query","txType","type","sigType","txid","round","minRound","maxRound","limit","beforeTime","before","afterTime","after","currencyGreaterThan","greater","toString","currencyLessThan","lesser","addressRole","role","address","excludeCloseTo","exclude","nextToken","next","rekeyTo"],"sources":["C:\\Users\\Aditya singh\\AlgoEase\\frontend\\node_modules\\algosdk\\src\\client\\v2\\indexer\\lookupAssetTransactions.ts"],"sourcesContent":["import JSONRequest from '../jsonrequest';\r\nimport HTTPClient from '../../client';\r\nimport IntDecoding from '../../../types/intDecoding';\r\nimport { base64StringFunnel } from './lookupAccountTransactions';\r\n\r\nexport default class LookupAssetTransactions extends JSONRequest {\r\n  /**\r\n   * Returns transactions relating to the given asset.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient.lookupAssetTransactions(assetId).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-idtransactions)\r\n   * @param index - The asset ID to look up.\r\n   */\r\n  constructor(c: HTTPClient, intDecoding: IntDecoding, private index: number) {\r\n    super(c, intDecoding);\r\n    this.index = index;\r\n  }\r\n\r\n  /**\r\n   * @returns `/v2/assets/${index}/transactions`\r\n   */\r\n  path() {\r\n    return `/v2/assets/${this.index}/transactions`;\r\n  }\r\n\r\n  /**\r\n   * Specifies a prefix which must be contained in the note field.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const notePrefixBase64Encoded = \"Y3JlYXRl\";\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .notePrefix(notePrefixBase64Encoded)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param prefix - base64 string or uint8array\r\n   * @category query\r\n   */\r\n  notePrefix(prefix: Uint8Array | string) {\r\n    this.query['note-prefix'] = base64StringFunnel(prefix);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Type of transaction to filter with.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .txType(\"axfer\")\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param type - one of `pay`, `keyreg`, `acfg`, `axfer`, `afrz`, `appl`\r\n   * @category query\r\n   */\r\n  txType(type: string) {\r\n    this.query['tx-type'] = type;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Type of signature to filter with.\r\n   * - sig: Standard\r\n   * - msig: MultiSig\r\n   * - lsig: LogicSig\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .sigType(\"lsig\")\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param type - one of `sig`, `msig`, `lsig`\r\n   * @category query\r\n   */\r\n  sigType(type: string) {\r\n    this.query['sig-type'] = type;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Lookup the specific transaction by ID.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const txId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .txid(txId)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param txid\r\n   * @category query\r\n   */\r\n  txid(txid: string) {\r\n    this.query.txid = txid;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Include results for the specified round.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const targetBlock = 18309917;\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .round(targetBlock)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param round\r\n   * @category query\r\n   */\r\n  round(round: number) {\r\n    this.query.round = round;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Include results at or after the specified min-round.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const minRound = 18309917;\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .minRound(minRound)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param round\r\n   * @category query\r\n   */\r\n  minRound(round: number) {\r\n    this.query['min-round'] = round;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Include results at or before the specified max-round.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxRound = 18309917;\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .maxRound(maxRound)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param round\r\n   * @category query\r\n   */\r\n  maxRound(round: number) {\r\n    this.query['max-round'] = round;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Maximum number of results to return.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxResults = 25;\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .limit(maxResults)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param limit\r\n   * @category query\r\n   */\r\n  limit(limit: number) {\r\n    this.query.limit = limit;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Include results before the given time.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const beforeTime = \"2022-02-02T20:20:22.02Z\";\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .beforeTime(beforeTime)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param before - rfc3339 string\r\n   * @category query\r\n   */\r\n  beforeTime(before: string) {\r\n    this.query['before-time'] = before;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Include results after the given time.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const afterTime = \"2022-10-21T00:00:11.55Z\";\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .afterTime(afterTime)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param after - rfc3339 string\r\n   * @category query\r\n   */\r\n  afterTime(after: string) {\r\n    this.query['after-time'] = after;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Filtered results should have an amount greater than this value, as int, representing asset units.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const minBalance = 300000;\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .currencyGreaterThan(minBalance - 1)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param greater\r\n   * @category query\r\n   */\r\n  currencyGreaterThan(greater: number) {\r\n    // We convert the following to a string for now to correctly include zero values in request parameters.\r\n    this.query['currency-greater-than'] = greater.toString();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Filtered results should have an amount less than this value, as int, representing asset units.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxBalance = 500000;\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .currencyLessThan(maxBalance + 1)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param lesser\r\n   * @category query\r\n   */\r\n  currencyLessThan(lesser: number) {\r\n    this.query['currency-less-than'] = lesser;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Combined with address, defines what address to filter on, as string.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const assetId = 163650;\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const role = \"sender\";\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .address(address)\r\n   *        .addressRole(role)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param role - one of `sender`, `receiver`, `freeze-target`\r\n   * @category query\r\n   */\r\n  addressRole(role: string) {\r\n    this.query['address-role'] = role;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Only include transactions with this address in one of the transaction fields.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const assetId = 163650;\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .address(address)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param address\r\n   * @category query\r\n   */\r\n  address(address: string) {\r\n    this.query.address = address;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Whether or not to consider the `close-to` field as a receiver when filtering transactions, as bool. Set to `true` to ignore `close-to`.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .excludeCloseTo(true)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param exclude\r\n   * @category query\r\n   */\r\n  excludeCloseTo(exclude: boolean) {\r\n    this.query['exclude-close-to'] = exclude;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * The next page of results.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxResults = 25;\r\n   * const assetId = 163650;\r\n   *\r\n   * const assetTxnsPage1 = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .limit(maxResults)\r\n   *        .do();\r\n   *\r\n   * const assetTxnsPage2 = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .limit(maxResults)\r\n   *        .nextToken(assetTxnsPage1[\"next-token\"])\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param nextToken - provided by the previous results.\r\n   * @category query\r\n   */\r\n  nextToken(nextToken: string) {\r\n    this.query.next = nextToken;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Whether or not to include rekeying transactions.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient\r\n   *        .lookupAssetTransactions(assetId)\r\n   *        .rekeyTo(false)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param rekeyTo\r\n   * @category query\r\n   */\r\n  rekeyTo(rekeyTo: boolean) {\r\n    this.query['rekey-to'] = rekeyTo;\r\n    return this;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
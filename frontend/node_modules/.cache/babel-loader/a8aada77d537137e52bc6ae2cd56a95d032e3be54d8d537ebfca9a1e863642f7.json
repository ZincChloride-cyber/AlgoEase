{"ast":null,"code":"/**\r\n * This file is a wrapper of msgpack.js.\r\n * The wrapper was written in order to ensure correct encoding of Algorand Transaction and other formats.\r\n * In particular, it matches go-algorand blockchain client, written in go (https://www.github.com/algorand/go-algorand.\r\n * Algorand's msgpack encoding follows to following rules -\r\n *  1. Every integer must be encoded to the smallest type possible (0-255-\\>8bit, 256-65535-\\>16bit, etx)\r\n *  2. All fields names must be sorted\r\n *  3. All empty and 0 fields should be omitted\r\n *  4. Every positive number must be encoded as uint\r\n *  5. Binary blob should be used for binary data and string for strings\r\n *  */\nimport * as msgpack from 'algo-msgpack-with-bigint';\n// Errors\nexport const ERROR_CONTAINS_EMPTY_STRING = 'The object contains empty or 0 values. First empty or 0 value encountered during encoding: ';\n/**\r\n * containsEmpty returns true if any of the object's values are empty, false otherwise.\r\n * Empty arrays considered empty\r\n * @param obj - The object to check\r\n * @returns \\{true, empty key\\} if contains empty, \\{false, undefined\\} otherwise\r\n */\nfunction containsEmpty(obj) {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      if (!obj[key] || obj[key].length === 0) {\n        return {\n          containsEmpty: true,\n          firstEmptyKey: key\n        };\n      }\n    }\n  }\n  return {\n    containsEmpty: false,\n    firstEmptyKey: undefined\n  };\n}\n/**\r\n * rawEncode encodes objects using msgpack, regardless of whether there are\r\n * empty or 0 value fields.\r\n * @param obj - a dictionary to be encoded. May or may not contain empty or 0 values.\r\n * @returns msgpack representation of the object\r\n */\nexport function rawEncode(obj) {\n  // enable the canonical option\n  const options = {\n    sortKeys: true\n  };\n  return msgpack.encode(obj, options);\n}\n/**\r\n * encode encodes objects using msgpack\r\n * @param obj - a dictionary to be encoded. Must not contain empty or 0 values.\r\n * @returns msgpack representation of the object\r\n * @throws Error containing ERROR_CONTAINS_EMPTY_STRING if the object contains empty or zero values\r\n */\nexport function encode(obj) {\n  // Check for empty values\n  const emptyCheck = containsEmpty(obj);\n  if (emptyCheck.containsEmpty) {\n    throw new Error(ERROR_CONTAINS_EMPTY_STRING + emptyCheck.firstEmptyKey);\n  }\n  // enable the canonical option\n  return rawEncode(obj);\n}\nexport function decode(buffer) {\n  return msgpack.decode(buffer);\n}","map":{"version":3,"names":["msgpack","ERROR_CONTAINS_EMPTY_STRING","containsEmpty","obj","key","Object","prototype","hasOwnProperty","call","length","firstEmptyKey","undefined","rawEncode","options","sortKeys","encode","emptyCheck","Error","decode","buffer"],"sources":["C:\\Users\\Aditya singh\\AlgoEase\\frontend\\node_modules\\algosdk\\src\\encoding\\encoding.ts"],"sourcesContent":["/**\r\n * This file is a wrapper of msgpack.js.\r\n * The wrapper was written in order to ensure correct encoding of Algorand Transaction and other formats.\r\n * In particular, it matches go-algorand blockchain client, written in go (https://www.github.com/algorand/go-algorand.\r\n * Algorand's msgpack encoding follows to following rules -\r\n *  1. Every integer must be encoded to the smallest type possible (0-255-\\>8bit, 256-65535-\\>16bit, etx)\r\n *  2. All fields names must be sorted\r\n *  3. All empty and 0 fields should be omitted\r\n *  4. Every positive number must be encoded as uint\r\n *  5. Binary blob should be used for binary data and string for strings\r\n *  */\r\n\r\nimport * as msgpack from 'algo-msgpack-with-bigint';\r\n\r\n// Errors\r\nexport const ERROR_CONTAINS_EMPTY_STRING =\r\n  'The object contains empty or 0 values. First empty or 0 value encountered during encoding: ';\r\n\r\n/**\r\n * containsEmpty returns true if any of the object's values are empty, false otherwise.\r\n * Empty arrays considered empty\r\n * @param obj - The object to check\r\n * @returns \\{true, empty key\\} if contains empty, \\{false, undefined\\} otherwise\r\n */\r\nfunction containsEmpty(obj: Record<string | number | symbol, any>) {\r\n  for (const key in obj) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n      if (!obj[key] || obj[key].length === 0) {\r\n        return { containsEmpty: true, firstEmptyKey: key };\r\n      }\r\n    }\r\n  }\r\n  return { containsEmpty: false, firstEmptyKey: undefined };\r\n}\r\n\r\n/**\r\n * rawEncode encodes objects using msgpack, regardless of whether there are\r\n * empty or 0 value fields.\r\n * @param obj - a dictionary to be encoded. May or may not contain empty or 0 values.\r\n * @returns msgpack representation of the object\r\n */\r\nexport function rawEncode(obj: Record<string | number | symbol, any>) {\r\n  // enable the canonical option\r\n  const options = { sortKeys: true };\r\n  return msgpack.encode(obj, options);\r\n}\r\n\r\n/**\r\n * encode encodes objects using msgpack\r\n * @param obj - a dictionary to be encoded. Must not contain empty or 0 values.\r\n * @returns msgpack representation of the object\r\n * @throws Error containing ERROR_CONTAINS_EMPTY_STRING if the object contains empty or zero values\r\n */\r\nexport function encode(obj: Record<string | number | symbol, any>) {\r\n  // Check for empty values\r\n  const emptyCheck = containsEmpty(obj);\r\n  if (emptyCheck.containsEmpty) {\r\n    throw new Error(ERROR_CONTAINS_EMPTY_STRING + emptyCheck.firstEmptyKey);\r\n  }\r\n\r\n  // enable the canonical option\r\n  return rawEncode(obj);\r\n}\r\n\r\nexport function decode(buffer: ArrayLike<number>) {\r\n  return msgpack.decode(buffer);\r\n}\r\n"],"mappings":"AAAA;;;;;;;;;;;AAYA,OAAO,KAAKA,OAAO,MAAM,0BAA0B;AAEnD;AACA,OAAO,MAAMC,2BAA2B,GACtC,6FAA6F;AAE/F;;;;;;AAMA,SAASC,aAAaA,CAACC,GAA0C;EAC/D,KAAK,MAAMC,GAAG,IAAID,GAAG,EAAE;IACrB,IAAIE,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACL,GAAG,EAAEC,GAAG,CAAC,EAAE;MAClD,IAAI,CAACD,GAAG,CAACC,GAAG,CAAC,IAAID,GAAG,CAACC,GAAG,CAAC,CAACK,MAAM,KAAK,CAAC,EAAE;QACtC,OAAO;UAAEP,aAAa,EAAE,IAAI;UAAEQ,aAAa,EAAEN;QAAG,CAAE;;;;EAIxD,OAAO;IAAEF,aAAa,EAAE,KAAK;IAAEQ,aAAa,EAAEC;EAAS,CAAE;AAC3D;AAEA;;;;;;AAMA,OAAM,SAAUC,SAASA,CAACT,GAA0C;EAClE;EACA,MAAMU,OAAO,GAAG;IAAEC,QAAQ,EAAE;EAAI,CAAE;EAClC,OAAOd,OAAO,CAACe,MAAM,CAACZ,GAAG,EAAEU,OAAO,CAAC;AACrC;AAEA;;;;;;AAMA,OAAM,SAAUE,MAAMA,CAACZ,GAA0C;EAC/D;EACA,MAAMa,UAAU,GAAGd,aAAa,CAACC,GAAG,CAAC;EACrC,IAAIa,UAAU,CAACd,aAAa,EAAE;IAC5B,MAAM,IAAIe,KAAK,CAAChB,2BAA2B,GAAGe,UAAU,CAACN,aAAa,CAAC;;EAGzE;EACA,OAAOE,SAAS,CAACT,GAAG,CAAC;AACvB;AAEA,OAAM,SAAUe,MAAMA,CAACC,MAAyB;EAC9C,OAAOnB,OAAO,CAACkB,MAAM,CAACC,MAAM,CAAC;AAC/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
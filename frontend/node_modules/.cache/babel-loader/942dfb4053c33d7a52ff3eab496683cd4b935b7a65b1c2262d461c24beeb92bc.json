{"ast":null,"code":"import ServiceClient from '../serviceClient';\nimport MakeHealthCheck from './makeHealthCheck';\nimport LookupAssetBalances from './lookupAssetBalances';\nimport LookupAssetTransactions from './lookupAssetTransactions';\nimport LookupAccountTransactions from './lookupAccountTransactions';\nimport LookupBlock from './lookupBlock';\nimport LookupTransactionByID from './lookupTransactionByID';\nimport LookupAccountByID from './lookupAccountByID';\nimport LookupAccountAssets from './lookupAccountAssets';\nimport LookupAccountCreatedAssets from './lookupAccountCreatedAssets';\nimport LookupAccountAppLocalStates from './lookupAccountAppLocalStates';\nimport LookupAccountCreatedApplications from './lookupAccountCreatedApplications';\nimport LookupAssetByID from './lookupAssetByID';\nimport LookupApplications from './lookupApplications';\nimport LookupApplicationLogs from './lookupApplicationLogs';\nimport LookupApplicationBoxByIDandName from './lookupApplicationBoxByIDandName';\nimport SearchAccounts from './searchAccounts';\nimport SearchForBlockHeaders from './searchForBlockHeaders';\nimport SearchForTransactions from './searchForTransactions';\nimport SearchForAssets from './searchForAssets';\nimport SearchForApplications from './searchForApplications';\nimport SearchForApplicationBoxes from './searchForApplicationBoxes';\n/**\r\n * The Indexer provides a REST API interface of API calls to support searching the Algorand Blockchain.\r\n *\r\n * The Indexer REST APIs retrieve the blockchain data from a PostgreSQL compatible database that must be populated.\r\n *\r\n * This database is populated using the same indexer instance or a separate instance of the indexer which must connect to the algod process of a running Algorand node to read block data.\r\n *\r\n * This node must also be an Archival node to make searching the entire blockchain possible.\r\n *\r\n * #### Relevant Information\r\n * [Learn more about Indexer](https://developer.algorand.org/docs/get-details/indexer/)\r\n *\r\n * [Run Indexer in Postman OAS3](https://developer.algorand.org/docs/rest-apis/restendpoints/#algod-indexer-and-kmd-rest-endpoints)\r\n */\nexport default class IndexerClient extends ServiceClient {\n  /**\r\n   * Create an IndexerClient from\r\n   * * either a token, baseServer, port, and optional headers\r\n   * * or a base client server for interoperability with external dApp wallets\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const token  = \"\";\r\n   * const server = \"http://localhost\";\r\n   * const port   = 8980;\r\n   * const indexerClient = new algosdk.Indexer(token, server, port);\r\n   * ```\r\n   * @remarks\r\n   * The above configuration is for a sandbox private network.\r\n   * For applications on production, you are encouraged to run your own node with indexer, or use an Algorand REST API provider with a dedicated API key.\r\n   *\r\n   * @param tokenOrBaseClient - The API token for the Indexer API\r\n   * @param baseServer - REST endpoint\r\n   * @param port - Port number if specifically configured by the server\r\n   * @param headers - Optional headers\r\n   */\n  constructor(tokenOrBaseClient, baseServer = 'http://127.0.0.1', port = 8080, headers = {}) {\n    super('X-Indexer-API-Token', tokenOrBaseClient, baseServer, port, headers);\n  }\n  /**\r\n   * Returns the health object for the service.\r\n   * Returns 200 if healthy.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const health = await indexerClient.makeHealthCheck().do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-health)\r\n   * @category GET\r\n   */\n  makeHealthCheck() {\n    return new MakeHealthCheck(this.c, this.intDecoding);\n  }\n  /**\r\n   * Returns the list of accounts who hold the given asset and their balance.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const assetId = 163650;\r\n   * const assetBalances = await indexerClient.lookupAssetBalances(assetId).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-idbalances)\r\n   * @param index - The asset ID to look up.\r\n   * @category GET\r\n   */\n  lookupAssetBalances(index) {\n    return new LookupAssetBalances(this.c, this.intDecoding, index);\n  }\n  /**\r\n   * Returns transactions relating to the given asset.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient.lookupAssetTransactions(assetId).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-idtransactions)\r\n   * @param index - The asset ID to look up.\r\n   * @category GET\r\n   */\n  lookupAssetTransactions(index) {\n    return new LookupAssetTransactions(this.c, this.intDecoding, index);\n  }\n  /**\r\n   * Returns transactions relating to the given account.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient.lookupAccountTransactions(address).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idtransactions)\r\n   * @param account - The address of the account.\r\n   * @category GET\r\n   */\n  lookupAccountTransactions(account) {\n    return new LookupAccountTransactions(this.c, this.intDecoding, account);\n  }\n  /**\r\n   * Returns the block for the passed round.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const targetBlock = 18309917;\r\n   * const blockInfo = await indexerClient.lookupBlock(targetBlock).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2blocksround-number)\r\n   * @param round - The number of the round to look up.\r\n   * @category GET\r\n   */\n  lookupBlock(round) {\n    return new LookupBlock(this.c, this.intDecoding, round);\n  }\n  /**\r\n   * Returns information about the given transaction.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const txnId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\r\n   * const txnInfo = await indexerClient.lookupTransactionByID(txnId).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactionstxid)\r\n   * @param txID - The ID of the transaction to look up.\r\n   * @category GET\r\n   */\n  lookupTransactionByID(txID) {\n    return new LookupTransactionByID(this.c, this.intDecoding, txID);\n  }\n  /**\r\n   * Returns information about the given account.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountInfo = await indexerClient.lookupAccountByID(address).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-id)\r\n   * @param account - The address of the account to look up.\r\n   * @category GET\r\n   */\n  lookupAccountByID(account) {\n    return new LookupAccountByID(this.c, this.intDecoding, account);\n  }\n  /**\r\n   * Returns asset about the given account.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountAssets = await indexerClient.lookupAccountAssets(address).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idassets)\r\n   * @param account - The address of the account to look up.\r\n   * @category GET\r\n   */\n  lookupAccountAssets(account) {\n    return new LookupAccountAssets(this.c, this.intDecoding, account);\n  }\n  /**\r\n   * Returns asset information created by the given account.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountCreatedAssets = await indexerClient.lookupAccountCreatedAssets(address).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idcreated-assets)\r\n   * @param account - The address of the account to look up.\r\n   * @category GET\r\n   */\n  lookupAccountCreatedAssets(account) {\n    return new LookupAccountCreatedAssets(this.c, this.intDecoding, account);\n  }\n  /**\r\n   * Returns application local state about the given account.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountAppLocalStates = await indexerClient.lookupAccountAppLocalStates(address).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idapps-local-state)\r\n   * @param account - The address of the account to look up.\r\n   * @category GET\r\n   */\n  lookupAccountAppLocalStates(account) {\n    return new LookupAccountAppLocalStates(this.c, this.intDecoding, account);\n  }\n  /**\r\n   * Returns application information created by the given account.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountCreatedApps = await indexerClient.lookupAccountCreatedApplications(address).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idcreated-applications)\r\n   * @param account - The address of the account to look up.\r\n   * @category GET\r\n   */\n  lookupAccountCreatedApplications(account) {\n    return new LookupAccountCreatedApplications(this.c, this.intDecoding, account);\n  }\n  /**\r\n   * Returns information about the passed asset.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const assetId = 163650;\r\n   * const assetInfo = await indexerClient.lookupAssetByID(assetId).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-id)\r\n   * @param index - The ID of the asset ot look up.\r\n   * @category GET\r\n   */\n  lookupAssetByID(index) {\n    return new LookupAssetByID(this.c, this.intDecoding, index);\n  }\n  /**\r\n   * Returns information about the passed application.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const appId = 60553466;\r\n   * const appInfo = await indexerClient.lookupApplications(appId).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-id)\r\n   * @param index - The ID of the application to look up.\r\n   * @category GET\r\n   */\n  lookupApplications(index) {\n    return new LookupApplications(this.c, this.intDecoding, index);\n  }\n  /**\r\n   * Returns log messages generated by the passed in application.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const appId = 60553466;\r\n   * const appLogs = await indexerClient.lookupApplicationLogs(appId).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idlogs)\r\n   * @param appID - The ID of the application which generated the logs.\r\n   * @category GET\r\n   */\n  lookupApplicationLogs(appID) {\n    return new LookupApplicationLogs(this.c, this.intDecoding, appID);\n  }\n  /**\r\n   * Returns information about indexed accounts.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const accounts = await indexerClient.searchAccounts().do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accounts)\r\n   * @category GET\r\n   */\n  searchAccounts() {\n    return new SearchAccounts(this.c, this.intDecoding);\n  }\n  /**\r\n   * Returns information about indexed transactions.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const txns = await indexerClient.searchForTransactions().do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactions)\r\n   * @category GET\r\n   */\n  searchForTransactions() {\n    return new SearchForTransactions(this.c, this.intDecoding);\n  }\n  /**\r\n   * Returns information about indexed block headers.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const txns = await indexerClient.searchForBlockHeaders().do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2block-headers)\r\n   * @category GET\r\n   */\n  searchForBlockHeaders() {\n    return new SearchForBlockHeaders(this.c, this.intDecoding);\n  }\n  /**\r\n   * Returns information about indexed assets.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const assets = await indexerClient.searchForAssets().do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assets)\r\n   * @category GET\r\n   */\n  searchForAssets() {\n    return new SearchForAssets(this.c, this.intDecoding);\n  }\n  /**\r\n   * Returns information about indexed applications.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const apps = await indexerClient.searchForApplications().do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applications)\r\n   * @category GET\r\n   */\n  searchForApplications() {\n    return new SearchForApplications(this.c, this.intDecoding);\n  }\n  /**\r\n   * Returns information about indexed application boxes.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxResults = 20;\r\n   * const appID = 1234;\r\n   *\r\n   * const responsePage1 = await indexerClient\r\n   *        .searchForApplicationBoxes(appID)\r\n   *        .limit(maxResults)\r\n   *        .do();\r\n   * const boxNamesPage1 = responsePage1.boxes.map(box => box.name);\r\n   *\r\n   * const responsePage2 = await indexerClient\r\n   *        .searchForApplicationBoxes(appID)\r\n   *        .limit(maxResults)\r\n   *        .nextToken(responsePage1.nextToken)\r\n   *        .do();\r\n   * const boxNamesPage2 = responsePage2.boxes.map(box => box.name);\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idboxes)\r\n   * @param appID - The ID of the application with boxes.\r\n   * @category GET\r\n   */\n  searchForApplicationBoxes(appID) {\n    return new SearchForApplicationBoxes(this.c, this.intDecoding, appID);\n  }\n  /**\r\n   * Returns information about the application box given its name.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const boxName = Buffer.from(\"foo\");\r\n   * const boxResponse = await indexerClient\r\n   *        .LookupApplicationBoxByIDandName(1234, boxName)\r\n   *        .do();\r\n   * const boxValue = boxResponse.value;\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idbox)\r\n   * @param appID - The ID of the application with boxes.\r\n   * @category GET\r\n   */\n  lookupApplicationBoxByIDandName(appID, boxName) {\n    return new LookupApplicationBoxByIDandName(this.c, this.intDecoding, appID, boxName);\n  }\n}","map":{"version":3,"names":["ServiceClient","MakeHealthCheck","LookupAssetBalances","LookupAssetTransactions","LookupAccountTransactions","LookupBlock","LookupTransactionByID","LookupAccountByID","LookupAccountAssets","LookupAccountCreatedAssets","LookupAccountAppLocalStates","LookupAccountCreatedApplications","LookupAssetByID","LookupApplications","LookupApplicationLogs","LookupApplicationBoxByIDandName","SearchAccounts","SearchForBlockHeaders","SearchForTransactions","SearchForAssets","SearchForApplications","SearchForApplicationBoxes","IndexerClient","constructor","tokenOrBaseClient","baseServer","port","headers","makeHealthCheck","c","intDecoding","lookupAssetBalances","index","lookupAssetTransactions","lookupAccountTransactions","account","lookupBlock","round","lookupTransactionByID","txID","lookupAccountByID","lookupAccountAssets","lookupAccountCreatedAssets","lookupAccountAppLocalStates","lookupAccountCreatedApplications","lookupAssetByID","lookupApplications","lookupApplicationLogs","appID","searchAccounts","searchForTransactions","searchForBlockHeaders","searchForAssets","searchForApplications","searchForApplicationBoxes","lookupApplicationBoxByIDandName","boxName"],"sources":["C:\\Users\\Aditya singh\\AlgoEase\\frontend\\node_modules\\algosdk\\src\\client\\v2\\indexer\\indexer.ts"],"sourcesContent":["import ServiceClient from '../serviceClient';\r\nimport MakeHealthCheck from './makeHealthCheck';\r\nimport LookupAssetBalances from './lookupAssetBalances';\r\nimport LookupAssetTransactions from './lookupAssetTransactions';\r\nimport LookupAccountTransactions from './lookupAccountTransactions';\r\nimport LookupBlock from './lookupBlock';\r\nimport LookupTransactionByID from './lookupTransactionByID';\r\nimport LookupAccountByID from './lookupAccountByID';\r\nimport LookupAccountAssets from './lookupAccountAssets';\r\nimport LookupAccountCreatedAssets from './lookupAccountCreatedAssets';\r\nimport LookupAccountAppLocalStates from './lookupAccountAppLocalStates';\r\nimport LookupAccountCreatedApplications from './lookupAccountCreatedApplications';\r\nimport LookupAssetByID from './lookupAssetByID';\r\nimport LookupApplications from './lookupApplications';\r\nimport LookupApplicationLogs from './lookupApplicationLogs';\r\nimport LookupApplicationBoxByIDandName from './lookupApplicationBoxByIDandName';\r\nimport SearchAccounts from './searchAccounts';\r\nimport SearchForBlockHeaders from './searchForBlockHeaders';\r\nimport SearchForTransactions from './searchForTransactions';\r\nimport SearchForAssets from './searchForAssets';\r\nimport SearchForApplications from './searchForApplications';\r\nimport SearchForApplicationBoxes from './searchForApplicationBoxes';\r\nimport { BaseHTTPClient } from '../../baseHTTPClient';\r\nimport {\r\n  CustomTokenHeader,\r\n  IndexerTokenHeader,\r\n} from '../../urlTokenBaseHTTPClient';\r\n\r\n/**\r\n * The Indexer provides a REST API interface of API calls to support searching the Algorand Blockchain.\r\n *\r\n * The Indexer REST APIs retrieve the blockchain data from a PostgreSQL compatible database that must be populated.\r\n *\r\n * This database is populated using the same indexer instance or a separate instance of the indexer which must connect to the algod process of a running Algorand node to read block data.\r\n *\r\n * This node must also be an Archival node to make searching the entire blockchain possible.\r\n *\r\n * #### Relevant Information\r\n * [Learn more about Indexer](https://developer.algorand.org/docs/get-details/indexer/)\r\n *\r\n * [Run Indexer in Postman OAS3](https://developer.algorand.org/docs/rest-apis/restendpoints/#algod-indexer-and-kmd-rest-endpoints)\r\n */\r\nexport default class IndexerClient extends ServiceClient {\r\n  /**\r\n   * Create an IndexerClient from\r\n   * * either a token, baseServer, port, and optional headers\r\n   * * or a base client server for interoperability with external dApp wallets\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const token  = \"\";\r\n   * const server = \"http://localhost\";\r\n   * const port   = 8980;\r\n   * const indexerClient = new algosdk.Indexer(token, server, port);\r\n   * ```\r\n   * @remarks\r\n   * The above configuration is for a sandbox private network.\r\n   * For applications on production, you are encouraged to run your own node with indexer, or use an Algorand REST API provider with a dedicated API key.\r\n   *\r\n   * @param tokenOrBaseClient - The API token for the Indexer API\r\n   * @param baseServer - REST endpoint\r\n   * @param port - Port number if specifically configured by the server\r\n   * @param headers - Optional headers\r\n   */\r\n  constructor(\r\n    tokenOrBaseClient:\r\n      | string\r\n      | IndexerTokenHeader\r\n      | CustomTokenHeader\r\n      | BaseHTTPClient,\r\n    baseServer = 'http://127.0.0.1',\r\n    port: string | number = 8080,\r\n    headers: Record<string, string> = {}\r\n  ) {\r\n    super('X-Indexer-API-Token', tokenOrBaseClient, baseServer, port, headers);\r\n  }\r\n\r\n  /**\r\n   * Returns the health object for the service.\r\n   * Returns 200 if healthy.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const health = await indexerClient.makeHealthCheck().do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-health)\r\n   * @category GET\r\n   */\r\n  makeHealthCheck() {\r\n    return new MakeHealthCheck(this.c, this.intDecoding);\r\n  }\r\n\r\n  /**\r\n   * Returns the list of accounts who hold the given asset and their balance.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const assetId = 163650;\r\n   * const assetBalances = await indexerClient.lookupAssetBalances(assetId).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-idbalances)\r\n   * @param index - The asset ID to look up.\r\n   * @category GET\r\n   */\r\n  lookupAssetBalances(index: number) {\r\n    return new LookupAssetBalances(this.c, this.intDecoding, index);\r\n  }\r\n\r\n  /**\r\n   * Returns transactions relating to the given asset.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const assetId = 163650;\r\n   * const assetTxns = await indexerClient.lookupAssetTransactions(assetId).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-idtransactions)\r\n   * @param index - The asset ID to look up.\r\n   * @category GET\r\n   */\r\n  lookupAssetTransactions(index: number) {\r\n    return new LookupAssetTransactions(this.c, this.intDecoding, index);\r\n  }\r\n\r\n  /**\r\n   * Returns transactions relating to the given account.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient.lookupAccountTransactions(address).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idtransactions)\r\n   * @param account - The address of the account.\r\n   * @category GET\r\n   */\r\n  lookupAccountTransactions(account: string) {\r\n    return new LookupAccountTransactions(this.c, this.intDecoding, account);\r\n  }\r\n\r\n  /**\r\n   * Returns the block for the passed round.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const targetBlock = 18309917;\r\n   * const blockInfo = await indexerClient.lookupBlock(targetBlock).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2blocksround-number)\r\n   * @param round - The number of the round to look up.\r\n   * @category GET\r\n   */\r\n  lookupBlock(round: number) {\r\n    return new LookupBlock(this.c, this.intDecoding, round);\r\n  }\r\n\r\n  /**\r\n   * Returns information about the given transaction.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const txnId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\r\n   * const txnInfo = await indexerClient.lookupTransactionByID(txnId).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactionstxid)\r\n   * @param txID - The ID of the transaction to look up.\r\n   * @category GET\r\n   */\r\n  lookupTransactionByID(txID: string) {\r\n    return new LookupTransactionByID(this.c, this.intDecoding, txID);\r\n  }\r\n\r\n  /**\r\n   * Returns information about the given account.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountInfo = await indexerClient.lookupAccountByID(address).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-id)\r\n   * @param account - The address of the account to look up.\r\n   * @category GET\r\n   */\r\n  lookupAccountByID(account: string) {\r\n    return new LookupAccountByID(this.c, this.intDecoding, account);\r\n  }\r\n\r\n  /**\r\n   * Returns asset about the given account.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountAssets = await indexerClient.lookupAccountAssets(address).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idassets)\r\n   * @param account - The address of the account to look up.\r\n   * @category GET\r\n   */\r\n  lookupAccountAssets(account: string) {\r\n    return new LookupAccountAssets(this.c, this.intDecoding, account);\r\n  }\r\n\r\n  /**\r\n   * Returns asset information created by the given account.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountCreatedAssets = await indexerClient.lookupAccountCreatedAssets(address).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idcreated-assets)\r\n   * @param account - The address of the account to look up.\r\n   * @category GET\r\n   */\r\n  lookupAccountCreatedAssets(account: string) {\r\n    return new LookupAccountCreatedAssets(this.c, this.intDecoding, account);\r\n  }\r\n\r\n  /**\r\n   * Returns application local state about the given account.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountAppLocalStates = await indexerClient.lookupAccountAppLocalStates(address).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idapps-local-state)\r\n   * @param account - The address of the account to look up.\r\n   * @category GET\r\n   */\r\n  lookupAccountAppLocalStates(account: string) {\r\n    return new LookupAccountAppLocalStates(this.c, this.intDecoding, account);\r\n  }\r\n\r\n  /**\r\n   * Returns application information created by the given account.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountCreatedApps = await indexerClient.lookupAccountCreatedApplications(address).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idcreated-applications)\r\n   * @param account - The address of the account to look up.\r\n   * @category GET\r\n   */\r\n  lookupAccountCreatedApplications(account: string) {\r\n    return new LookupAccountCreatedApplications(\r\n      this.c,\r\n      this.intDecoding,\r\n      account\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns information about the passed asset.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const assetId = 163650;\r\n   * const assetInfo = await indexerClient.lookupAssetByID(assetId).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assetsasset-id)\r\n   * @param index - The ID of the asset ot look up.\r\n   * @category GET\r\n   */\r\n  lookupAssetByID(index: number) {\r\n    return new LookupAssetByID(this.c, this.intDecoding, index);\r\n  }\r\n\r\n  /**\r\n   * Returns information about the passed application.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const appId = 60553466;\r\n   * const appInfo = await indexerClient.lookupApplications(appId).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-id)\r\n   * @param index - The ID of the application to look up.\r\n   * @category GET\r\n   */\r\n  lookupApplications(index: number) {\r\n    return new LookupApplications(this.c, this.intDecoding, index);\r\n  }\r\n\r\n  /**\r\n   * Returns log messages generated by the passed in application.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const appId = 60553466;\r\n   * const appLogs = await indexerClient.lookupApplicationLogs(appId).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idlogs)\r\n   * @param appID - The ID of the application which generated the logs.\r\n   * @category GET\r\n   */\r\n  lookupApplicationLogs(appID: number) {\r\n    return new LookupApplicationLogs(this.c, this.intDecoding, appID);\r\n  }\r\n\r\n  /**\r\n   * Returns information about indexed accounts.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const accounts = await indexerClient.searchAccounts().do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accounts)\r\n   * @category GET\r\n   */\r\n  searchAccounts() {\r\n    return new SearchAccounts(this.c, this.intDecoding);\r\n  }\r\n\r\n  /**\r\n   * Returns information about indexed transactions.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const txns = await indexerClient.searchForTransactions().do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2transactions)\r\n   * @category GET\r\n   */\r\n  searchForTransactions() {\r\n    return new SearchForTransactions(this.c, this.intDecoding);\r\n  }\r\n\r\n  /**\r\n   * Returns information about indexed block headers.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const txns = await indexerClient.searchForBlockHeaders().do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2block-headers)\r\n   * @category GET\r\n   */\r\n  searchForBlockHeaders() {\r\n    return new SearchForBlockHeaders(this.c, this.intDecoding);\r\n  }\r\n\r\n  /**\r\n   * Returns information about indexed assets.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const assets = await indexerClient.searchForAssets().do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assets)\r\n   * @category GET\r\n   */\r\n  searchForAssets() {\r\n    return new SearchForAssets(this.c, this.intDecoding);\r\n  }\r\n\r\n  /**\r\n   * Returns information about indexed applications.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const apps = await indexerClient.searchForApplications().do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applications)\r\n   * @category GET\r\n   */\r\n  searchForApplications() {\r\n    return new SearchForApplications(this.c, this.intDecoding);\r\n  }\r\n\r\n  /**\r\n   * Returns information about indexed application boxes.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxResults = 20;\r\n   * const appID = 1234;\r\n   *\r\n   * const responsePage1 = await indexerClient\r\n   *        .searchForApplicationBoxes(appID)\r\n   *        .limit(maxResults)\r\n   *        .do();\r\n   * const boxNamesPage1 = responsePage1.boxes.map(box => box.name);\r\n   *\r\n   * const responsePage2 = await indexerClient\r\n   *        .searchForApplicationBoxes(appID)\r\n   *        .limit(maxResults)\r\n   *        .nextToken(responsePage1.nextToken)\r\n   *        .do();\r\n   * const boxNamesPage2 = responsePage2.boxes.map(box => box.name);\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idboxes)\r\n   * @param appID - The ID of the application with boxes.\r\n   * @category GET\r\n   */\r\n  searchForApplicationBoxes(appID: number) {\r\n    return new SearchForApplicationBoxes(this.c, this.intDecoding, appID);\r\n  }\r\n\r\n  /**\r\n   * Returns information about the application box given its name.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const boxName = Buffer.from(\"foo\");\r\n   * const boxResponse = await indexerClient\r\n   *        .LookupApplicationBoxByIDandName(1234, boxName)\r\n   *        .do();\r\n   * const boxValue = boxResponse.value;\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idbox)\r\n   * @param appID - The ID of the application with boxes.\r\n   * @category GET\r\n   */\r\n  lookupApplicationBoxByIDandName(appID: number, boxName: Uint8Array) {\r\n    return new LookupApplicationBoxByIDandName(\r\n      this.c,\r\n      this.intDecoding,\r\n      appID,\r\n      boxName\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
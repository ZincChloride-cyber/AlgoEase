{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:\\Users\\Aditya singh\\AlgoEase\\frontend\\node_modules\\algosdk\\src\\types\\transactions\\encoded.ts"],"sourcesContent":["import { Buffer } from 'buffer';\r\n\r\n/**\r\n * Interfaces for the encoded transaction object. Every property is labelled with its associated Transaction type property\r\n */\r\n\r\nexport interface EncodedAssetParams {\r\n  /**\r\n   * assetTotal\r\n   */\r\n  t: number | bigint;\r\n\r\n  /**\r\n   * assetDefaultFrozen\r\n   */\r\n  df: boolean;\r\n\r\n  /**\r\n   * assetDecimals\r\n   */\r\n  dc: number;\r\n\r\n  /**\r\n   * assetManager\r\n   */\r\n  m?: Buffer;\r\n\r\n  /**\r\n   * assetReserve\r\n   */\r\n  r?: Buffer;\r\n\r\n  /**\r\n   * assetFreeze\r\n   */\r\n  f?: Buffer;\r\n\r\n  /**\r\n   * assetClawback\r\n   */\r\n  c?: Buffer;\r\n\r\n  /**\r\n   * assetName\r\n   */\r\n  an?: string;\r\n\r\n  /**\r\n   * assetUnitName\r\n   */\r\n  un?: string;\r\n\r\n  /**\r\n   * assetURL\r\n   */\r\n  au?: string;\r\n\r\n  /**\r\n   * assetMetadataHash\r\n   */\r\n  am?: Buffer;\r\n}\r\n\r\nexport interface EncodedLocalStateSchema {\r\n  /**\r\n   * appLocalInts\r\n   */\r\n  nui: number;\r\n\r\n  /**\r\n   * appLocalByteSlices\r\n   */\r\n  nbs: number;\r\n}\r\n\r\nexport interface EncodedGlobalStateSchema {\r\n  /**\r\n   * appGlobalInts\r\n   */\r\n  nui: number;\r\n\r\n  /**\r\n   * appGlobalByteSlices\r\n   */\r\n  nbs: number;\r\n}\r\n\r\nexport interface EncodedBoxReference {\r\n  /**\r\n   * index of the app ID in the foreign apps array\r\n   */\r\n  i: number;\r\n\r\n  /**\r\n   * box name\r\n   */\r\n  n: Uint8Array;\r\n}\r\n\r\n/**\r\n * A structure for an encoded heartbeat proof fields object\r\n */\r\nexport interface EncodedHeartbeatProof {\r\n  /**\r\n   * Sig\r\n   */\r\n  s: Buffer;\r\n\r\n  /**\r\n   * PK\r\n   */\r\n  p: Buffer;\r\n\r\n  /**\r\n   * PK2\r\n   */\r\n  p2: Buffer;\r\n\r\n  /**\r\n   * PK1Sig\r\n   */\r\n  p1s: Buffer;\r\n\r\n  /**\r\n   * PK2Sig\r\n   */\r\n  p2s: Buffer;\r\n}\r\n\r\n/**\r\n * A structure for an encoded heartbeat fields object\r\n */\r\nexport interface EncodedHeartbeatFields {\r\n  /**\r\n   * HbAddress\r\n   */\r\n  a: Buffer;\r\n\r\n  /**\r\n   * HbProof\r\n   */\r\n  prf: EncodedHeartbeatProof;\r\n\r\n  /**\r\n   * HbSeed\r\n   */\r\n  sd: Buffer;\r\n\r\n  /**\r\n   * HbVoteID\r\n   */\r\n  vid: Buffer;\r\n\r\n  /**\r\n   * HbKeyDilution\r\n   */\r\n  kd: number;\r\n}\r\n\r\n/**\r\n * A rough structure for the encoded transaction object. Every property is labelled with its associated Transaction type property\r\n */\r\nexport interface EncodedTransaction {\r\n  /**\r\n   * fee\r\n   */\r\n  fee?: number;\r\n\r\n  /**\r\n   * firstRound\r\n   */\r\n  fv?: number;\r\n\r\n  /**\r\n   * lastRound\r\n   */\r\n  lv: number;\r\n\r\n  /**\r\n   * note\r\n   */\r\n  note?: Buffer;\r\n\r\n  /**\r\n   * from\r\n   */\r\n  snd: Buffer;\r\n\r\n  /**\r\n   * type\r\n   */\r\n  type: string;\r\n\r\n  /**\r\n   * genesisID\r\n   */\r\n  gen: string;\r\n\r\n  /**\r\n   * genesisHash\r\n   */\r\n  gh: Buffer;\r\n\r\n  /**\r\n   * lease\r\n   */\r\n  lx?: Buffer;\r\n\r\n  /**\r\n   * group\r\n   */\r\n  grp?: Buffer;\r\n\r\n  /**\r\n   * amount\r\n   */\r\n  amt?: number | bigint;\r\n\r\n  /**\r\n   * amount (but for asset transfers)\r\n   */\r\n  aamt?: number | bigint;\r\n\r\n  /**\r\n   * closeRemainderTo\r\n   */\r\n  close?: Buffer;\r\n\r\n  /**\r\n   * closeRemainderTo (but for asset transfers)\r\n   */\r\n  aclose?: Buffer;\r\n\r\n  /**\r\n   * reKeyTo\r\n   */\r\n  rekey?: Buffer;\r\n\r\n  /**\r\n   * to\r\n   */\r\n  rcv?: Buffer;\r\n\r\n  /**\r\n   * to (but for asset transfers)\r\n   */\r\n  arcv?: Buffer;\r\n\r\n  /**\r\n   * voteKey\r\n   */\r\n  votekey?: Buffer;\r\n\r\n  /**\r\n   * selectionKey\r\n   */\r\n  selkey?: Buffer;\r\n\r\n  /**\r\n   * stateProofKey\r\n   */\r\n  sprfkey?: Buffer;\r\n\r\n  /**\r\n   * voteFirst\r\n   */\r\n  votefst?: number;\r\n\r\n  /**\r\n   * voteLast\r\n   */\r\n  votelst?: number;\r\n\r\n  /**\r\n   * voteKeyDilution\r\n   */\r\n  votekd?: number;\r\n\r\n  /**\r\n   * nonParticipation\r\n   */\r\n  nonpart?: boolean;\r\n\r\n  /**\r\n   * assetIndex\r\n   */\r\n  caid?: number;\r\n\r\n  /**\r\n   * assetIndex (but for asset transfers)\r\n   */\r\n  xaid?: number;\r\n\r\n  /**\r\n   * assetIndex (but for asset freezing/unfreezing)\r\n   */\r\n  faid?: number;\r\n\r\n  /**\r\n   * freezeState\r\n   */\r\n  afrz?: boolean;\r\n\r\n  /**\r\n   * freezeAccount\r\n   */\r\n  fadd?: Buffer;\r\n\r\n  /**\r\n   * assetRevocationTarget\r\n   */\r\n  asnd?: Buffer;\r\n\r\n  /**\r\n   * See EncodedAssetParams type\r\n   */\r\n  apar?: EncodedAssetParams;\r\n\r\n  /**\r\n   * appIndex\r\n   */\r\n  apid?: number;\r\n\r\n  /**\r\n   * appOnComplete\r\n   */\r\n  apan?: number;\r\n\r\n  /**\r\n   * See EncodedLocalStateSchema type\r\n   */\r\n  apls?: EncodedLocalStateSchema;\r\n\r\n  /**\r\n   * See EncodedGlobalStateSchema type\r\n   */\r\n  apgs?: EncodedGlobalStateSchema;\r\n\r\n  /**\r\n   * appForeignApps\r\n   */\r\n  apfa?: number[];\r\n\r\n  /**\r\n   * appForeignAssets\r\n   */\r\n  apas?: number[];\r\n\r\n  /**\r\n   * appApprovalProgram\r\n   */\r\n  apap?: Buffer;\r\n\r\n  /**\r\n   * appClearProgram\r\n   */\r\n  apsu?: Buffer;\r\n\r\n  /**\r\n   * appArgs\r\n   */\r\n  apaa?: Buffer[];\r\n\r\n  /**\r\n   * appAccounts\r\n   */\r\n  apat?: Buffer[];\r\n\r\n  /**\r\n   * extraPages\r\n   */\r\n  apep?: number;\r\n\r\n  /**\r\n   * boxes\r\n   */\r\n  apbx?: EncodedBoxReference[];\r\n\r\n  /*\r\n   * stateProofType\r\n   */\r\n  sptype?: number | bigint;\r\n\r\n  /**\r\n   * stateProof\r\n   */\r\n  sp?: Buffer;\r\n\r\n  /**\r\n   * stateProofMessage\r\n   */\r\n  spmsg?: Buffer;\r\n\r\n  /**\r\n   * heartbeat fields\r\n   */\r\n  hb?: EncodedHeartbeatFields;\r\n}\r\n\r\nexport interface EncodedSubsig {\r\n  /**\r\n   *  The public key\r\n   */\r\n  pk: Uint8Array;\r\n\r\n  /**\r\n   * The signature provided by the public key, if any\r\n   */\r\n  s?: Uint8Array;\r\n}\r\n\r\n/**\r\n * A rough structure for the encoded multi signature transaction object.\r\n * Every property is labelled with its associated `MultisigMetadata` type property\r\n */\r\nexport interface EncodedMultisig {\r\n  /**\r\n   * version\r\n   */\r\n  v: number;\r\n\r\n  /**\r\n   * threshold\r\n   */\r\n  thr: number;\r\n\r\n  /**\r\n   * Subset of signatures. A threshold of `thr` signors is required.\r\n   */\r\n  subsig: EncodedSubsig[];\r\n}\r\n\r\nexport interface EncodedLogicSig {\r\n  l: Uint8Array;\r\n  arg?: Uint8Array[];\r\n  sig?: Uint8Array;\r\n  msig?: EncodedMultisig;\r\n}\r\n\r\nexport interface EncodedLogicSigAccount {\r\n  lsig: EncodedLogicSig;\r\n  sigkey?: Uint8Array;\r\n}\r\n\r\n/**\r\n * A structure for an encoded signed transaction object\r\n */\r\nexport interface EncodedSignedTransaction {\r\n  /**\r\n   * Transaction signature\r\n   */\r\n  sig?: Buffer;\r\n\r\n  /**\r\n   * The transaction that was signed\r\n   */\r\n  txn: EncodedTransaction;\r\n\r\n  /**\r\n   * Multisig structure\r\n   */\r\n  msig?: EncodedMultisig;\r\n\r\n  /**\r\n   * Logic signature\r\n   */\r\n  lsig?: EncodedLogicSig;\r\n\r\n  /**\r\n   * The signer, if signing with a different key than the Transaction type `from` property indicates\r\n   */\r\n  sgnr?: Buffer;\r\n}\r\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
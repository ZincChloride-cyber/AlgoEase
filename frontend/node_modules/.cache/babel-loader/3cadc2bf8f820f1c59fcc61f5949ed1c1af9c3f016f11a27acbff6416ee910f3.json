{"ast":null,"code":"import { Buffer } from 'buffer';\nimport JSONRequest from '../jsonrequest';\nimport { Box } from './models/types';\n/**\r\n * Given an application ID and the box name (key), return the value stored in the box.\r\n *\r\n * #### Example\r\n * ```typescript\r\n * const index = 60553466;\r\n * const boxName = Buffer.from(\"foo\");\r\n * const boxResponse = await algodClient.getApplicationBoxByName(index, boxName).do();\r\n * const boxValue = boxResponse.value;\r\n * ```\r\n *\r\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2applicationsapplication-idbox)\r\n * @param index - The application ID to look up.\r\n * @category GET\r\n */\nexport default class GetApplicationBoxByName extends JSONRequest {\n  constructor(c, intDecoding, index, name) {\n    super(c, intDecoding);\n    this.index = index;\n    this.index = index;\n    // Encode name in base64 format and append the encoding prefix.\n    const encodedName = Buffer.from(name).toString('base64');\n    this.query.name = encodeURI(`b64:${encodedName}`);\n  }\n  /**\r\n   * @returns `/v2/applications/${index}/box`\r\n   */\n  path() {\n    return `/v2/applications/${this.index}/box`;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  prepare(body) {\n    return Box.from_obj_for_encoding(body);\n  }\n}","map":{"version":3,"names":["Buffer","JSONRequest","Box","GetApplicationBoxByName","constructor","c","intDecoding","index","name","encodedName","from","toString","query","encodeURI","path","prepare","body","from_obj_for_encoding"],"sources":["C:\\Users\\Aditya singh\\AlgoEase\\frontend\\node_modules\\algosdk\\src\\client\\v2\\algod\\getApplicationBoxByName.ts"],"sourcesContent":["import { Buffer } from 'buffer';\r\nimport JSONRequest from '../jsonrequest';\r\nimport HTTPClient from '../../client';\r\nimport IntDecoding from '../../../types/intDecoding';\r\nimport { Box } from './models/types';\r\n\r\n/**\r\n * Given an application ID and the box name (key), return the value stored in the box.\r\n *\r\n * #### Example\r\n * ```typescript\r\n * const index = 60553466;\r\n * const boxName = Buffer.from(\"foo\");\r\n * const boxResponse = await algodClient.getApplicationBoxByName(index, boxName).do();\r\n * const boxValue = boxResponse.value;\r\n * ```\r\n *\r\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/algod/#get-v2applicationsapplication-idbox)\r\n * @param index - The application ID to look up.\r\n * @category GET\r\n */\r\nexport default class GetApplicationBoxByName extends JSONRequest<\r\n  Box,\r\n  Record<string, any>\r\n> {\r\n  constructor(\r\n    c: HTTPClient,\r\n    intDecoding: IntDecoding,\r\n    private index: number,\r\n    name: Uint8Array\r\n  ) {\r\n    super(c, intDecoding);\r\n    this.index = index;\r\n    // Encode name in base64 format and append the encoding prefix.\r\n    const encodedName = Buffer.from(name).toString('base64');\r\n    this.query.name = encodeURI(`b64:${encodedName}`);\r\n  }\r\n\r\n  /**\r\n   * @returns `/v2/applications/${index}/box`\r\n   */\r\n  path() {\r\n    return `/v2/applications/${this.index}/box`;\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  prepare(body: Record<string, any>): Box {\r\n    return Box.from_obj_for_encoding(body);\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,WAAW,MAAM,gBAAgB;AAGxC,SAASC,GAAG,QAAQ,gBAAgB;AAEpC;;;;;;;;;;;;;;;AAeA,eAAc,MAAOC,uBAAwB,SAAQF,WAGpD;EACCG,YACEC,CAAa,EACbC,WAAwB,EAChBC,KAAa,EACrBC,IAAgB;IAEhB,KAAK,CAACH,CAAC,EAAEC,WAAW,CAAC;IAHb,KAAAC,KAAK,GAALA,KAAK;IAIb,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB;IACA,MAAME,WAAW,GAAGT,MAAM,CAACU,IAAI,CAACF,IAAI,CAAC,CAACG,QAAQ,CAAC,QAAQ,CAAC;IACxD,IAAI,CAACC,KAAK,CAACJ,IAAI,GAAGK,SAAS,CAAC,OAAOJ,WAAW,EAAE,CAAC;EACnD;EAEA;;;EAGAK,IAAIA,CAAA;IACF,OAAO,oBAAoB,IAAI,CAACP,KAAK,MAAM;EAC7C;EAEA;EACAQ,OAAOA,CAACC,IAAyB;IAC/B,OAAOd,GAAG,CAACe,qBAAqB,CAACD,IAAI,CAAC;EACxC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import JSONRequest from '../jsonrequest';\n/**\r\n * Returns information about indexed assets.\r\n *\r\n * #### Example\r\n * ```typescript\r\n * const assets = await indexerClient.searchForAssets().do();\r\n * ```\r\n *\r\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assets)\r\n * @category GET\r\n */\nexport default class SearchForAssets extends JSONRequest {\n  /**\r\n   * @returns `/v2/assets`\r\n   */\n  // eslint-disable-next-line class-methods-use-this\n  path() {\n    return '/v2/assets';\n  }\n  /**\r\n   * Limit results for pagination.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxResults = 20;\r\n   * const assets = await indexerClient\r\n   *        .searchForAssets()\r\n   *        .limit(maxResults)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param limit - maximum number of results to return.\r\n   * @category query\r\n   */\n  limit(limit) {\n    this.query.limit = limit;\n    return this;\n  }\n  /**\r\n   * Filter just assets with the given creator address.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const assets = await indexerClient\r\n   *        .searchForAssets()\r\n   *        .creator(address)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param creator\r\n   * @category query\r\n   */\n  creator(creator) {\n    this.query.creator = creator;\n    return this;\n  }\n  /**\r\n   * Filter just assets with the given name.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const name = \"Test Token\";\r\n   * const assets = await indexerClient\r\n   *        .searchForAssets()\r\n   *        .name(name)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param name\r\n   * @category query\r\n   */\n  name(name) {\n    this.query.name = name;\n    return this;\n  }\n  /**\r\n   * Filter just assets with the given unit.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const unit = \"test\";\r\n   * const assets = await indexerClient\r\n   *        .searchForAssets()\r\n   *        .unit(unit)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param unit\r\n   * @category query\r\n   */\n  unit(unit) {\n    this.query.unit = unit;\n    return this;\n  }\n  /**\r\n   * Asset ID for filter, as int.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const assetId = 163650;\r\n   * const assets = await indexerClient\r\n   *        .searchForAssets()\r\n   *        .index(assetId)\r\n   *        .do();\r\n   * ```\r\n   * @remarks Alternatively, use `indexerClient.lookupAssetByID(assetId).do();`\r\n   * @param index\r\n   * @category query\r\n   */\n  index(index) {\n    this.query['asset-id'] = index;\n    return this;\n  }\n  /**\r\n   * Specify the next page of results.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxResults = 20;\r\n   *\r\n   * const assetsPage1 = await indexerClient\r\n   *        .searchForAssets()\r\n   *        .limit(maxResults)\r\n   *        .do();\r\n   *\r\n   * const assetsPage2 = await indexerClient\r\n   *        .searchForAssets()\r\n   *        .limit(maxResults)\r\n   *        .nextToken(assetsPage1[\"next-token\"])\r\n   *        .do();\r\n   * ```\r\n   * @param nextToken - provided by the previous results.\r\n   * @category query\r\n   */\n  nextToken(nextToken) {\n    this.query.next = nextToken;\n    return this;\n  }\n  /**\r\n   * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\r\n   *\r\n   * #### Example 1\r\n   * ```typescript\r\n   * const assets = await indexerClient\r\n   *        .searchForAssets()\r\n   *        .includeAll(false)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * #### Example 2\r\n   * ```typescript\r\n   * const assets = await indexerClient\r\n   *        .searchForAssets()\r\n   *        .includeAll()\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param value - default true when called without passing a value\r\n   * @category query\r\n   */\n  includeAll(value = true) {\n    this.query['include-all'] = value;\n    return this;\n  }\n}","map":{"version":3,"names":["JSONRequest","SearchForAssets","path","limit","query","creator","name","unit","index","nextToken","next","includeAll","value"],"sources":["C:\\Users\\Aditya singh\\AlgoEase\\frontend\\node_modules\\algosdk\\src\\client\\v2\\indexer\\searchForAssets.ts"],"sourcesContent":["import JSONRequest from '../jsonrequest';\r\n\r\n/**\r\n * Returns information about indexed assets.\r\n *\r\n * #### Example\r\n * ```typescript\r\n * const assets = await indexerClient.searchForAssets().do();\r\n * ```\r\n *\r\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2assets)\r\n * @category GET\r\n */\r\nexport default class SearchForAssets extends JSONRequest {\r\n  /**\r\n   * @returns `/v2/assets`\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  path() {\r\n    return '/v2/assets';\r\n  }\r\n\r\n  /**\r\n   * Limit results for pagination.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxResults = 20;\r\n   * const assets = await indexerClient\r\n   *        .searchForAssets()\r\n   *        .limit(maxResults)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param limit - maximum number of results to return.\r\n   * @category query\r\n   */\r\n  limit(limit: number) {\r\n    this.query.limit = limit;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Filter just assets with the given creator address.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const assets = await indexerClient\r\n   *        .searchForAssets()\r\n   *        .creator(address)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param creator\r\n   * @category query\r\n   */\r\n  creator(creator: string) {\r\n    this.query.creator = creator;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Filter just assets with the given name.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const name = \"Test Token\";\r\n   * const assets = await indexerClient\r\n   *        .searchForAssets()\r\n   *        .name(name)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param name\r\n   * @category query\r\n   */\r\n  name(name: string) {\r\n    this.query.name = name;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Filter just assets with the given unit.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const unit = \"test\";\r\n   * const assets = await indexerClient\r\n   *        .searchForAssets()\r\n   *        .unit(unit)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param unit\r\n   * @category query\r\n   */\r\n  unit(unit: string) {\r\n    this.query.unit = unit;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Asset ID for filter, as int.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const assetId = 163650;\r\n   * const assets = await indexerClient\r\n   *        .searchForAssets()\r\n   *        .index(assetId)\r\n   *        .do();\r\n   * ```\r\n   * @remarks Alternatively, use `indexerClient.lookupAssetByID(assetId).do();`\r\n   * @param index\r\n   * @category query\r\n   */\r\n  index(index: number) {\r\n    this.query['asset-id'] = index;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Specify the next page of results.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxResults = 20;\r\n   *\r\n   * const assetsPage1 = await indexerClient\r\n   *        .searchForAssets()\r\n   *        .limit(maxResults)\r\n   *        .do();\r\n   *\r\n   * const assetsPage2 = await indexerClient\r\n   *        .searchForAssets()\r\n   *        .limit(maxResults)\r\n   *        .nextToken(assetsPage1[\"next-token\"])\r\n   *        .do();\r\n   * ```\r\n   * @param nextToken - provided by the previous results.\r\n   * @category query\r\n   */\r\n  nextToken(nextToken: string) {\r\n    this.query.next = nextToken;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\r\n   *\r\n   * #### Example 1\r\n   * ```typescript\r\n   * const assets = await indexerClient\r\n   *        .searchForAssets()\r\n   *        .includeAll(false)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * #### Example 2\r\n   * ```typescript\r\n   * const assets = await indexerClient\r\n   *        .searchForAssets()\r\n   *        .includeAll()\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param value - default true when called without passing a value\r\n   * @category query\r\n   */\r\n  includeAll(value = true) {\r\n    this.query['include-all'] = value;\r\n    return this;\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,gBAAgB;AAExC;;;;;;;;;;;AAWA,eAAc,MAAOC,eAAgB,SAAQD,WAAW;EACtD;;;EAGA;EACAE,IAAIA,CAAA;IACF,OAAO,YAAY;EACrB;EAEA;;;;;;;;;;;;;;;EAeAC,KAAKA,CAACA,KAAa;IACjB,IAAI,CAACC,KAAK,CAACD,KAAK,GAAGA,KAAK;IACxB,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;EAeAE,OAAOA,CAACA,OAAe;IACrB,IAAI,CAACD,KAAK,CAACC,OAAO,GAAGA,OAAO;IAC5B,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;EAeAC,IAAIA,CAACA,IAAY;IACf,IAAI,CAACF,KAAK,CAACE,IAAI,GAAGA,IAAI;IACtB,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;EAeAC,IAAIA,CAACA,IAAY;IACf,IAAI,CAACH,KAAK,CAACG,IAAI,GAAGA,IAAI;IACtB,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;EAeAC,KAAKA,CAACA,KAAa;IACjB,IAAI,CAACJ,KAAK,CAAC,UAAU,CAAC,GAAGI,KAAK;IAC9B,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;;;;;;;EAqBAC,SAASA,CAACA,SAAiB;IACzB,IAAI,CAACL,KAAK,CAACM,IAAI,GAAGD,SAAS;IAC3B,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;;;;;;;;EAsBAE,UAAUA,CAACC,KAAK,GAAG,IAAI;IACrB,IAAI,CAACR,KAAK,CAAC,aAAa,CAAC,GAAGQ,KAAK;IACjC,OAAO,IAAI;EACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { Buffer } from 'buffer';\nimport base32 from 'hi-base32';\nimport * as address from './encoding/address';\nimport * as encoding from './encoding/encoding';\nimport * as nacl from './nacl/naclWrappers';\nimport * as utils from './utils/utils';\nimport { translateBoxReferences } from './boxStorage';\nimport { TransactionType, isTransactionType } from './types/transactions/base';\nconst ALGORAND_TRANSACTION_LENGTH = 52;\nexport const ALGORAND_MIN_TX_FEE = 1000; // version v5\nconst ALGORAND_TRANSACTION_LEASE_LENGTH = 32;\nconst ALGORAND_MAX_ASSET_DECIMALS = 19;\nconst NUM_ADDL_BYTES_AFTER_SIGNING = 75; // NUM_ADDL_BYTES_AFTER_SIGNING is the number of bytes added to a txn after signing it\nconst ALGORAND_TRANSACTION_LEASE_LABEL_LENGTH = 5;\nconst ALGORAND_TRANSACTION_ADDRESS_LENGTH = 32;\nconst ALGORAND_TRANSACTION_REKEY_LABEL_LENGTH = 5;\nconst ASSET_METADATA_HASH_LENGTH = 32;\nconst KEYREG_VOTE_KEY_LENGTH = 32;\nconst KEYREG_SELECTION_KEY_LENGTH = 32;\nconst KEYREG_STATE_PROOF_KEY_LENGTH = 64;\n/**\r\n * Object representing a heartbeat proof\r\n */\nclass HeartbeatProof {\n  constructor(sig, pk, pk2, p1s, p2s) {\n    this.s = sig;\n    this.p = pk;\n    this.p2 = pk2;\n    this.p1s = p1s;\n    this.p2s = p2s;\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(encHbFields) {\n    const proof = Object.create(this.prototype);\n    proof.s = encHbFields.s;\n    proof.p = encHbFields.p;\n    proof.p2 = encHbFields.p2;\n    proof.p1s = encHbFields.p1s;\n    proof.p2s = encHbFields.p2s;\n    return proof;\n  }\n  // eslint-disable-next-line camelcase\n  get_obj_for_encoding() {\n    const fields = {\n      s: this.s,\n      p: this.p,\n      p2: this.p2,\n      p1s: this.p1s,\n      p2s: this.p2s\n    };\n    return fields;\n  }\n}\n/**\r\n * Object representing a heartbeat transaction\r\n */\nclass HeartbeatFields {\n  constructor(addr, proof, seed, voteID, kd) {\n    this.a = addr;\n    this.prf = HeartbeatProof.from_obj_for_encoding(proof);\n    this.sd = seed;\n    this.vid = voteID;\n    this.kd = kd;\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(encHbFields) {\n    const fields = Object.create(this.prototype);\n    fields.a = address.decodeAddress(address.encodeAddress(encHbFields.a));\n    fields.prf = HeartbeatProof.from_obj_for_encoding(encHbFields.prf);\n    fields.sd = Buffer.from(encHbFields.sd);\n    fields.vid = Buffer.from(encHbFields.vid);\n    fields.kd = encHbFields.kd;\n    return fields;\n  }\n  // eslint-disable-next-line camelcase\n  get_obj_for_encoding() {\n    const fields = {\n      a: Buffer.from(this.a.publicKey),\n      prf: this.prf.get_obj_for_encoding(),\n      sd: this.sd,\n      vid: this.vid,\n      kd: this.kd\n    };\n    return fields;\n  }\n}\nfunction getKeyregKey(input, inputName, length) {\n  if (input == null) {\n    return undefined;\n  }\n  let inputAsBuffer;\n  if (typeof input === 'string') {\n    inputAsBuffer = Buffer.from(input, 'base64');\n  } else if (input.constructor === Uint8Array) {\n    inputAsBuffer = Buffer.from(input);\n  } else if (Buffer.isBuffer(input)) {\n    inputAsBuffer = input;\n  }\n  if (inputAsBuffer == null || inputAsBuffer.byteLength !== length) {\n    throw Error(`${inputName} must be a ${length} byte Uint8Array or Buffer or base64 string.`);\n  }\n  return inputAsBuffer;\n}\n/**\r\n * Transaction enables construction of Algorand transactions\r\n * */\nexport class Transaction {\n  constructor({\n    ...transaction\n  }) {\n    this.name = 'Transaction';\n    this.tag = Buffer.from('TX');\n    // Populate defaults\n    /* eslint-disable no-param-reassign */\n    const defaults = {\n      type: TransactionType.pay,\n      flatFee: false,\n      nonParticipation: false\n    };\n    // Default type\n    if (typeof transaction.type === 'undefined') {\n      transaction.type = defaults.type;\n    }\n    // Default flatFee\n    if (typeof transaction.flatFee === 'undefined') {\n      transaction.flatFee = defaults.flatFee;\n    }\n    // Default nonParticipation\n    if (transaction.type === TransactionType.keyreg && typeof transaction.voteKey !== 'undefined' && typeof transaction.nonParticipation === 'undefined') {\n      transaction.nonParticipation = defaults.nonParticipation;\n    }\n    /* eslint-enable no-param-reassign */\n    // Move suggested parameters from its object to inline\n    if (transaction.suggestedParams !== undefined) {\n      // Create a temporary reference to the transaction object that has params inline and also as a suggested params object\n      //   - Helpful for moving params from named object to inline\n      const reference = transaction;\n      reference.genesisHash = reference.suggestedParams.genesisHash;\n      reference.fee = reference.suggestedParams.fee;\n      if (reference.suggestedParams.flatFee !== undefined) reference.flatFee = reference.suggestedParams.flatFee;\n      reference.firstRound = reference.suggestedParams.firstRound;\n      reference.lastRound = reference.suggestedParams.lastRound;\n      reference.genesisID = reference.suggestedParams.genesisID;\n    }\n    // At this point all suggestedParams have been moved to be inline, so we can reassign the transaction object type\n    // to one which is more useful as we prepare properties for storing\n    const txn = transaction;\n    txn.from = address.decodeAddress(txn.from);\n    if (txn.to !== undefined) txn.to = address.decodeAddress(txn.to);\n    if (txn.closeRemainderTo !== undefined) txn.closeRemainderTo = address.decodeAddress(txn.closeRemainderTo);\n    if (txn.assetManager !== undefined) txn.assetManager = address.decodeAddress(txn.assetManager);\n    if (txn.assetReserve !== undefined) txn.assetReserve = address.decodeAddress(txn.assetReserve);\n    if (txn.assetFreeze !== undefined) txn.assetFreeze = address.decodeAddress(txn.assetFreeze);\n    if (txn.assetClawback !== undefined) txn.assetClawback = address.decodeAddress(txn.assetClawback);\n    if (txn.assetRevocationTarget !== undefined) txn.assetRevocationTarget = address.decodeAddress(txn.assetRevocationTarget);\n    if (txn.freezeAccount !== undefined) txn.freezeAccount = address.decodeAddress(txn.freezeAccount);\n    if (txn.reKeyTo !== undefined) txn.reKeyTo = address.decodeAddress(txn.reKeyTo);\n    if (txn.genesisHash === undefined) throw Error('genesis hash must be specified and in a base64 string.');\n    txn.genesisHash = Buffer.from(txn.genesisHash, 'base64');\n    if (txn.amount !== undefined && (!(Number.isSafeInteger(txn.amount) || typeof txn.amount === 'bigint' && txn.amount <= BigInt('0xffffffffffffffff')) || txn.amount < 0)) throw Error('Amount must be a positive number and smaller than 2^64-1. If the number is larger than 2^53-1, use bigint.');\n    if (!Number.isSafeInteger(txn.fee) || txn.fee < 0) throw Error('fee must be a positive number and smaller than 2^53-1');\n    if (!Number.isSafeInteger(txn.firstRound) || txn.firstRound < 0) throw Error('firstRound must be a positive number');\n    if (!Number.isSafeInteger(txn.lastRound) || txn.lastRound < 0) throw Error('lastRound must be a positive number');\n    if (txn.extraPages !== undefined && (!Number.isInteger(txn.extraPages) || txn.extraPages < 0 || txn.extraPages > 3)) throw Error('extraPages must be an Integer between and including 0 to 3');\n    if (txn.assetTotal !== undefined && (!(Number.isSafeInteger(txn.assetTotal) || typeof txn.assetTotal === 'bigint' && txn.assetTotal <= BigInt('0xffffffffffffffff')) || txn.assetTotal < 0)) throw Error('Total asset issuance must be a positive number and smaller than 2^64-1. If the number is larger than 2^53-1, use bigint.');\n    if (txn.assetDecimals !== undefined && (!Number.isSafeInteger(txn.assetDecimals) || txn.assetDecimals < 0 || txn.assetDecimals > ALGORAND_MAX_ASSET_DECIMALS)) throw Error(`assetDecimals must be a positive number and smaller than ${ALGORAND_MAX_ASSET_DECIMALS.toString()}`);\n    if (txn.assetIndex !== undefined && (!Number.isSafeInteger(txn.assetIndex) || txn.assetIndex < 0)) throw Error('Asset index must be a positive number and smaller than 2^53-1');\n    if (txn.appIndex !== undefined && (!Number.isSafeInteger(txn.appIndex) || txn.appIndex < 0)) throw Error('Application index must be a positive number and smaller than 2^53-1');\n    if (txn.appLocalInts !== undefined && (!Number.isSafeInteger(txn.appLocalInts) || txn.appLocalInts < 0)) throw Error('Application local ints count must be a positive number and smaller than 2^53-1');\n    if (txn.appLocalByteSlices !== undefined && (!Number.isSafeInteger(txn.appLocalByteSlices) || txn.appLocalByteSlices < 0)) throw Error('Application local byte slices count must be a positive number and smaller than 2^53-1');\n    if (txn.appGlobalInts !== undefined && (!Number.isSafeInteger(txn.appGlobalInts) || txn.appGlobalInts < 0)) throw Error('Application global ints count must be a positive number and smaller than 2^53-1');\n    if (txn.appGlobalByteSlices !== undefined && (!Number.isSafeInteger(txn.appGlobalByteSlices) || txn.appGlobalByteSlices < 0)) throw Error('Application global byte slices count must be a positive number and smaller than 2^53-1');\n    if (txn.appApprovalProgram !== undefined) {\n      if (txn.appApprovalProgram.constructor !== Uint8Array) throw Error('appApprovalProgram must be a Uint8Array.');\n    }\n    if (txn.appClearProgram !== undefined) {\n      if (txn.appClearProgram.constructor !== Uint8Array) throw Error('appClearProgram must be a Uint8Array.');\n    }\n    if (txn.appArgs !== undefined) {\n      if (!Array.isArray(txn.appArgs)) throw Error('appArgs must be an Array of Uint8Array.');\n      txn.appArgs = txn.appArgs.slice();\n      txn.appArgs.forEach(arg => {\n        if (arg.constructor !== Uint8Array) throw Error('each element of AppArgs must be a Uint8Array.');\n      });\n    } else {\n      txn.appArgs = [];\n    }\n    if (txn.appAccounts !== undefined) {\n      if (!Array.isArray(txn.appAccounts)) throw Error('appAccounts must be an Array of addresses.');\n      txn.appAccounts = txn.appAccounts.map(addressAsString => address.decodeAddress(addressAsString));\n    }\n    if (txn.appForeignApps !== undefined) {\n      if (!Array.isArray(txn.appForeignApps)) throw Error('appForeignApps must be an Array of integers.');\n      txn.appForeignApps = txn.appForeignApps.slice();\n      txn.appForeignApps.forEach(foreignAppIndex => {\n        if (!Number.isSafeInteger(foreignAppIndex) || foreignAppIndex < 0) throw Error('each foreign application index must be a positive number and smaller than 2^53-1');\n      });\n    }\n    if (txn.appForeignAssets !== undefined) {\n      if (!Array.isArray(txn.appForeignAssets)) throw Error('appForeignAssets must be an Array of integers.');\n      txn.appForeignAssets = txn.appForeignAssets.slice();\n      txn.appForeignAssets.forEach(foreignAssetIndex => {\n        if (!Number.isSafeInteger(foreignAssetIndex) || foreignAssetIndex < 0) throw Error('each foreign asset index must be a positive number and smaller than 2^53-1');\n      });\n    }\n    if (txn.boxes !== undefined) {\n      if (!Array.isArray(txn.boxes)) throw Error('boxes must be an Array of BoxReference.');\n      txn.boxes = txn.boxes.slice();\n      txn.boxes.forEach(box => {\n        if (!Number.isSafeInteger(box.appIndex) || box.name.constructor !== Uint8Array) throw Error('box app index must be a number and name must be an Uint8Array.');\n      });\n    }\n    if (txn.assetMetadataHash !== undefined && txn.assetMetadataHash.length !== 0) {\n      if (typeof txn.assetMetadataHash === 'string') {\n        txn.assetMetadataHash = new Uint8Array(Buffer.from(txn.assetMetadataHash));\n      }\n      if (txn.assetMetadataHash.constructor !== Uint8Array || txn.assetMetadataHash.byteLength !== ASSET_METADATA_HASH_LENGTH) {\n        throw Error(`assetMetadataHash must be a ${ASSET_METADATA_HASH_LENGTH} byte Uint8Array or string.`);\n      }\n      if (txn.assetMetadataHash.every(value => value === 0)) {\n        // if hash contains all 0s, omit it\n        txn.assetMetadataHash = undefined;\n      }\n    } else {\n      txn.assetMetadataHash = undefined;\n    }\n    if (txn.note !== undefined) {\n      if (txn.note.constructor !== Uint8Array) throw Error('note must be a Uint8Array.');\n    } else {\n      txn.note = new Uint8Array(0);\n    }\n    if (txn.lease !== undefined) {\n      if (txn.lease.constructor !== Uint8Array) throw Error('lease must be a Uint8Array.');\n      if (txn.lease.length !== ALGORAND_TRANSACTION_LEASE_LENGTH) throw Error(`lease must be of length ${ALGORAND_TRANSACTION_LEASE_LENGTH.toString()}.`);\n      if (txn.lease.every(value => value === 0)) {\n        // if lease contains all 0s, omit it\n        txn.lease = new Uint8Array(0);\n      }\n    } else {\n      txn.lease = new Uint8Array(0);\n    }\n    txn.voteKey = getKeyregKey(txn.voteKey, 'voteKey', KEYREG_VOTE_KEY_LENGTH);\n    txn.selectionKey = getKeyregKey(txn.selectionKey, 'selectionKey', KEYREG_SELECTION_KEY_LENGTH);\n    txn.stateProofKey = getKeyregKey(txn.stateProofKey, 'stateProofKey', KEYREG_STATE_PROOF_KEY_LENGTH);\n    // Checking non-participation key registration\n    if (txn.nonParticipation && (txn.voteKey || txn.selectionKey || txn.voteFirst || txn.stateProofKey || txn.voteLast || txn.voteKeyDilution)) {\n      throw new Error('nonParticipation is true but participation params are present.');\n    }\n    // Checking online key registration\n    if (!txn.nonParticipation && (txn.voteKey || txn.selectionKey || txn.stateProofKey || txn.voteFirst || txn.voteLast || txn.voteKeyDilution) && !(txn.voteKey && txn.selectionKey && txn.voteFirst && txn.voteLast && txn.voteKeyDilution)\n    // stateProofKey not included here for backwards compatibility\n    ) {\n      throw new Error('online key registration missing at least one of the following fields: ' + 'voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution');\n    }\n    // The last option is an offline key registration where all the fields\n    // nonParticipation, voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution\n    // are all undefined/false\n    // Remove unwanted properties and store transaction on instance\n    delete txn.suggestedParams;\n    Object.assign(this, utils.removeUndefinedProperties(txn));\n    // Modify Fee\n    if (!txn.flatFee) {\n      this.fee *= this.estimateSize();\n      // If suggested fee too small and will be rejected, set to min tx fee\n      if (this.fee < ALGORAND_MIN_TX_FEE) {\n        this.fee = ALGORAND_MIN_TX_FEE;\n      }\n    }\n    // say we are aware of groups\n    this.group = undefined;\n    // stpf fields\n    if (txn.stateProofType !== undefined && (!Number.isSafeInteger(txn.stateProofType) || txn.stateProofType < 0)) throw Error('State Proof type must be a positive number and smaller than 2^53-1');\n    if (txn.stateProofMessage !== undefined) {\n      if (txn.stateProofMessage.constructor !== Uint8Array) throw Error('stateProofMessage must be a Uint8Array.');\n    } else {\n      txn.stateProofMessage = new Uint8Array(0);\n    }\n    if (txn.stateProof !== undefined) {\n      if (txn.stateProof.constructor !== Uint8Array) throw Error('stateProof must be a Uint8Array.');\n    } else {\n      txn.stateProof = new Uint8Array(0);\n    }\n    if (txn.heartbeatFields !== undefined) {\n      if (txn.heartbeatFields.constructor !== HeartbeatFields) throw Error('heartbeatFields must be a HeartbeatFields.');\n    }\n  }\n  // eslint-disable-next-line camelcase\n  get_obj_for_encoding() {\n    if (this.type === 'pay') {\n      const txn = {\n        amt: this.amount,\n        fee: this.fee,\n        fv: this.firstRound,\n        lv: this.lastRound,\n        note: Buffer.from(this.note),\n        snd: Buffer.from(this.from.publicKey),\n        type: 'pay',\n        gen: this.genesisID,\n        gh: this.genesisHash,\n        lx: Buffer.from(this.lease),\n        grp: this.group\n      };\n      // parse close address\n      if (this.closeRemainderTo !== undefined && address.encodeAddress(this.closeRemainderTo.publicKey) !== address.ALGORAND_ZERO_ADDRESS_STRING) {\n        txn.close = Buffer.from(this.closeRemainderTo.publicKey);\n      }\n      if (this.reKeyTo !== undefined) {\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n      }\n      // allowed zero values\n      if (this.to !== undefined) txn.rcv = Buffer.from(this.to.publicKey);\n      if (!txn.note.length) delete txn.note;\n      if (!txn.amt) delete txn.amt;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.fv) delete txn.fv;\n      if (!txn.gen) delete txn.gen;\n      if (txn.grp === undefined) delete txn.grp;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.rekey) delete txn.rekey;\n      return txn;\n    }\n    if (this.type === 'keyreg') {\n      const txn = {\n        fee: this.fee,\n        fv: this.firstRound,\n        lv: this.lastRound,\n        note: Buffer.from(this.note),\n        snd: Buffer.from(this.from.publicKey),\n        type: this.type,\n        gen: this.genesisID,\n        gh: this.genesisHash,\n        lx: Buffer.from(this.lease),\n        grp: this.group,\n        votekey: this.voteKey,\n        selkey: this.selectionKey,\n        sprfkey: this.stateProofKey,\n        votefst: this.voteFirst,\n        votelst: this.voteLast,\n        votekd: this.voteKeyDilution\n      };\n      // allowed zero values\n      if (!txn.note.length) delete txn.note;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.fv) delete txn.fv;\n      if (!txn.gen) delete txn.gen;\n      if (txn.grp === undefined) delete txn.grp;\n      if (this.reKeyTo !== undefined) {\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n      }\n      if (this.nonParticipation) {\n        txn.nonpart = true;\n      }\n      if (!txn.selkey) delete txn.selkey;\n      if (!txn.votekey) delete txn.votekey;\n      if (!txn.sprfkey) delete txn.sprfkey;\n      if (!txn.votefst) delete txn.votefst;\n      if (!txn.votelst) delete txn.votelst;\n      if (!txn.votekd) delete txn.votekd;\n      return txn;\n    }\n    if (this.type === 'acfg') {\n      // asset creation, or asset reconfigure, or asset destruction\n      const txn = {\n        fee: this.fee,\n        fv: this.firstRound,\n        lv: this.lastRound,\n        note: Buffer.from(this.note),\n        snd: Buffer.from(this.from.publicKey),\n        type: this.type,\n        gen: this.genesisID,\n        gh: this.genesisHash,\n        lx: Buffer.from(this.lease),\n        grp: this.group,\n        caid: this.assetIndex,\n        apar: {\n          t: this.assetTotal,\n          df: this.assetDefaultFrozen,\n          dc: this.assetDecimals\n        }\n      };\n      if (this.assetManager !== undefined) txn.apar.m = Buffer.from(this.assetManager.publicKey);\n      if (this.assetReserve !== undefined) txn.apar.r = Buffer.from(this.assetReserve.publicKey);\n      if (this.assetFreeze !== undefined) txn.apar.f = Buffer.from(this.assetFreeze.publicKey);\n      if (this.assetClawback !== undefined) txn.apar.c = Buffer.from(this.assetClawback.publicKey);\n      if (this.assetName !== undefined) txn.apar.an = this.assetName;\n      if (this.assetUnitName !== undefined) txn.apar.un = this.assetUnitName;\n      if (this.assetURL !== undefined) txn.apar.au = this.assetURL;\n      if (this.assetMetadataHash !== undefined) txn.apar.am = Buffer.from(this.assetMetadataHash);\n      // allowed zero values\n      if (!txn.note.length) delete txn.note;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.amt) delete txn.amt;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.fv) delete txn.fv;\n      if (!txn.gen) delete txn.gen;\n      if (this.reKeyTo !== undefined) {\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n      }\n      if (!txn.caid) delete txn.caid;\n      if (!txn.apar.t && !txn.apar.un && !txn.apar.an && !txn.apar.df && !txn.apar.m && !txn.apar.r && !txn.apar.f && !txn.apar.c && !txn.apar.au && !txn.apar.am && !txn.apar.dc) {\n        delete txn.apar;\n      } else {\n        if (!txn.apar.t) delete txn.apar.t;\n        if (!txn.apar.dc) delete txn.apar.dc;\n        if (!txn.apar.un) delete txn.apar.un;\n        if (!txn.apar.an) delete txn.apar.an;\n        if (!txn.apar.df) delete txn.apar.df;\n        if (!txn.apar.m) delete txn.apar.m;\n        if (!txn.apar.r) delete txn.apar.r;\n        if (!txn.apar.f) delete txn.apar.f;\n        if (!txn.apar.c) delete txn.apar.c;\n        if (!txn.apar.au) delete txn.apar.au;\n        if (!txn.apar.am) delete txn.apar.am;\n      }\n      if (txn.grp === undefined) delete txn.grp;\n      return txn;\n    }\n    if (this.type === 'axfer') {\n      // asset transfer, acceptance, revocation, mint, or burn\n      const txn = {\n        aamt: this.amount,\n        fee: this.fee,\n        fv: this.firstRound,\n        lv: this.lastRound,\n        note: Buffer.from(this.note),\n        snd: Buffer.from(this.from.publicKey),\n        arcv: Buffer.from(this.to.publicKey),\n        type: this.type,\n        gen: this.genesisID,\n        gh: this.genesisHash,\n        lx: Buffer.from(this.lease),\n        grp: this.group,\n        xaid: this.assetIndex\n      };\n      if (this.closeRemainderTo !== undefined) txn.aclose = Buffer.from(this.closeRemainderTo.publicKey);\n      if (this.assetRevocationTarget !== undefined) txn.asnd = Buffer.from(this.assetRevocationTarget.publicKey);\n      // allowed zero values\n      if (!txn.note.length) delete txn.note;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.aamt) delete txn.aamt;\n      if (!txn.amt) delete txn.amt;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.fv) delete txn.fv;\n      if (!txn.gen) delete txn.gen;\n      if (txn.grp === undefined) delete txn.grp;\n      if (!txn.aclose) delete txn.aclose;\n      if (!txn.asnd) delete txn.asnd;\n      if (!txn.rekey) delete txn.rekey;\n      if (this.reKeyTo !== undefined) {\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n      }\n      return txn;\n    }\n    if (this.type === 'afrz') {\n      // asset freeze or unfreeze\n      const txn = {\n        fee: this.fee,\n        fv: this.firstRound,\n        lv: this.lastRound,\n        note: Buffer.from(this.note),\n        snd: Buffer.from(this.from.publicKey),\n        type: this.type,\n        gen: this.genesisID,\n        gh: this.genesisHash,\n        lx: Buffer.from(this.lease),\n        grp: this.group,\n        faid: this.assetIndex,\n        afrz: this.freezeState\n      };\n      if (this.freezeAccount !== undefined) txn.fadd = Buffer.from(this.freezeAccount.publicKey);\n      // allowed zero values\n      if (!txn.note.length) delete txn.note;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.amt) delete txn.amt;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.fv) delete txn.fv;\n      if (!txn.gen) delete txn.gen;\n      if (!txn.afrz) delete txn.afrz;\n      if (txn.grp === undefined) delete txn.grp;\n      if (this.reKeyTo !== undefined) {\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n      }\n      return txn;\n    }\n    if (this.type === 'appl') {\n      // application call of some kind\n      const txn = {\n        fee: this.fee,\n        fv: this.firstRound,\n        lv: this.lastRound,\n        note: Buffer.from(this.note),\n        snd: Buffer.from(this.from.publicKey),\n        type: this.type,\n        gen: this.genesisID,\n        gh: this.genesisHash,\n        lx: Buffer.from(this.lease),\n        grp: this.group,\n        apid: this.appIndex,\n        apan: this.appOnComplete,\n        apls: {\n          nui: this.appLocalInts,\n          nbs: this.appLocalByteSlices\n        },\n        apgs: {\n          nui: this.appGlobalInts,\n          nbs: this.appGlobalByteSlices\n        },\n        apfa: this.appForeignApps,\n        apas: this.appForeignAssets,\n        apep: this.extraPages,\n        apbx: translateBoxReferences(this.boxes, this.appForeignApps, this.appIndex)\n      };\n      if (this.reKeyTo !== undefined) {\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n      }\n      if (this.appApprovalProgram !== undefined) {\n        txn.apap = Buffer.from(this.appApprovalProgram);\n      }\n      if (this.appClearProgram !== undefined) {\n        txn.apsu = Buffer.from(this.appClearProgram);\n      }\n      if (this.appArgs !== undefined) {\n        txn.apaa = this.appArgs.map(arg => Buffer.from(arg));\n      }\n      if (this.appAccounts !== undefined) {\n        txn.apat = this.appAccounts.map(decodedAddress => Buffer.from(decodedAddress.publicKey));\n      }\n      // allowed zero values\n      if (!txn.note.length) delete txn.note;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.amt) delete txn.amt;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.fv) delete txn.fv;\n      if (!txn.gen) delete txn.gen;\n      if (!txn.apid) delete txn.apid;\n      if (!txn.apls.nui) delete txn.apls.nui;\n      if (!txn.apls.nbs) delete txn.apls.nbs;\n      if (!txn.apls.nui && !txn.apls.nbs) delete txn.apls;\n      if (!txn.apgs.nui) delete txn.apgs.nui;\n      if (!txn.apgs.nbs) delete txn.apgs.nbs;\n      if (!txn.apaa || !txn.apaa.length) delete txn.apaa;\n      if (!txn.apgs.nui && !txn.apgs.nbs) delete txn.apgs;\n      if (!txn.apap) delete txn.apap;\n      if (!txn.apsu) delete txn.apsu;\n      if (!txn.apan) delete txn.apan;\n      if (!txn.apfa || !txn.apfa.length) delete txn.apfa;\n      if (!txn.apas || !txn.apas.length) delete txn.apas;\n      for (const box of txn.apbx) {\n        if (!box.i) delete box.i;\n        if (!box.n || !box.n.length) delete box.n;\n      }\n      if (!txn.apbx || !txn.apbx.length) delete txn.apbx;\n      if (!txn.apat || !txn.apat.length) delete txn.apat;\n      if (!txn.apep) delete txn.apep;\n      if (txn.grp === undefined) delete txn.grp;\n      return txn;\n    }\n    if (this.type === 'stpf') {\n      // state proof txn\n      const txn = {\n        fee: this.fee,\n        fv: this.firstRound,\n        lv: this.lastRound,\n        note: Buffer.from(this.note),\n        snd: Buffer.from(this.from.publicKey),\n        type: this.type,\n        gen: this.genesisID,\n        gh: this.genesisHash,\n        lx: Buffer.from(this.lease),\n        sptype: this.stateProofType,\n        spmsg: Buffer.from(this.stateProofMessage),\n        sp: Buffer.from(this.stateProof)\n      };\n      // allowed zero values\n      if (!txn.sptype) delete txn.sptype;\n      if (!txn.note.length) delete txn.note;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.amt) delete txn.amt;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.fv) delete txn.fv;\n      if (!txn.gen) delete txn.gen;\n      if (!txn.apid) delete txn.apid;\n      if (!txn.apaa || !txn.apaa.length) delete txn.apaa;\n      if (!txn.apap) delete txn.apap;\n      if (!txn.apsu) delete txn.apsu;\n      if (!txn.apan) delete txn.apan;\n      if (!txn.apfa || !txn.apfa.length) delete txn.apfa;\n      if (!txn.apas || !txn.apas.length) delete txn.apas;\n      if (!txn.apat || !txn.apat.length) delete txn.apat;\n      if (!txn.apep) delete txn.apep;\n      if (txn.grp === undefined) delete txn.grp;\n      return txn;\n    }\n    if (this.type === 'hb') {\n      // heartbeat txn\n      const txn = {\n        fee: this.fee,\n        fv: this.firstRound,\n        lv: this.lastRound,\n        note: Buffer.from(this.note),\n        snd: Buffer.from(this.from.publicKey),\n        type: this.type,\n        gen: this.genesisID,\n        gh: this.genesisHash,\n        lx: Buffer.from(this.lease),\n        hb: this.heartbeatFields.get_obj_for_encoding()\n      };\n      // allowed zero values\n      if (!txn.note.length) delete txn.note;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.gen) delete txn.gen;\n      if (txn.grp === undefined) delete txn.grp;\n      return txn;\n    }\n    return undefined;\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(txnForEnc) {\n    const txn = Object.create(this.prototype);\n    txn.name = 'Transaction';\n    txn.tag = Buffer.from('TX');\n    txn.genesisID = txnForEnc.gen;\n    txn.genesisHash = Buffer.from(txnForEnc.gh);\n    if (!isTransactionType(txnForEnc.type)) {\n      throw new Error(`Unrecognized transaction type: ${txnForEnc.type}`);\n    }\n    txn.type = txnForEnc.type;\n    txn.fee = txnForEnc.fee;\n    txn.firstRound = txnForEnc.fv;\n    txn.lastRound = txnForEnc.lv;\n    txn.note = new Uint8Array(txnForEnc.note);\n    txn.lease = new Uint8Array(txnForEnc.lx);\n    txn.from = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.snd)));\n    if (txnForEnc.grp !== undefined) txn.group = Buffer.from(txnForEnc.grp);\n    if (txnForEnc.rekey !== undefined) txn.reKeyTo = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.rekey)));\n    if (txnForEnc.type === 'pay') {\n      txn.amount = txnForEnc.amt;\n      txn.to = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.rcv)));\n      if (txnForEnc.close !== undefined) txn.closeRemainderTo = address.decodeAddress(address.encodeAddress(txnForEnc.close));\n    } else if (txnForEnc.type === 'keyreg') {\n      if (txnForEnc.votekey !== undefined) {\n        txn.voteKey = Buffer.from(txnForEnc.votekey);\n      }\n      if (txnForEnc.selkey !== undefined) {\n        txn.selectionKey = Buffer.from(txnForEnc.selkey);\n      }\n      if (txnForEnc.sprfkey !== undefined) {\n        txn.stateProofKey = Buffer.from(txnForEnc.sprfkey);\n      }\n      if (txnForEnc.votekd !== undefined) {\n        txn.voteKeyDilution = txnForEnc.votekd;\n      }\n      if (txnForEnc.votefst !== undefined) {\n        txn.voteFirst = txnForEnc.votefst;\n      }\n      if (txnForEnc.votelst !== undefined) {\n        txn.voteLast = txnForEnc.votelst;\n      }\n      if (txnForEnc.nonpart !== undefined) {\n        txn.nonParticipation = txnForEnc.nonpart;\n      }\n    } else if (txnForEnc.type === 'acfg') {\n      // asset creation, or asset reconfigure, or asset destruction\n      if (txnForEnc.caid !== undefined) {\n        txn.assetIndex = txnForEnc.caid;\n      }\n      if (txnForEnc.apar !== undefined) {\n        txn.assetTotal = txnForEnc.apar.t;\n        txn.assetDefaultFrozen = txnForEnc.apar.df;\n        if (txnForEnc.apar.dc !== undefined) txn.assetDecimals = txnForEnc.apar.dc;\n        if (txnForEnc.apar.m !== undefined) txn.assetManager = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.apar.m)));\n        if (txnForEnc.apar.r !== undefined) txn.assetReserve = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.apar.r)));\n        if (txnForEnc.apar.f !== undefined) txn.assetFreeze = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.apar.f)));\n        if (txnForEnc.apar.c !== undefined) txn.assetClawback = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.apar.c)));\n        if (txnForEnc.apar.un !== undefined) txn.assetUnitName = txnForEnc.apar.un;\n        if (txnForEnc.apar.an !== undefined) txn.assetName = txnForEnc.apar.an;\n        if (txnForEnc.apar.au !== undefined) txn.assetURL = txnForEnc.apar.au;\n        if (txnForEnc.apar.am !== undefined) txn.assetMetadataHash = txnForEnc.apar.am;\n      }\n    } else if (txnForEnc.type === 'axfer') {\n      // asset transfer, acceptance, revocation, mint, or burn\n      if (txnForEnc.xaid !== undefined) {\n        txn.assetIndex = txnForEnc.xaid;\n      }\n      if (txnForEnc.aamt !== undefined) txn.amount = txnForEnc.aamt;\n      if (txnForEnc.aclose !== undefined) {\n        txn.closeRemainderTo = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.aclose)));\n      }\n      if (txnForEnc.asnd !== undefined) {\n        txn.assetRevocationTarget = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.asnd)));\n      }\n      txn.to = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.arcv)));\n    } else if (txnForEnc.type === 'afrz') {\n      if (txnForEnc.afrz !== undefined) {\n        txn.freezeState = txnForEnc.afrz;\n      }\n      if (txnForEnc.faid !== undefined) {\n        txn.assetIndex = txnForEnc.faid;\n      }\n      txn.freezeAccount = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.fadd)));\n    } else if (txnForEnc.type === 'appl') {\n      if (txnForEnc.apid !== undefined) {\n        txn.appIndex = txnForEnc.apid;\n      }\n      if (txnForEnc.apan !== undefined) {\n        txn.appOnComplete = txnForEnc.apan;\n      }\n      if (txnForEnc.apls !== undefined) {\n        if (txnForEnc.apls.nui !== undefined) txn.appLocalInts = txnForEnc.apls.nui;\n        if (txnForEnc.apls.nbs !== undefined) txn.appLocalByteSlices = txnForEnc.apls.nbs;\n      }\n      if (txnForEnc.apgs !== undefined) {\n        if (txnForEnc.apgs.nui !== undefined) txn.appGlobalInts = txnForEnc.apgs.nui;\n        if (txnForEnc.apgs.nbs !== undefined) txn.appGlobalByteSlices = txnForEnc.apgs.nbs;\n      }\n      if (txnForEnc.apep !== undefined) {\n        txn.extraPages = txnForEnc.apep;\n      }\n      if (txnForEnc.apap !== undefined) {\n        txn.appApprovalProgram = new Uint8Array(txnForEnc.apap);\n      }\n      if (txnForEnc.apsu !== undefined) {\n        txn.appClearProgram = new Uint8Array(txnForEnc.apsu);\n      }\n      if (txnForEnc.apaa !== undefined) {\n        txn.appArgs = txnForEnc.apaa.map(arg => new Uint8Array(arg));\n      }\n      if (txnForEnc.apat !== undefined) {\n        txn.appAccounts = txnForEnc.apat.map(addressBytes => address.decodeAddress(address.encodeAddress(new Uint8Array(addressBytes))));\n      }\n      if (txnForEnc.apfa !== undefined) {\n        txn.appForeignApps = txnForEnc.apfa;\n      }\n      if (txnForEnc.apas !== undefined) {\n        txn.appForeignAssets = txnForEnc.apas;\n      }\n      if (txnForEnc.apbx !== undefined) {\n        txn.boxes = txnForEnc.apbx.map(box => ({\n          // We return 0 for the app ID so that it's guaranteed translateBoxReferences will\n          // translate the app index back to 0. If we instead returned the called app ID,\n          // translateBoxReferences would translate the app index to a nonzero value if the called\n          // app is also in the foreign app array.\n          appIndex: box.i ? txn.appForeignApps[box.i - 1] : 0,\n          name: box.n\n        }));\n      }\n    } else if (txnForEnc.type === 'stpf') {\n      if (txnForEnc.sptype !== undefined) {\n        txn.stateProofType = txnForEnc.sptype;\n      }\n      if (txnForEnc.sp !== undefined) {\n        txn.stateProof = txnForEnc.sp;\n      }\n      if (txnForEnc.spmsg !== undefined) {\n        txn.stateProofMessage = txnForEnc.spmsg;\n      }\n    } else if (txnForEnc.type === 'hb') {\n      if (txnForEnc.hb !== undefined) {\n        txn.heartbeatFields = HeartbeatFields.from_obj_for_encoding(txnForEnc.hb);\n      }\n    }\n    return txn;\n  }\n  estimateSize() {\n    return this.toByte().length + NUM_ADDL_BYTES_AFTER_SIGNING;\n  }\n  bytesToSign() {\n    const encodedMsg = this.toByte();\n    return Buffer.from(utils.concatArrays(this.tag, encodedMsg));\n  }\n  toByte() {\n    return encoding.encode(this.get_obj_for_encoding());\n  }\n  // returns the raw signature\n  rawSignTxn(sk) {\n    const toBeSigned = this.bytesToSign();\n    const sig = nacl.sign(toBeSigned, sk);\n    return Buffer.from(sig);\n  }\n  signTxn(sk) {\n    // construct signed message\n    const sTxn = {\n      sig: this.rawSignTxn(sk),\n      txn: this.get_obj_for_encoding()\n    };\n    // add AuthAddr if signing with a different key than From indicates\n    const keypair = nacl.keyPairFromSecretKey(sk);\n    const pubKeyFromSk = keypair.publicKey;\n    if (address.encodeAddress(pubKeyFromSk) !== address.encodeAddress(this.from.publicKey)) {\n      sTxn.sgnr = Buffer.from(pubKeyFromSk);\n    }\n    return new Uint8Array(encoding.encode(sTxn));\n  }\n  attachSignature(signerAddr, signature) {\n    if (!nacl.isValidSignatureLength(signature.length)) {\n      throw new Error('Invalid signature length');\n    }\n    const sTxn = {\n      sig: Buffer.from(signature),\n      txn: this.get_obj_for_encoding()\n    };\n    // add AuthAddr if signing with a different key than From indicates\n    if (signerAddr !== address.encodeAddress(this.from.publicKey)) {\n      const signerPublicKey = address.decodeAddress(signerAddr).publicKey;\n      sTxn.sgnr = Buffer.from(signerPublicKey);\n    }\n    return new Uint8Array(encoding.encode(sTxn));\n  }\n  rawTxID() {\n    const enMsg = this.toByte();\n    const gh = Buffer.from(utils.concatArrays(this.tag, enMsg));\n    return Buffer.from(nacl.genericHash(gh));\n  }\n  txID() {\n    const hash = this.rawTxID();\n    return base32.encode(hash).slice(0, ALGORAND_TRANSACTION_LENGTH);\n  }\n  // add a lease to a transaction not yet having\n  // supply feePerByte to increment fee accordingly\n  addLease(lease, feePerByte = 0) {\n    let mutableLease;\n    if (lease !== undefined) {\n      if (lease.constructor !== Uint8Array) throw Error('lease must be a Uint8Array.');\n      if (lease.length !== ALGORAND_TRANSACTION_LEASE_LENGTH) throw Error(`lease must be of length ${ALGORAND_TRANSACTION_LEASE_LENGTH.toString()}.`);\n      mutableLease = new Uint8Array(lease);\n    } else {\n      mutableLease = new Uint8Array(0);\n    }\n    this.lease = mutableLease;\n    if (feePerByte !== 0) {\n      this.fee += (ALGORAND_TRANSACTION_LEASE_LABEL_LENGTH + ALGORAND_TRANSACTION_LEASE_LENGTH) * feePerByte;\n    }\n  }\n  // add the rekey-to field to a transaction not yet having it\n  // supply feePerByte to increment fee accordingly\n  addRekey(reKeyTo, feePerByte = 0) {\n    if (reKeyTo !== undefined) {\n      this.reKeyTo = address.decodeAddress(reKeyTo);\n    }\n    if (feePerByte !== 0) {\n      this.fee += (ALGORAND_TRANSACTION_REKEY_LABEL_LENGTH + ALGORAND_TRANSACTION_ADDRESS_LENGTH) * feePerByte;\n    }\n  }\n  // build display dict for prettyPrint and toString\n  // eslint-disable-next-line no-underscore-dangle\n  _getDictForDisplay() {\n    const forPrinting = {\n      ...this\n    };\n    forPrinting.tag = forPrinting.tag.toString();\n    forPrinting.from = address.encodeAddress(forPrinting.from.publicKey);\n    if (forPrinting.to !== undefined) forPrinting.to = address.encodeAddress(forPrinting.to.publicKey);\n    // things that need fixing:\n    if (forPrinting.freezeAccount !== undefined) forPrinting.freezeAccount = address.encodeAddress(forPrinting.freezeAccount.publicKey);\n    if (forPrinting.closeRemainderTo !== undefined) forPrinting.closeRemainderTo = address.encodeAddress(forPrinting.closeRemainderTo.publicKey);\n    if (forPrinting.assetManager !== undefined) forPrinting.assetManager = address.encodeAddress(forPrinting.assetManager.publicKey);\n    if (forPrinting.assetReserve !== undefined) forPrinting.assetReserve = address.encodeAddress(forPrinting.assetReserve.publicKey);\n    if (forPrinting.assetFreeze !== undefined) forPrinting.assetFreeze = address.encodeAddress(forPrinting.assetFreeze.publicKey);\n    if (forPrinting.assetClawback !== undefined) forPrinting.assetClawback = address.encodeAddress(forPrinting.assetClawback.publicKey);\n    if (forPrinting.assetRevocationTarget !== undefined) forPrinting.assetRevocationTarget = address.encodeAddress(forPrinting.assetRevocationTarget.publicKey);\n    if (forPrinting.reKeyTo !== undefined) forPrinting.reKeyTo = address.encodeAddress(forPrinting.reKeyTo.publicKey);\n    forPrinting.genesisHash = forPrinting.genesisHash.toString('base64');\n    return forPrinting;\n  }\n  // pretty print the transaction to console\n  prettyPrint() {\n    // eslint-disable-next-line no-underscore-dangle,no-console\n    console.log(this._getDictForDisplay());\n  }\n  // get string representation\n  toString() {\n    // eslint-disable-next-line no-underscore-dangle\n    return JSON.stringify(this._getDictForDisplay());\n  }\n}\n/**\r\n * encodeUnsignedSimulateTransaction takes a txnBuilder.Transaction object,\r\n * converts it into a SignedTransaction-like object, and converts it to a Buffer.\r\n *\r\n * Note: this function should only be used to simulate unsigned transactions.\r\n *\r\n * @param transactionObject - Transaction object to simulate.\r\n */\nexport function encodeUnsignedSimulateTransaction(transactionObject) {\n  const objToEncode = {\n    txn: transactionObject.get_obj_for_encoding()\n  };\n  return encoding.encode(objToEncode);\n}\n/**\r\n * encodeUnsignedTransaction takes a completed txnBuilder.Transaction object, such as from the makeFoo\r\n * family of transactions, and converts it to a Buffer\r\n * @param transactionObject - the completed Transaction object\r\n */\nexport function encodeUnsignedTransaction(transactionObject) {\n  const objToEncode = transactionObject.get_obj_for_encoding();\n  return encoding.encode(objToEncode);\n}\n/**\r\n * decodeUnsignedTransaction takes a Buffer (as if from encodeUnsignedTransaction) and converts it to a txnBuilder.Transaction object\r\n * @param transactionBuffer - the Uint8Array containing a transaction\r\n */\nexport function decodeUnsignedTransaction(transactionBuffer) {\n  const partlyDecodedObject = encoding.decode(transactionBuffer);\n  return Transaction.from_obj_for_encoding(partlyDecodedObject);\n}\n/**\r\n * decodeSignedTransaction takes a Buffer (from transaction.signTxn) and converts it to an object\r\n * containing the Transaction (txn), the signature (sig), and the auth-addr field if applicable (sgnr)\r\n * @param transactionBuffer - the Uint8Array containing a transaction\r\n * @returns containing a Transaction, the signature, and possibly an auth-addr field\r\n */\nexport function decodeSignedTransaction(transactionBuffer) {\n  const stxnDecoded = encoding.decode(transactionBuffer);\n  const stxn = {\n    ...stxnDecoded,\n    txn: Transaction.from_obj_for_encoding(stxnDecoded.txn)\n  };\n  return stxn;\n}\nexport function instantiateTxnIfNeeded(transactionLike) {\n  return transactionLike instanceof Transaction ? transactionLike : new Transaction(transactionLike);\n}\nexport default Transaction;","map":{"version":3,"names":["Buffer","base32","address","encoding","nacl","utils","translateBoxReferences","TransactionType","isTransactionType","ALGORAND_TRANSACTION_LENGTH","ALGORAND_MIN_TX_FEE","ALGORAND_TRANSACTION_LEASE_LENGTH","ALGORAND_MAX_ASSET_DECIMALS","NUM_ADDL_BYTES_AFTER_SIGNING","ALGORAND_TRANSACTION_LEASE_LABEL_LENGTH","ALGORAND_TRANSACTION_ADDRESS_LENGTH","ALGORAND_TRANSACTION_REKEY_LABEL_LENGTH","ASSET_METADATA_HASH_LENGTH","KEYREG_VOTE_KEY_LENGTH","KEYREG_SELECTION_KEY_LENGTH","KEYREG_STATE_PROOF_KEY_LENGTH","HeartbeatProof","constructor","sig","pk","pk2","p1s","p2s","s","p","p2","from_obj_for_encoding","encHbFields","proof","Object","create","prototype","get_obj_for_encoding","fields","HeartbeatFields","addr","seed","voteID","kd","a","prf","sd","vid","decodeAddress","encodeAddress","from","publicKey","getKeyregKey","input","inputName","length","undefined","inputAsBuffer","Uint8Array","isBuffer","byteLength","Error","Transaction","transaction","name","tag","defaults","type","pay","flatFee","nonParticipation","keyreg","voteKey","suggestedParams","reference","genesisHash","fee","firstRound","lastRound","genesisID","txn","to","closeRemainderTo","assetManager","assetReserve","assetFreeze","assetClawback","assetRevocationTarget","freezeAccount","reKeyTo","amount","Number","isSafeInteger","BigInt","extraPages","isInteger","assetTotal","assetDecimals","toString","assetIndex","appIndex","appLocalInts","appLocalByteSlices","appGlobalInts","appGlobalByteSlices","appApprovalProgram","appClearProgram","appArgs","Array","isArray","slice","forEach","arg","appAccounts","map","addressAsString","appForeignApps","foreignAppIndex","appForeignAssets","foreignAssetIndex","boxes","box","assetMetadataHash","every","value","note","lease","selectionKey","stateProofKey","voteFirst","voteLast","voteKeyDilution","assign","removeUndefinedProperties","estimateSize","group","stateProofType","stateProofMessage","stateProof","heartbeatFields","amt","fv","lv","snd","gen","gh","lx","grp","ALGORAND_ZERO_ADDRESS_STRING","close","rekey","rcv","votekey","selkey","sprfkey","votefst","votelst","votekd","nonpart","caid","apar","t","df","assetDefaultFrozen","dc","m","r","f","c","assetName","an","assetUnitName","un","assetURL","au","am","aamt","arcv","xaid","aclose","asnd","faid","afrz","freezeState","fadd","apid","apan","appOnComplete","apls","nui","nbs","apgs","apfa","apas","apep","apbx","apap","apsu","apaa","apat","decodedAddress","i","n","sptype","spmsg","sp","hb","txnForEnc","addressBytes","toByte","bytesToSign","encodedMsg","concatArrays","encode","rawSignTxn","sk","toBeSigned","sign","signTxn","sTxn","keypair","keyPairFromSecretKey","pubKeyFromSk","sgnr","attachSignature","signerAddr","signature","isValidSignatureLength","signerPublicKey","rawTxID","enMsg","genericHash","txID","hash","addLease","feePerByte","mutableLease","addRekey","_getDictForDisplay","forPrinting","prettyPrint","console","log","JSON","stringify","encodeUnsignedSimulateTransaction","transactionObject","objToEncode","encodeUnsignedTransaction","decodeUnsignedTransaction","transactionBuffer","partlyDecodedObject","decode","decodeSignedTransaction","stxnDecoded","stxn","instantiateTxnIfNeeded","transactionLike"],"sources":["C:\\Users\\Aditya singh\\AlgoEase\\frontend\\node_modules\\algosdk\\src\\transaction.ts"],"sourcesContent":["import { Buffer } from 'buffer';\r\nimport base32 from 'hi-base32';\r\nimport * as address from './encoding/address';\r\nimport * as encoding from './encoding/encoding';\r\nimport * as nacl from './nacl/naclWrappers';\r\nimport * as utils from './utils/utils';\r\nimport { translateBoxReferences } from './boxStorage';\r\nimport {\r\n  OnApplicationComplete,\r\n  TransactionParams,\r\n  TransactionType,\r\n  isTransactionType,\r\n  BoxReference,\r\n} from './types/transactions/base';\r\nimport AnyTransaction, {\r\n  MustHaveSuggestedParams,\r\n  MustHaveSuggestedParamsInline,\r\n  EncodedTransaction,\r\n  EncodedSignedTransaction,\r\n  EncodedMultisig,\r\n  EncodedLogicSig,\r\n  EncodedHeartbeatFields,\r\n  EncodedHeartbeatProof,\r\n} from './types/transactions';\r\nimport { Address } from './types/address';\r\n\r\nconst ALGORAND_TRANSACTION_LENGTH = 52;\r\nexport const ALGORAND_MIN_TX_FEE = 1000; // version v5\r\nconst ALGORAND_TRANSACTION_LEASE_LENGTH = 32;\r\nconst ALGORAND_MAX_ASSET_DECIMALS = 19;\r\nconst NUM_ADDL_BYTES_AFTER_SIGNING = 75; // NUM_ADDL_BYTES_AFTER_SIGNING is the number of bytes added to a txn after signing it\r\nconst ALGORAND_TRANSACTION_LEASE_LABEL_LENGTH = 5;\r\nconst ALGORAND_TRANSACTION_ADDRESS_LENGTH = 32;\r\nconst ALGORAND_TRANSACTION_REKEY_LABEL_LENGTH = 5;\r\nconst ASSET_METADATA_HASH_LENGTH = 32;\r\nconst KEYREG_VOTE_KEY_LENGTH = 32;\r\nconst KEYREG_SELECTION_KEY_LENGTH = 32;\r\nconst KEYREG_STATE_PROOF_KEY_LENGTH = 64;\r\n\r\ntype AnyTransactionWithParams = MustHaveSuggestedParams<AnyTransaction>;\r\ntype AnyTransactionWithParamsInline = MustHaveSuggestedParamsInline<AnyTransaction>;\r\n\r\n/**\r\n * Object representing a heartbeat proof\r\n */\r\nclass HeartbeatProof {\r\n  s: Buffer;\r\n  p: Buffer;\r\n  p2: Buffer;\r\n  p1s: Buffer;\r\n  p2s: Buffer;\r\n\r\n  constructor(sig: Buffer, pk: Buffer, pk2: Buffer, p1s: Buffer, p2s: Buffer) {\r\n    this.s = sig;\r\n    this.p = pk;\r\n    this.p2 = pk2;\r\n    this.p1s = p1s;\r\n    this.p2s = p2s;\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    encHbFields: EncodedHeartbeatProof\r\n  ): HeartbeatProof {\r\n    const proof = Object.create(this.prototype) as HeartbeatProof;\r\n    proof.s = encHbFields.s;\r\n    proof.p = encHbFields.p;\r\n    proof.p2 = encHbFields.p2;\r\n    proof.p1s = encHbFields.p1s;\r\n    proof.p2s = encHbFields.p2s;\r\n    return proof;\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  get_obj_for_encoding() {\r\n    const fields: EncodedHeartbeatProof = {\r\n      s: this.s,\r\n      p: this.p,\r\n      p2: this.p2,\r\n      p1s: this.p1s,\r\n      p2s: this.p2s,\r\n    };\r\n    return fields;\r\n  }\r\n}\r\n\r\n/**\r\n * Object representing a heartbeat transaction\r\n */\r\nclass HeartbeatFields {\r\n  a: string | Address;\r\n  prf: HeartbeatProof;\r\n  sd: Buffer;\r\n  vid: Buffer;\r\n  kd: number;\r\n\r\n  constructor(\r\n    addr: string | Address,\r\n    proof: EncodedHeartbeatProof,\r\n    seed: Buffer,\r\n    voteID: Buffer,\r\n    kd: number\r\n  ) {\r\n    this.a = addr;\r\n    this.prf = HeartbeatProof.from_obj_for_encoding(proof);\r\n    this.sd = seed;\r\n    this.vid = voteID;\r\n    this.kd = kd;\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    encHbFields: EncodedHeartbeatFields\r\n  ): HeartbeatFields {\r\n    const fields = Object.create(this.prototype) as HeartbeatFields;\r\n    fields.a = address.decodeAddress(address.encodeAddress(encHbFields.a));\r\n    fields.prf = HeartbeatProof.from_obj_for_encoding(encHbFields.prf);\r\n    fields.sd = Buffer.from(encHbFields.sd);\r\n    fields.vid = Buffer.from(encHbFields.vid);\r\n    fields.kd = encHbFields.kd;\r\n    return fields;\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  get_obj_for_encoding() {\r\n    const fields: EncodedHeartbeatFields = {\r\n      a: Buffer.from((this.a as Address).publicKey),\r\n      prf: this.prf.get_obj_for_encoding(),\r\n      sd: this.sd,\r\n      vid: this.vid,\r\n      kd: this.kd,\r\n    };\r\n    return fields;\r\n  }\r\n}\r\n\r\n/**\r\n * A modified version of the transaction params. Represents the internal structure that the Transaction class uses\r\n * to store inputted transaction objects.\r\n */\r\n// Omit allows overwriting properties\r\ninterface TransactionStorageStructure\r\n  extends Omit<\r\n    TransactionParams,\r\n    | 'from'\r\n    | 'to'\r\n    | 'genesisHash'\r\n    | 'closeRemainderTo'\r\n    | 'voteKey'\r\n    | 'selectionKey'\r\n    | 'stateProofKey'\r\n    | 'assetManager'\r\n    | 'assetReserve'\r\n    | 'assetFreeze'\r\n    | 'assetClawback'\r\n    | 'assetRevocationTarget'\r\n    | 'freezeAccount'\r\n    | 'appAccounts'\r\n    | 'suggestedParams'\r\n    | 'reKeyTo'\r\n    | 'heartbeatFields' // redefine type to silent TS error about 'string | Address' and 'string' incompatibility\r\n  > {\r\n  from: string | Address;\r\n  to: string | Address;\r\n  fee: number;\r\n  amount: number | bigint;\r\n  firstRound: number;\r\n  lastRound: number;\r\n  note?: Uint8Array;\r\n  genesisID: string;\r\n  genesisHash: string | Buffer;\r\n  lease?: Uint8Array;\r\n  closeRemainderTo?: string | Address;\r\n  voteKey: string | Buffer;\r\n  selectionKey: string | Buffer;\r\n  stateProofKey: string | Buffer;\r\n  voteFirst: number;\r\n  voteLast: number;\r\n  voteKeyDilution: number;\r\n  assetIndex: number;\r\n  assetTotal: number | bigint;\r\n  assetDecimals: number;\r\n  assetDefaultFrozen: boolean;\r\n  assetManager: string | Address;\r\n  assetReserve: string | Address;\r\n  assetFreeze: string | Address;\r\n  assetClawback: string | Address;\r\n  assetUnitName: string;\r\n  assetName: string;\r\n  assetURL: string;\r\n  assetMetadataHash?: string | Uint8Array;\r\n  freezeAccount: string | Address;\r\n  freezeState: boolean;\r\n  assetRevocationTarget?: string | Address;\r\n  appIndex: number;\r\n  appOnComplete: OnApplicationComplete;\r\n  appLocalInts: number;\r\n  appLocalByteSlices: number;\r\n  appGlobalInts: number;\r\n  appGlobalByteSlices: number;\r\n  appApprovalProgram: Uint8Array;\r\n  appClearProgram: Uint8Array;\r\n  appArgs?: Uint8Array[];\r\n  appAccounts?: string[] | Address[];\r\n  appForeignApps?: number[];\r\n  appForeignAssets?: number[];\r\n  type?: TransactionType;\r\n  flatFee: boolean;\r\n  reKeyTo?: string | Address;\r\n  nonParticipation?: boolean;\r\n  group?: Buffer;\r\n  extraPages?: number;\r\n  boxes?: BoxReference[];\r\n  stateProofType?: number | bigint;\r\n  stateProof?: Uint8Array;\r\n  stateProofMessage?: Uint8Array;\r\n  heartbeatFields?: HeartbeatFields;\r\n}\r\n\r\nfunction getKeyregKey(\r\n  input: undefined | string | Uint8Array | Buffer,\r\n  inputName: string,\r\n  length: number\r\n): Buffer | undefined {\r\n  if (input == null) {\r\n    return undefined;\r\n  }\r\n\r\n  let inputAsBuffer: Buffer | undefined;\r\n\r\n  if (typeof input === 'string') {\r\n    inputAsBuffer = Buffer.from(input, 'base64');\r\n  } else if (input.constructor === Uint8Array) {\r\n    inputAsBuffer = Buffer.from(input);\r\n  } else if (Buffer.isBuffer(input)) {\r\n    inputAsBuffer = input;\r\n  }\r\n\r\n  if (inputAsBuffer == null || inputAsBuffer.byteLength !== length) {\r\n    throw Error(\r\n      `${inputName} must be a ${length} byte Uint8Array or Buffer or base64 string.`\r\n    );\r\n  }\r\n\r\n  return inputAsBuffer;\r\n}\r\n\r\n/**\r\n * Transaction enables construction of Algorand transactions\r\n * */\r\nexport class Transaction implements TransactionStorageStructure {\r\n  name = 'Transaction';\r\n  tag = Buffer.from('TX');\r\n\r\n  // Implement transaction params\r\n  from: Address;\r\n  to: Address;\r\n  fee: number;\r\n  amount: number | bigint;\r\n  firstRound: number;\r\n  lastRound: number;\r\n  note?: Uint8Array;\r\n  genesisID: string;\r\n  genesisHash: Buffer;\r\n  lease?: Uint8Array;\r\n  closeRemainderTo?: Address;\r\n  voteKey: Buffer;\r\n  selectionKey: Buffer;\r\n  stateProofKey: Buffer;\r\n  voteFirst: number;\r\n  voteLast: number;\r\n  voteKeyDilution: number;\r\n  assetIndex: number;\r\n  assetTotal: number | bigint;\r\n  assetDecimals: number;\r\n  assetDefaultFrozen: boolean;\r\n  assetManager: Address;\r\n  assetReserve: Address;\r\n  assetFreeze: Address;\r\n  assetClawback: Address;\r\n  assetUnitName: string;\r\n  assetName: string;\r\n  assetURL: string;\r\n  assetMetadataHash?: Uint8Array;\r\n  freezeAccount: Address;\r\n  freezeState: boolean;\r\n  assetRevocationTarget?: Address;\r\n  appIndex: number;\r\n  appOnComplete: OnApplicationComplete;\r\n  appLocalInts: number;\r\n  appLocalByteSlices: number;\r\n  appGlobalInts: number;\r\n  appGlobalByteSlices: number;\r\n  appApprovalProgram: Uint8Array;\r\n  appClearProgram: Uint8Array;\r\n  appArgs?: Uint8Array[];\r\n  appAccounts?: Address[];\r\n  appForeignApps?: number[];\r\n  appForeignAssets?: number[];\r\n  boxes?: BoxReference[];\r\n  type?: TransactionType;\r\n  flatFee: boolean;\r\n  reKeyTo?: Address;\r\n  nonParticipation?: boolean;\r\n  group?: Buffer;\r\n  extraPages?: number;\r\n  stateProofType?: number | bigint;\r\n  stateProof?: Uint8Array;\r\n  stateProofMessage?: Uint8Array;\r\n  heartbeatFields?: HeartbeatFields;\r\n\r\n  constructor({ ...transaction }: AnyTransaction) {\r\n    // Populate defaults\r\n    /* eslint-disable no-param-reassign */\r\n    const defaults: Partial<TransactionParams> = {\r\n      type: TransactionType.pay,\r\n      flatFee: false,\r\n      nonParticipation: false,\r\n    };\r\n    // Default type\r\n    if (typeof transaction.type === 'undefined') {\r\n      transaction.type = defaults.type;\r\n    }\r\n    // Default flatFee\r\n    if (\r\n      typeof (transaction as AnyTransactionWithParamsInline).flatFee ===\r\n      'undefined'\r\n    ) {\r\n      (transaction as AnyTransactionWithParamsInline).flatFee =\r\n        defaults.flatFee;\r\n    }\r\n    // Default nonParticipation\r\n    if (\r\n      transaction.type === TransactionType.keyreg &&\r\n      typeof transaction.voteKey !== 'undefined' &&\r\n      typeof transaction.nonParticipation === 'undefined'\r\n    ) {\r\n      transaction.nonParticipation = defaults.nonParticipation;\r\n    }\r\n    /* eslint-enable no-param-reassign */\r\n\r\n    // Move suggested parameters from its object to inline\r\n    if (\r\n      (transaction as AnyTransactionWithParams).suggestedParams !== undefined\r\n    ) {\r\n      // Create a temporary reference to the transaction object that has params inline and also as a suggested params object\r\n      //   - Helpful for moving params from named object to inline\r\n      const reference = transaction as AnyTransactionWithParams &\r\n        AnyTransactionWithParamsInline;\r\n      reference.genesisHash = reference.suggestedParams.genesisHash;\r\n      reference.fee = reference.suggestedParams.fee;\r\n      if (reference.suggestedParams.flatFee !== undefined)\r\n        reference.flatFee = reference.suggestedParams.flatFee;\r\n      reference.firstRound = reference.suggestedParams.firstRound;\r\n      reference.lastRound = reference.suggestedParams.lastRound;\r\n      reference.genesisID = reference.suggestedParams.genesisID;\r\n    }\r\n\r\n    // At this point all suggestedParams have been moved to be inline, so we can reassign the transaction object type\r\n    // to one which is more useful as we prepare properties for storing\r\n    const txn = transaction as TransactionStorageStructure;\r\n\r\n    txn.from = address.decodeAddress(txn.from as string);\r\n    if (txn.to !== undefined) txn.to = address.decodeAddress(txn.to as string);\r\n    if (txn.closeRemainderTo !== undefined)\r\n      txn.closeRemainderTo = address.decodeAddress(\r\n        txn.closeRemainderTo as string\r\n      );\r\n    if (txn.assetManager !== undefined)\r\n      txn.assetManager = address.decodeAddress(txn.assetManager as string);\r\n    if (txn.assetReserve !== undefined)\r\n      txn.assetReserve = address.decodeAddress(txn.assetReserve as string);\r\n    if (txn.assetFreeze !== undefined)\r\n      txn.assetFreeze = address.decodeAddress(txn.assetFreeze as string);\r\n    if (txn.assetClawback !== undefined)\r\n      txn.assetClawback = address.decodeAddress(txn.assetClawback as string);\r\n    if (txn.assetRevocationTarget !== undefined)\r\n      txn.assetRevocationTarget = address.decodeAddress(\r\n        txn.assetRevocationTarget as string\r\n      );\r\n    if (txn.freezeAccount !== undefined)\r\n      txn.freezeAccount = address.decodeAddress(txn.freezeAccount as string);\r\n    if (txn.reKeyTo !== undefined)\r\n      txn.reKeyTo = address.decodeAddress(txn.reKeyTo as string);\r\n    if (txn.genesisHash === undefined)\r\n      throw Error('genesis hash must be specified and in a base64 string.');\r\n\r\n    txn.genesisHash = Buffer.from(txn.genesisHash as string, 'base64');\r\n\r\n    if (\r\n      txn.amount !== undefined &&\r\n      (!(\r\n        Number.isSafeInteger(txn.amount) ||\r\n        (typeof txn.amount === 'bigint' &&\r\n          txn.amount <= BigInt('0xffffffffffffffff'))\r\n      ) ||\r\n        txn.amount < 0)\r\n    )\r\n      throw Error(\r\n        'Amount must be a positive number and smaller than 2^64-1. If the number is larger than 2^53-1, use bigint.'\r\n      );\r\n    if (!Number.isSafeInteger(txn.fee) || txn.fee < 0)\r\n      throw Error('fee must be a positive number and smaller than 2^53-1');\r\n    if (!Number.isSafeInteger(txn.firstRound) || txn.firstRound < 0)\r\n      throw Error('firstRound must be a positive number');\r\n    if (!Number.isSafeInteger(txn.lastRound) || txn.lastRound < 0)\r\n      throw Error('lastRound must be a positive number');\r\n    if (\r\n      txn.extraPages !== undefined &&\r\n      (!Number.isInteger(txn.extraPages) ||\r\n        txn.extraPages < 0 ||\r\n        txn.extraPages > 3)\r\n    )\r\n      throw Error('extraPages must be an Integer between and including 0 to 3');\r\n    if (\r\n      txn.assetTotal !== undefined &&\r\n      (!(\r\n        Number.isSafeInteger(txn.assetTotal) ||\r\n        (typeof txn.assetTotal === 'bigint' &&\r\n          txn.assetTotal <= BigInt('0xffffffffffffffff'))\r\n      ) ||\r\n        txn.assetTotal < 0)\r\n    )\r\n      throw Error(\r\n        'Total asset issuance must be a positive number and smaller than 2^64-1. If the number is larger than 2^53-1, use bigint.'\r\n      );\r\n    if (\r\n      txn.assetDecimals !== undefined &&\r\n      (!Number.isSafeInteger(txn.assetDecimals) ||\r\n        txn.assetDecimals < 0 ||\r\n        txn.assetDecimals > ALGORAND_MAX_ASSET_DECIMALS)\r\n    )\r\n      throw Error(\r\n        `assetDecimals must be a positive number and smaller than ${ALGORAND_MAX_ASSET_DECIMALS.toString()}`\r\n      );\r\n    if (\r\n      txn.assetIndex !== undefined &&\r\n      (!Number.isSafeInteger(txn.assetIndex) || txn.assetIndex < 0)\r\n    )\r\n      throw Error(\r\n        'Asset index must be a positive number and smaller than 2^53-1'\r\n      );\r\n    if (\r\n      txn.appIndex !== undefined &&\r\n      (!Number.isSafeInteger(txn.appIndex) || txn.appIndex < 0)\r\n    )\r\n      throw Error(\r\n        'Application index must be a positive number and smaller than 2^53-1'\r\n      );\r\n    if (\r\n      txn.appLocalInts !== undefined &&\r\n      (!Number.isSafeInteger(txn.appLocalInts) || txn.appLocalInts < 0)\r\n    )\r\n      throw Error(\r\n        'Application local ints count must be a positive number and smaller than 2^53-1'\r\n      );\r\n    if (\r\n      txn.appLocalByteSlices !== undefined &&\r\n      (!Number.isSafeInteger(txn.appLocalByteSlices) ||\r\n        txn.appLocalByteSlices < 0)\r\n    )\r\n      throw Error(\r\n        'Application local byte slices count must be a positive number and smaller than 2^53-1'\r\n      );\r\n    if (\r\n      txn.appGlobalInts !== undefined &&\r\n      (!Number.isSafeInteger(txn.appGlobalInts) || txn.appGlobalInts < 0)\r\n    )\r\n      throw Error(\r\n        'Application global ints count must be a positive number and smaller than 2^53-1'\r\n      );\r\n    if (\r\n      txn.appGlobalByteSlices !== undefined &&\r\n      (!Number.isSafeInteger(txn.appGlobalByteSlices) ||\r\n        txn.appGlobalByteSlices < 0)\r\n    )\r\n      throw Error(\r\n        'Application global byte slices count must be a positive number and smaller than 2^53-1'\r\n      );\r\n    if (txn.appApprovalProgram !== undefined) {\r\n      if (txn.appApprovalProgram.constructor !== Uint8Array)\r\n        throw Error('appApprovalProgram must be a Uint8Array.');\r\n    }\r\n    if (txn.appClearProgram !== undefined) {\r\n      if (txn.appClearProgram.constructor !== Uint8Array)\r\n        throw Error('appClearProgram must be a Uint8Array.');\r\n    }\r\n    if (txn.appArgs !== undefined) {\r\n      if (!Array.isArray(txn.appArgs))\r\n        throw Error('appArgs must be an Array of Uint8Array.');\r\n      txn.appArgs = txn.appArgs.slice();\r\n      txn.appArgs.forEach((arg) => {\r\n        if (arg.constructor !== Uint8Array)\r\n          throw Error('each element of AppArgs must be a Uint8Array.');\r\n      });\r\n    } else {\r\n      txn.appArgs = [];\r\n    }\r\n    if (txn.appAccounts !== undefined) {\r\n      if (!Array.isArray(txn.appAccounts))\r\n        throw Error('appAccounts must be an Array of addresses.');\r\n      txn.appAccounts = txn.appAccounts.map((addressAsString) =>\r\n        address.decodeAddress(addressAsString)\r\n      );\r\n    }\r\n    if (txn.appForeignApps !== undefined) {\r\n      if (!Array.isArray(txn.appForeignApps))\r\n        throw Error('appForeignApps must be an Array of integers.');\r\n      txn.appForeignApps = txn.appForeignApps.slice();\r\n      txn.appForeignApps.forEach((foreignAppIndex) => {\r\n        if (!Number.isSafeInteger(foreignAppIndex) || foreignAppIndex < 0)\r\n          throw Error(\r\n            'each foreign application index must be a positive number and smaller than 2^53-1'\r\n          );\r\n      });\r\n    }\r\n    if (txn.appForeignAssets !== undefined) {\r\n      if (!Array.isArray(txn.appForeignAssets))\r\n        throw Error('appForeignAssets must be an Array of integers.');\r\n      txn.appForeignAssets = txn.appForeignAssets.slice();\r\n      txn.appForeignAssets.forEach((foreignAssetIndex) => {\r\n        if (!Number.isSafeInteger(foreignAssetIndex) || foreignAssetIndex < 0)\r\n          throw Error(\r\n            'each foreign asset index must be a positive number and smaller than 2^53-1'\r\n          );\r\n      });\r\n    }\r\n    if (txn.boxes !== undefined) {\r\n      if (!Array.isArray(txn.boxes))\r\n        throw Error('boxes must be an Array of BoxReference.');\r\n      txn.boxes = txn.boxes.slice();\r\n      txn.boxes.forEach((box) => {\r\n        if (\r\n          !Number.isSafeInteger(box.appIndex) ||\r\n          box.name.constructor !== Uint8Array\r\n        )\r\n          throw Error(\r\n            'box app index must be a number and name must be an Uint8Array.'\r\n          );\r\n      });\r\n    }\r\n    if (\r\n      txn.assetMetadataHash !== undefined &&\r\n      txn.assetMetadataHash.length !== 0\r\n    ) {\r\n      if (typeof txn.assetMetadataHash === 'string') {\r\n        txn.assetMetadataHash = new Uint8Array(\r\n          Buffer.from(txn.assetMetadataHash)\r\n        );\r\n      }\r\n\r\n      if (\r\n        txn.assetMetadataHash.constructor !== Uint8Array ||\r\n        txn.assetMetadataHash.byteLength !== ASSET_METADATA_HASH_LENGTH\r\n      ) {\r\n        throw Error(\r\n          `assetMetadataHash must be a ${ASSET_METADATA_HASH_LENGTH} byte Uint8Array or string.`\r\n        );\r\n      }\r\n\r\n      if (txn.assetMetadataHash.every((value) => value === 0)) {\r\n        // if hash contains all 0s, omit it\r\n        txn.assetMetadataHash = undefined;\r\n      }\r\n    } else {\r\n      txn.assetMetadataHash = undefined;\r\n    }\r\n    if (txn.note !== undefined) {\r\n      if (txn.note.constructor !== Uint8Array)\r\n        throw Error('note must be a Uint8Array.');\r\n    } else {\r\n      txn.note = new Uint8Array(0);\r\n    }\r\n    if (txn.lease !== undefined) {\r\n      if (txn.lease.constructor !== Uint8Array)\r\n        throw Error('lease must be a Uint8Array.');\r\n      if (txn.lease.length !== ALGORAND_TRANSACTION_LEASE_LENGTH)\r\n        throw Error(\r\n          `lease must be of length ${ALGORAND_TRANSACTION_LEASE_LENGTH.toString()}.`\r\n        );\r\n      if (txn.lease.every((value) => value === 0)) {\r\n        // if lease contains all 0s, omit it\r\n        txn.lease = new Uint8Array(0);\r\n      }\r\n    } else {\r\n      txn.lease = new Uint8Array(0);\r\n    }\r\n    txn.voteKey = getKeyregKey(txn.voteKey, 'voteKey', KEYREG_VOTE_KEY_LENGTH);\r\n    txn.selectionKey = getKeyregKey(\r\n      txn.selectionKey,\r\n      'selectionKey',\r\n      KEYREG_SELECTION_KEY_LENGTH\r\n    );\r\n    txn.stateProofKey = getKeyregKey(\r\n      txn.stateProofKey,\r\n      'stateProofKey',\r\n      KEYREG_STATE_PROOF_KEY_LENGTH\r\n    );\r\n    // Checking non-participation key registration\r\n    if (\r\n      txn.nonParticipation &&\r\n      (txn.voteKey ||\r\n        txn.selectionKey ||\r\n        txn.voteFirst ||\r\n        txn.stateProofKey ||\r\n        txn.voteLast ||\r\n        txn.voteKeyDilution)\r\n    ) {\r\n      throw new Error(\r\n        'nonParticipation is true but participation params are present.'\r\n      );\r\n    }\r\n    // Checking online key registration\r\n    if (\r\n      !txn.nonParticipation &&\r\n      (txn.voteKey ||\r\n        txn.selectionKey ||\r\n        txn.stateProofKey ||\r\n        txn.voteFirst ||\r\n        txn.voteLast ||\r\n        txn.voteKeyDilution) &&\r\n      !(\r\n        txn.voteKey &&\r\n        txn.selectionKey &&\r\n        txn.voteFirst &&\r\n        txn.voteLast &&\r\n        txn.voteKeyDilution\r\n      )\r\n      // stateProofKey not included here for backwards compatibility\r\n    ) {\r\n      throw new Error(\r\n        'online key registration missing at least one of the following fields: ' +\r\n          'voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution'\r\n      );\r\n    }\r\n    // The last option is an offline key registration where all the fields\r\n    // nonParticipation, voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution\r\n    // are all undefined/false\r\n\r\n    // Remove unwanted properties and store transaction on instance\r\n    delete ((txn as unknown) as AnyTransactionWithParams).suggestedParams;\r\n    Object.assign(this, utils.removeUndefinedProperties(txn));\r\n\r\n    // Modify Fee\r\n    if (!txn.flatFee) {\r\n      this.fee *= this.estimateSize();\r\n      // If suggested fee too small and will be rejected, set to min tx fee\r\n      if (this.fee < ALGORAND_MIN_TX_FEE) {\r\n        this.fee = ALGORAND_MIN_TX_FEE;\r\n      }\r\n    }\r\n\r\n    // say we are aware of groups\r\n    this.group = undefined;\r\n\r\n    // stpf fields\r\n    if (\r\n      txn.stateProofType !== undefined &&\r\n      (!Number.isSafeInteger(txn.stateProofType) || txn.stateProofType < 0)\r\n    )\r\n      throw Error(\r\n        'State Proof type must be a positive number and smaller than 2^53-1'\r\n      );\r\n    if (txn.stateProofMessage !== undefined) {\r\n      if (txn.stateProofMessage.constructor !== Uint8Array)\r\n        throw Error('stateProofMessage must be a Uint8Array.');\r\n    } else {\r\n      txn.stateProofMessage = new Uint8Array(0);\r\n    }\r\n    if (txn.stateProof !== undefined) {\r\n      if (txn.stateProof.constructor !== Uint8Array)\r\n        throw Error('stateProof must be a Uint8Array.');\r\n    } else {\r\n      txn.stateProof = new Uint8Array(0);\r\n    }\r\n    if (txn.heartbeatFields !== undefined) {\r\n      if (txn.heartbeatFields.constructor !== HeartbeatFields)\r\n        throw Error('heartbeatFields must be a HeartbeatFields.');\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  get_obj_for_encoding() {\r\n    if (this.type === 'pay') {\r\n      const txn: EncodedTransaction = {\r\n        amt: this.amount,\r\n        fee: this.fee,\r\n        fv: this.firstRound,\r\n        lv: this.lastRound,\r\n        note: Buffer.from(this.note),\r\n        snd: Buffer.from(this.from.publicKey),\r\n        type: 'pay',\r\n        gen: this.genesisID,\r\n        gh: this.genesisHash,\r\n        lx: Buffer.from(this.lease),\r\n        grp: this.group,\r\n      };\r\n\r\n      // parse close address\r\n      if (\r\n        this.closeRemainderTo !== undefined &&\r\n        address.encodeAddress(this.closeRemainderTo.publicKey) !==\r\n          address.ALGORAND_ZERO_ADDRESS_STRING\r\n      ) {\r\n        txn.close = Buffer.from(this.closeRemainderTo.publicKey);\r\n      }\r\n      if (this.reKeyTo !== undefined) {\r\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\r\n      }\r\n      // allowed zero values\r\n      if (this.to !== undefined) txn.rcv = Buffer.from(this.to.publicKey);\r\n      if (!txn.note.length) delete txn.note;\r\n      if (!txn.amt) delete txn.amt;\r\n      if (!txn.fee) delete txn.fee;\r\n      if (!txn.fv) delete txn.fv;\r\n      if (!txn.gen) delete txn.gen;\r\n      if (txn.grp === undefined) delete txn.grp;\r\n      if (!txn.lx.length) delete txn.lx;\r\n      if (!txn.rekey) delete txn.rekey;\r\n      return txn;\r\n    }\r\n    if (this.type === 'keyreg') {\r\n      const txn: EncodedTransaction = {\r\n        fee: this.fee,\r\n        fv: this.firstRound,\r\n        lv: this.lastRound,\r\n        note: Buffer.from(this.note),\r\n        snd: Buffer.from(this.from.publicKey),\r\n        type: this.type,\r\n        gen: this.genesisID,\r\n        gh: this.genesisHash,\r\n        lx: Buffer.from(this.lease),\r\n        grp: this.group,\r\n        votekey: this.voteKey,\r\n        selkey: this.selectionKey,\r\n        sprfkey: this.stateProofKey,\r\n        votefst: this.voteFirst,\r\n        votelst: this.voteLast,\r\n        votekd: this.voteKeyDilution,\r\n      };\r\n      // allowed zero values\r\n      if (!txn.note.length) delete txn.note;\r\n      if (!txn.lx.length) delete txn.lx;\r\n      if (!txn.fee) delete txn.fee;\r\n      if (!txn.fv) delete txn.fv;\r\n      if (!txn.gen) delete txn.gen;\r\n      if (txn.grp === undefined) delete txn.grp;\r\n      if (this.reKeyTo !== undefined) {\r\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\r\n      }\r\n      if (this.nonParticipation) {\r\n        txn.nonpart = true;\r\n      }\r\n      if (!txn.selkey) delete txn.selkey;\r\n      if (!txn.votekey) delete txn.votekey;\r\n      if (!txn.sprfkey) delete txn.sprfkey;\r\n      if (!txn.votefst) delete txn.votefst;\r\n      if (!txn.votelst) delete txn.votelst;\r\n      if (!txn.votekd) delete txn.votekd;\r\n      return txn;\r\n    }\r\n    if (this.type === 'acfg') {\r\n      // asset creation, or asset reconfigure, or asset destruction\r\n      const txn: EncodedTransaction = {\r\n        fee: this.fee,\r\n        fv: this.firstRound,\r\n        lv: this.lastRound,\r\n        note: Buffer.from(this.note),\r\n        snd: Buffer.from(this.from.publicKey),\r\n        type: this.type,\r\n        gen: this.genesisID,\r\n        gh: this.genesisHash,\r\n        lx: Buffer.from(this.lease),\r\n        grp: this.group,\r\n        caid: this.assetIndex,\r\n        apar: {\r\n          t: this.assetTotal,\r\n          df: this.assetDefaultFrozen,\r\n          dc: this.assetDecimals,\r\n        },\r\n      };\r\n      if (this.assetManager !== undefined)\r\n        txn.apar.m = Buffer.from(this.assetManager.publicKey);\r\n      if (this.assetReserve !== undefined)\r\n        txn.apar.r = Buffer.from(this.assetReserve.publicKey);\r\n      if (this.assetFreeze !== undefined)\r\n        txn.apar.f = Buffer.from(this.assetFreeze.publicKey);\r\n      if (this.assetClawback !== undefined)\r\n        txn.apar.c = Buffer.from(this.assetClawback.publicKey);\r\n      if (this.assetName !== undefined) txn.apar.an = this.assetName;\r\n      if (this.assetUnitName !== undefined) txn.apar.un = this.assetUnitName;\r\n      if (this.assetURL !== undefined) txn.apar.au = this.assetURL;\r\n      if (this.assetMetadataHash !== undefined)\r\n        txn.apar.am = Buffer.from(this.assetMetadataHash);\r\n\r\n      // allowed zero values\r\n      if (!txn.note.length) delete txn.note;\r\n      if (!txn.lx.length) delete txn.lx;\r\n      if (!txn.amt) delete txn.amt;\r\n      if (!txn.fee) delete txn.fee;\r\n      if (!txn.fv) delete txn.fv;\r\n      if (!txn.gen) delete txn.gen;\r\n      if (this.reKeyTo !== undefined) {\r\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\r\n      }\r\n\r\n      if (!txn.caid) delete txn.caid;\r\n      if (\r\n        !txn.apar.t &&\r\n        !txn.apar.un &&\r\n        !txn.apar.an &&\r\n        !txn.apar.df &&\r\n        !txn.apar.m &&\r\n        !txn.apar.r &&\r\n        !txn.apar.f &&\r\n        !txn.apar.c &&\r\n        !txn.apar.au &&\r\n        !txn.apar.am &&\r\n        !txn.apar.dc\r\n      ) {\r\n        delete txn.apar;\r\n      } else {\r\n        if (!txn.apar.t) delete txn.apar.t;\r\n        if (!txn.apar.dc) delete txn.apar.dc;\r\n        if (!txn.apar.un) delete txn.apar.un;\r\n        if (!txn.apar.an) delete txn.apar.an;\r\n        if (!txn.apar.df) delete txn.apar.df;\r\n        if (!txn.apar.m) delete txn.apar.m;\r\n        if (!txn.apar.r) delete txn.apar.r;\r\n        if (!txn.apar.f) delete txn.apar.f;\r\n        if (!txn.apar.c) delete txn.apar.c;\r\n        if (!txn.apar.au) delete txn.apar.au;\r\n        if (!txn.apar.am) delete txn.apar.am;\r\n      }\r\n      if (txn.grp === undefined) delete txn.grp;\r\n\r\n      return txn;\r\n    }\r\n    if (this.type === 'axfer') {\r\n      // asset transfer, acceptance, revocation, mint, or burn\r\n      const txn: EncodedTransaction = {\r\n        aamt: this.amount,\r\n        fee: this.fee,\r\n        fv: this.firstRound,\r\n        lv: this.lastRound,\r\n        note: Buffer.from(this.note),\r\n        snd: Buffer.from(this.from.publicKey),\r\n        arcv: Buffer.from(this.to.publicKey),\r\n        type: this.type,\r\n        gen: this.genesisID,\r\n        gh: this.genesisHash,\r\n        lx: Buffer.from(this.lease),\r\n        grp: this.group,\r\n        xaid: this.assetIndex,\r\n      };\r\n      if (this.closeRemainderTo !== undefined)\r\n        txn.aclose = Buffer.from(this.closeRemainderTo.publicKey);\r\n      if (this.assetRevocationTarget !== undefined)\r\n        txn.asnd = Buffer.from(this.assetRevocationTarget.publicKey);\r\n      // allowed zero values\r\n      if (!txn.note.length) delete txn.note;\r\n      if (!txn.lx.length) delete txn.lx;\r\n      if (!txn.aamt) delete txn.aamt;\r\n      if (!txn.amt) delete txn.amt;\r\n      if (!txn.fee) delete txn.fee;\r\n      if (!txn.fv) delete txn.fv;\r\n      if (!txn.gen) delete txn.gen;\r\n      if (txn.grp === undefined) delete txn.grp;\r\n      if (!txn.aclose) delete txn.aclose;\r\n      if (!txn.asnd) delete txn.asnd;\r\n      if (!txn.rekey) delete txn.rekey;\r\n      if (this.reKeyTo !== undefined) {\r\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\r\n      }\r\n      return txn;\r\n    }\r\n    if (this.type === 'afrz') {\r\n      // asset freeze or unfreeze\r\n      const txn: EncodedTransaction = {\r\n        fee: this.fee,\r\n        fv: this.firstRound,\r\n        lv: this.lastRound,\r\n        note: Buffer.from(this.note),\r\n        snd: Buffer.from(this.from.publicKey),\r\n        type: this.type,\r\n        gen: this.genesisID,\r\n        gh: this.genesisHash,\r\n        lx: Buffer.from(this.lease),\r\n        grp: this.group,\r\n        faid: this.assetIndex,\r\n        afrz: this.freezeState,\r\n      };\r\n      if (this.freezeAccount !== undefined)\r\n        txn.fadd = Buffer.from(this.freezeAccount.publicKey);\r\n      // allowed zero values\r\n      if (!txn.note.length) delete txn.note;\r\n      if (!txn.lx.length) delete txn.lx;\r\n      if (!txn.amt) delete txn.amt;\r\n      if (!txn.fee) delete txn.fee;\r\n      if (!txn.fv) delete txn.fv;\r\n      if (!txn.gen) delete txn.gen;\r\n      if (!txn.afrz) delete txn.afrz;\r\n      if (txn.grp === undefined) delete txn.grp;\r\n      if (this.reKeyTo !== undefined) {\r\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\r\n      }\r\n      return txn;\r\n    }\r\n    if (this.type === 'appl') {\r\n      // application call of some kind\r\n      const txn: EncodedTransaction = {\r\n        fee: this.fee,\r\n        fv: this.firstRound,\r\n        lv: this.lastRound,\r\n        note: Buffer.from(this.note),\r\n        snd: Buffer.from(this.from.publicKey),\r\n        type: this.type,\r\n        gen: this.genesisID,\r\n        gh: this.genesisHash,\r\n        lx: Buffer.from(this.lease),\r\n        grp: this.group,\r\n        apid: this.appIndex,\r\n        apan: this.appOnComplete,\r\n        apls: {\r\n          nui: this.appLocalInts,\r\n          nbs: this.appLocalByteSlices,\r\n        },\r\n        apgs: {\r\n          nui: this.appGlobalInts,\r\n          nbs: this.appGlobalByteSlices,\r\n        },\r\n        apfa: this.appForeignApps,\r\n        apas: this.appForeignAssets,\r\n        apep: this.extraPages,\r\n        apbx: translateBoxReferences(\r\n          this.boxes,\r\n          this.appForeignApps,\r\n          this.appIndex\r\n        ),\r\n      };\r\n      if (this.reKeyTo !== undefined) {\r\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\r\n      }\r\n      if (this.appApprovalProgram !== undefined) {\r\n        txn.apap = Buffer.from(this.appApprovalProgram);\r\n      }\r\n      if (this.appClearProgram !== undefined) {\r\n        txn.apsu = Buffer.from(this.appClearProgram);\r\n      }\r\n      if (this.appArgs !== undefined) {\r\n        txn.apaa = this.appArgs.map((arg) => Buffer.from(arg));\r\n      }\r\n      if (this.appAccounts !== undefined) {\r\n        txn.apat = this.appAccounts.map((decodedAddress) =>\r\n          Buffer.from(decodedAddress.publicKey)\r\n        );\r\n      }\r\n      // allowed zero values\r\n      if (!txn.note.length) delete txn.note;\r\n      if (!txn.lx.length) delete txn.lx;\r\n      if (!txn.amt) delete txn.amt;\r\n      if (!txn.fee) delete txn.fee;\r\n      if (!txn.fv) delete txn.fv;\r\n      if (!txn.gen) delete txn.gen;\r\n      if (!txn.apid) delete txn.apid;\r\n      if (!txn.apls.nui) delete txn.apls.nui;\r\n      if (!txn.apls.nbs) delete txn.apls.nbs;\r\n      if (!txn.apls.nui && !txn.apls.nbs) delete txn.apls;\r\n      if (!txn.apgs.nui) delete txn.apgs.nui;\r\n      if (!txn.apgs.nbs) delete txn.apgs.nbs;\r\n      if (!txn.apaa || !txn.apaa.length) delete txn.apaa;\r\n      if (!txn.apgs.nui && !txn.apgs.nbs) delete txn.apgs;\r\n      if (!txn.apap) delete txn.apap;\r\n      if (!txn.apsu) delete txn.apsu;\r\n      if (!txn.apan) delete txn.apan;\r\n      if (!txn.apfa || !txn.apfa.length) delete txn.apfa;\r\n      if (!txn.apas || !txn.apas.length) delete txn.apas;\r\n      for (const box of txn.apbx) {\r\n        if (!box.i) delete box.i;\r\n        if (!box.n || !box.n.length) delete box.n;\r\n      }\r\n      if (!txn.apbx || !txn.apbx.length) delete txn.apbx;\r\n      if (!txn.apat || !txn.apat.length) delete txn.apat;\r\n      if (!txn.apep) delete txn.apep;\r\n      if (txn.grp === undefined) delete txn.grp;\r\n      return txn;\r\n    }\r\n    if (this.type === 'stpf') {\r\n      // state proof txn\r\n      const txn: EncodedTransaction = {\r\n        fee: this.fee,\r\n        fv: this.firstRound,\r\n        lv: this.lastRound,\r\n        note: Buffer.from(this.note),\r\n        snd: Buffer.from(this.from.publicKey),\r\n        type: this.type,\r\n        gen: this.genesisID,\r\n        gh: this.genesisHash,\r\n        lx: Buffer.from(this.lease),\r\n        sptype: this.stateProofType,\r\n        spmsg: Buffer.from(this.stateProofMessage),\r\n        sp: Buffer.from(this.stateProof),\r\n      };\r\n      // allowed zero values\r\n      if (!txn.sptype) delete txn.sptype;\r\n      if (!txn.note.length) delete txn.note;\r\n      if (!txn.lx.length) delete txn.lx;\r\n      if (!txn.amt) delete txn.amt;\r\n      if (!txn.fee) delete txn.fee;\r\n      if (!txn.fv) delete txn.fv;\r\n      if (!txn.gen) delete txn.gen;\r\n      if (!txn.apid) delete txn.apid;\r\n      if (!txn.apaa || !txn.apaa.length) delete txn.apaa;\r\n      if (!txn.apap) delete txn.apap;\r\n      if (!txn.apsu) delete txn.apsu;\r\n      if (!txn.apan) delete txn.apan;\r\n      if (!txn.apfa || !txn.apfa.length) delete txn.apfa;\r\n      if (!txn.apas || !txn.apas.length) delete txn.apas;\r\n      if (!txn.apat || !txn.apat.length) delete txn.apat;\r\n      if (!txn.apep) delete txn.apep;\r\n      if (txn.grp === undefined) delete txn.grp;\r\n      return txn;\r\n    }\r\n    if (this.type === 'hb') {\r\n      // heartbeat txn\r\n      const txn: EncodedTransaction = {\r\n        fee: this.fee,\r\n        fv: this.firstRound,\r\n        lv: this.lastRound,\r\n        note: Buffer.from(this.note),\r\n        snd: Buffer.from(this.from.publicKey),\r\n        type: this.type,\r\n        gen: this.genesisID,\r\n        gh: this.genesisHash,\r\n        lx: Buffer.from(this.lease),\r\n        hb: this.heartbeatFields.get_obj_for_encoding(),\r\n      };\r\n      // allowed zero values\r\n      if (!txn.note.length) delete txn.note;\r\n      if (!txn.lx.length) delete txn.lx;\r\n      if (!txn.fee) delete txn.fee;\r\n      if (!txn.gen) delete txn.gen;\r\n      if (txn.grp === undefined) delete txn.grp;\r\n      return txn;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(txnForEnc: EncodedTransaction): Transaction {\r\n    const txn = Object.create(this.prototype) as Transaction;\r\n    txn.name = 'Transaction';\r\n    txn.tag = Buffer.from('TX');\r\n\r\n    txn.genesisID = txnForEnc.gen;\r\n    txn.genesisHash = Buffer.from(txnForEnc.gh);\r\n    if (!isTransactionType(txnForEnc.type)) {\r\n      throw new Error(`Unrecognized transaction type: ${txnForEnc.type}`);\r\n    }\r\n    txn.type = txnForEnc.type;\r\n    txn.fee = txnForEnc.fee;\r\n    txn.firstRound = txnForEnc.fv;\r\n    txn.lastRound = txnForEnc.lv;\r\n    txn.note = new Uint8Array(txnForEnc.note);\r\n    txn.lease = new Uint8Array(txnForEnc.lx);\r\n    txn.from = address.decodeAddress(\r\n      address.encodeAddress(new Uint8Array(txnForEnc.snd))\r\n    );\r\n    if (txnForEnc.grp !== undefined) txn.group = Buffer.from(txnForEnc.grp);\r\n    if (txnForEnc.rekey !== undefined)\r\n      txn.reKeyTo = address.decodeAddress(\r\n        address.encodeAddress(new Uint8Array(txnForEnc.rekey))\r\n      );\r\n\r\n    if (txnForEnc.type === 'pay') {\r\n      txn.amount = txnForEnc.amt;\r\n      txn.to = address.decodeAddress(\r\n        address.encodeAddress(new Uint8Array(txnForEnc.rcv))\r\n      );\r\n      if (txnForEnc.close !== undefined)\r\n        txn.closeRemainderTo = address.decodeAddress(\r\n          address.encodeAddress(txnForEnc.close)\r\n        );\r\n    } else if (txnForEnc.type === 'keyreg') {\r\n      if (txnForEnc.votekey !== undefined) {\r\n        txn.voteKey = Buffer.from(txnForEnc.votekey);\r\n      }\r\n      if (txnForEnc.selkey !== undefined) {\r\n        txn.selectionKey = Buffer.from(txnForEnc.selkey);\r\n      }\r\n      if (txnForEnc.sprfkey !== undefined) {\r\n        txn.stateProofKey = Buffer.from(txnForEnc.sprfkey);\r\n      }\r\n      if (txnForEnc.votekd !== undefined) {\r\n        txn.voteKeyDilution = txnForEnc.votekd;\r\n      }\r\n      if (txnForEnc.votefst !== undefined) {\r\n        txn.voteFirst = txnForEnc.votefst;\r\n      }\r\n      if (txnForEnc.votelst !== undefined) {\r\n        txn.voteLast = txnForEnc.votelst;\r\n      }\r\n      if (txnForEnc.nonpart !== undefined) {\r\n        txn.nonParticipation = txnForEnc.nonpart;\r\n      }\r\n    } else if (txnForEnc.type === 'acfg') {\r\n      // asset creation, or asset reconfigure, or asset destruction\r\n      if (txnForEnc.caid !== undefined) {\r\n        txn.assetIndex = txnForEnc.caid;\r\n      }\r\n      if (txnForEnc.apar !== undefined) {\r\n        txn.assetTotal = txnForEnc.apar.t;\r\n        txn.assetDefaultFrozen = txnForEnc.apar.df;\r\n        if (txnForEnc.apar.dc !== undefined)\r\n          txn.assetDecimals = txnForEnc.apar.dc;\r\n        if (txnForEnc.apar.m !== undefined)\r\n          txn.assetManager = address.decodeAddress(\r\n            address.encodeAddress(new Uint8Array(txnForEnc.apar.m))\r\n          );\r\n        if (txnForEnc.apar.r !== undefined)\r\n          txn.assetReserve = address.decodeAddress(\r\n            address.encodeAddress(new Uint8Array(txnForEnc.apar.r))\r\n          );\r\n        if (txnForEnc.apar.f !== undefined)\r\n          txn.assetFreeze = address.decodeAddress(\r\n            address.encodeAddress(new Uint8Array(txnForEnc.apar.f))\r\n          );\r\n        if (txnForEnc.apar.c !== undefined)\r\n          txn.assetClawback = address.decodeAddress(\r\n            address.encodeAddress(new Uint8Array(txnForEnc.apar.c))\r\n          );\r\n        if (txnForEnc.apar.un !== undefined)\r\n          txn.assetUnitName = txnForEnc.apar.un;\r\n        if (txnForEnc.apar.an !== undefined) txn.assetName = txnForEnc.apar.an;\r\n        if (txnForEnc.apar.au !== undefined) txn.assetURL = txnForEnc.apar.au;\r\n        if (txnForEnc.apar.am !== undefined)\r\n          txn.assetMetadataHash = txnForEnc.apar.am;\r\n      }\r\n    } else if (txnForEnc.type === 'axfer') {\r\n      // asset transfer, acceptance, revocation, mint, or burn\r\n      if (txnForEnc.xaid !== undefined) {\r\n        txn.assetIndex = txnForEnc.xaid;\r\n      }\r\n      if (txnForEnc.aamt !== undefined) txn.amount = txnForEnc.aamt;\r\n      if (txnForEnc.aclose !== undefined) {\r\n        txn.closeRemainderTo = address.decodeAddress(\r\n          address.encodeAddress(new Uint8Array(txnForEnc.aclose))\r\n        );\r\n      }\r\n      if (txnForEnc.asnd !== undefined) {\r\n        txn.assetRevocationTarget = address.decodeAddress(\r\n          address.encodeAddress(new Uint8Array(txnForEnc.asnd))\r\n        );\r\n      }\r\n      txn.to = address.decodeAddress(\r\n        address.encodeAddress(new Uint8Array(txnForEnc.arcv))\r\n      );\r\n    } else if (txnForEnc.type === 'afrz') {\r\n      if (txnForEnc.afrz !== undefined) {\r\n        txn.freezeState = txnForEnc.afrz;\r\n      }\r\n      if (txnForEnc.faid !== undefined) {\r\n        txn.assetIndex = txnForEnc.faid;\r\n      }\r\n      txn.freezeAccount = address.decodeAddress(\r\n        address.encodeAddress(new Uint8Array(txnForEnc.fadd))\r\n      );\r\n    } else if (txnForEnc.type === 'appl') {\r\n      if (txnForEnc.apid !== undefined) {\r\n        txn.appIndex = txnForEnc.apid;\r\n      }\r\n      if (txnForEnc.apan !== undefined) {\r\n        txn.appOnComplete = txnForEnc.apan;\r\n      }\r\n      if (txnForEnc.apls !== undefined) {\r\n        if (txnForEnc.apls.nui !== undefined)\r\n          txn.appLocalInts = txnForEnc.apls.nui;\r\n        if (txnForEnc.apls.nbs !== undefined)\r\n          txn.appLocalByteSlices = txnForEnc.apls.nbs;\r\n      }\r\n      if (txnForEnc.apgs !== undefined) {\r\n        if (txnForEnc.apgs.nui !== undefined)\r\n          txn.appGlobalInts = txnForEnc.apgs.nui;\r\n        if (txnForEnc.apgs.nbs !== undefined)\r\n          txn.appGlobalByteSlices = txnForEnc.apgs.nbs;\r\n      }\r\n      if (txnForEnc.apep !== undefined) {\r\n        txn.extraPages = txnForEnc.apep;\r\n      }\r\n      if (txnForEnc.apap !== undefined) {\r\n        txn.appApprovalProgram = new Uint8Array(txnForEnc.apap);\r\n      }\r\n      if (txnForEnc.apsu !== undefined) {\r\n        txn.appClearProgram = new Uint8Array(txnForEnc.apsu);\r\n      }\r\n      if (txnForEnc.apaa !== undefined) {\r\n        txn.appArgs = txnForEnc.apaa.map((arg) => new Uint8Array(arg));\r\n      }\r\n      if (txnForEnc.apat !== undefined) {\r\n        txn.appAccounts = txnForEnc.apat.map((addressBytes) =>\r\n          address.decodeAddress(\r\n            address.encodeAddress(new Uint8Array(addressBytes))\r\n          )\r\n        );\r\n      }\r\n      if (txnForEnc.apfa !== undefined) {\r\n        txn.appForeignApps = txnForEnc.apfa;\r\n      }\r\n      if (txnForEnc.apas !== undefined) {\r\n        txn.appForeignAssets = txnForEnc.apas;\r\n      }\r\n      if (txnForEnc.apbx !== undefined) {\r\n        txn.boxes = txnForEnc.apbx.map((box) => ({\r\n          // We return 0 for the app ID so that it's guaranteed translateBoxReferences will\r\n          // translate the app index back to 0. If we instead returned the called app ID,\r\n          // translateBoxReferences would translate the app index to a nonzero value if the called\r\n          // app is also in the foreign app array.\r\n          appIndex: box.i ? txn.appForeignApps[box.i - 1] : 0,\r\n          name: box.n,\r\n        }));\r\n      }\r\n    } else if (txnForEnc.type === 'stpf') {\r\n      if (txnForEnc.sptype !== undefined) {\r\n        txn.stateProofType = txnForEnc.sptype;\r\n      }\r\n      if (txnForEnc.sp !== undefined) {\r\n        txn.stateProof = txnForEnc.sp;\r\n      }\r\n      if (txnForEnc.spmsg !== undefined) {\r\n        txn.stateProofMessage = txnForEnc.spmsg;\r\n      }\r\n    } else if (txnForEnc.type === 'hb') {\r\n      if (txnForEnc.hb !== undefined) {\r\n        txn.heartbeatFields = HeartbeatFields.from_obj_for_encoding(\r\n          txnForEnc.hb\r\n        );\r\n      }\r\n    }\r\n    return txn;\r\n  }\r\n\r\n  estimateSize() {\r\n    return this.toByte().length + NUM_ADDL_BYTES_AFTER_SIGNING;\r\n  }\r\n\r\n  bytesToSign() {\r\n    const encodedMsg = this.toByte();\r\n    return Buffer.from(utils.concatArrays(this.tag, encodedMsg));\r\n  }\r\n\r\n  toByte() {\r\n    return encoding.encode(this.get_obj_for_encoding());\r\n  }\r\n\r\n  // returns the raw signature\r\n  rawSignTxn(sk: Uint8Array) {\r\n    const toBeSigned = this.bytesToSign();\r\n    const sig = nacl.sign(toBeSigned, sk);\r\n    return Buffer.from(sig);\r\n  }\r\n\r\n  signTxn(sk: Uint8Array) {\r\n    // construct signed message\r\n    const sTxn: EncodedSignedTransaction = {\r\n      sig: this.rawSignTxn(sk),\r\n      txn: this.get_obj_for_encoding(),\r\n    };\r\n    // add AuthAddr if signing with a different key than From indicates\r\n    const keypair = nacl.keyPairFromSecretKey(sk);\r\n    const pubKeyFromSk = keypair.publicKey;\r\n    if (\r\n      address.encodeAddress(pubKeyFromSk) !==\r\n      address.encodeAddress(this.from.publicKey)\r\n    ) {\r\n      sTxn.sgnr = Buffer.from(pubKeyFromSk);\r\n    }\r\n    return new Uint8Array(encoding.encode(sTxn));\r\n  }\r\n\r\n  attachSignature(signerAddr: string, signature: Uint8Array) {\r\n    if (!nacl.isValidSignatureLength(signature.length)) {\r\n      throw new Error('Invalid signature length');\r\n    }\r\n    const sTxn: EncodedSignedTransaction = {\r\n      sig: Buffer.from(signature),\r\n      txn: this.get_obj_for_encoding(),\r\n    };\r\n    // add AuthAddr if signing with a different key than From indicates\r\n    if (signerAddr !== address.encodeAddress(this.from.publicKey)) {\r\n      const signerPublicKey = address.decodeAddress(signerAddr).publicKey;\r\n      sTxn.sgnr = Buffer.from(signerPublicKey);\r\n    }\r\n    return new Uint8Array(encoding.encode(sTxn));\r\n  }\r\n\r\n  rawTxID() {\r\n    const enMsg = this.toByte();\r\n    const gh = Buffer.from(utils.concatArrays(this.tag, enMsg));\r\n    return Buffer.from(nacl.genericHash(gh));\r\n  }\r\n\r\n  txID() {\r\n    const hash = this.rawTxID();\r\n    return base32.encode(hash).slice(0, ALGORAND_TRANSACTION_LENGTH);\r\n  }\r\n\r\n  // add a lease to a transaction not yet having\r\n  // supply feePerByte to increment fee accordingly\r\n  addLease(lease: Uint8Array, feePerByte = 0) {\r\n    let mutableLease: Uint8Array;\r\n\r\n    if (lease !== undefined) {\r\n      if (lease.constructor !== Uint8Array)\r\n        throw Error('lease must be a Uint8Array.');\r\n      if (lease.length !== ALGORAND_TRANSACTION_LEASE_LENGTH)\r\n        throw Error(\r\n          `lease must be of length ${ALGORAND_TRANSACTION_LEASE_LENGTH.toString()}.`\r\n        );\r\n\r\n      mutableLease = new Uint8Array(lease);\r\n    } else {\r\n      mutableLease = new Uint8Array(0);\r\n    }\r\n    this.lease = mutableLease;\r\n    if (feePerByte !== 0) {\r\n      this.fee +=\r\n        (ALGORAND_TRANSACTION_LEASE_LABEL_LENGTH +\r\n          ALGORAND_TRANSACTION_LEASE_LENGTH) *\r\n        feePerByte;\r\n    }\r\n  }\r\n\r\n  // add the rekey-to field to a transaction not yet having it\r\n  // supply feePerByte to increment fee accordingly\r\n  addRekey(reKeyTo: string, feePerByte = 0) {\r\n    if (reKeyTo !== undefined) {\r\n      this.reKeyTo = address.decodeAddress(reKeyTo);\r\n    }\r\n    if (feePerByte !== 0) {\r\n      this.fee +=\r\n        (ALGORAND_TRANSACTION_REKEY_LABEL_LENGTH +\r\n          ALGORAND_TRANSACTION_ADDRESS_LENGTH) *\r\n        feePerByte;\r\n    }\r\n  }\r\n\r\n  // build display dict for prettyPrint and toString\r\n  // eslint-disable-next-line no-underscore-dangle\r\n  _getDictForDisplay() {\r\n    const forPrinting: TransactionStorageStructure & Record<string, any> = {\r\n      ...this,\r\n    };\r\n    forPrinting.tag = forPrinting.tag.toString();\r\n    forPrinting.from = address.encodeAddress(\r\n      (forPrinting.from as Address).publicKey\r\n    );\r\n    if (forPrinting.to !== undefined)\r\n      forPrinting.to = address.encodeAddress(\r\n        (forPrinting.to as Address).publicKey\r\n      );\r\n    // things that need fixing:\r\n    if (forPrinting.freezeAccount !== undefined)\r\n      forPrinting.freezeAccount = address.encodeAddress(\r\n        (forPrinting.freezeAccount as Address).publicKey\r\n      );\r\n    if (forPrinting.closeRemainderTo !== undefined)\r\n      forPrinting.closeRemainderTo = address.encodeAddress(\r\n        (forPrinting.closeRemainderTo as Address).publicKey\r\n      );\r\n    if (forPrinting.assetManager !== undefined)\r\n      forPrinting.assetManager = address.encodeAddress(\r\n        (forPrinting.assetManager as Address).publicKey\r\n      );\r\n    if (forPrinting.assetReserve !== undefined)\r\n      forPrinting.assetReserve = address.encodeAddress(\r\n        (forPrinting.assetReserve as Address).publicKey\r\n      );\r\n    if (forPrinting.assetFreeze !== undefined)\r\n      forPrinting.assetFreeze = address.encodeAddress(\r\n        (forPrinting.assetFreeze as Address).publicKey\r\n      );\r\n    if (forPrinting.assetClawback !== undefined)\r\n      forPrinting.assetClawback = address.encodeAddress(\r\n        (forPrinting.assetClawback as Address).publicKey\r\n      );\r\n    if (forPrinting.assetRevocationTarget !== undefined)\r\n      forPrinting.assetRevocationTarget = address.encodeAddress(\r\n        (forPrinting.assetRevocationTarget as Address).publicKey\r\n      );\r\n    if (forPrinting.reKeyTo !== undefined)\r\n      forPrinting.reKeyTo = address.encodeAddress(\r\n        (forPrinting.reKeyTo as Address).publicKey\r\n      );\r\n    forPrinting.genesisHash = forPrinting.genesisHash.toString('base64');\r\n    return forPrinting;\r\n  }\r\n\r\n  // pretty print the transaction to console\r\n  prettyPrint() {\r\n    // eslint-disable-next-line no-underscore-dangle,no-console\r\n    console.log(this._getDictForDisplay());\r\n  }\r\n\r\n  // get string representation\r\n  toString() {\r\n    // eslint-disable-next-line no-underscore-dangle\r\n    return JSON.stringify(this._getDictForDisplay());\r\n  }\r\n}\r\n\r\n/**\r\n * encodeUnsignedSimulateTransaction takes a txnBuilder.Transaction object,\r\n * converts it into a SignedTransaction-like object, and converts it to a Buffer.\r\n *\r\n * Note: this function should only be used to simulate unsigned transactions.\r\n *\r\n * @param transactionObject - Transaction object to simulate.\r\n */\r\nexport function encodeUnsignedSimulateTransaction(\r\n  transactionObject: Transaction\r\n) {\r\n  const objToEncode: EncodedSignedTransaction = {\r\n    txn: transactionObject.get_obj_for_encoding(),\r\n  };\r\n  return encoding.encode(objToEncode);\r\n}\r\n\r\n/**\r\n * encodeUnsignedTransaction takes a completed txnBuilder.Transaction object, such as from the makeFoo\r\n * family of transactions, and converts it to a Buffer\r\n * @param transactionObject - the completed Transaction object\r\n */\r\nexport function encodeUnsignedTransaction(transactionObject: Transaction) {\r\n  const objToEncode = transactionObject.get_obj_for_encoding();\r\n  return encoding.encode(objToEncode);\r\n}\r\n\r\n/**\r\n * decodeUnsignedTransaction takes a Buffer (as if from encodeUnsignedTransaction) and converts it to a txnBuilder.Transaction object\r\n * @param transactionBuffer - the Uint8Array containing a transaction\r\n */\r\nexport function decodeUnsignedTransaction(\r\n  transactionBuffer: ArrayLike<number>\r\n) {\r\n  const partlyDecodedObject = encoding.decode(\r\n    transactionBuffer\r\n  ) as EncodedTransaction;\r\n  return Transaction.from_obj_for_encoding(partlyDecodedObject);\r\n}\r\n\r\n/**\r\n * Object representing a transaction with a signature\r\n */\r\nexport interface SignedTransaction {\r\n  /**\r\n   * Transaction signature\r\n   */\r\n  sig?: Buffer;\r\n\r\n  /**\r\n   * The transaction that was signed\r\n   */\r\n  txn: Transaction;\r\n\r\n  /**\r\n   * Multisig structure\r\n   */\r\n  msig?: EncodedMultisig;\r\n\r\n  /**\r\n   * Logic signature\r\n   */\r\n  lsig?: EncodedLogicSig;\r\n\r\n  /**\r\n   * The signer, if signing with a different key than the Transaction type `from` property indicates\r\n   */\r\n  sgnr?: Buffer;\r\n}\r\n\r\n/**\r\n * decodeSignedTransaction takes a Buffer (from transaction.signTxn) and converts it to an object\r\n * containing the Transaction (txn), the signature (sig), and the auth-addr field if applicable (sgnr)\r\n * @param transactionBuffer - the Uint8Array containing a transaction\r\n * @returns containing a Transaction, the signature, and possibly an auth-addr field\r\n */\r\nexport function decodeSignedTransaction(\r\n  transactionBuffer: Uint8Array\r\n): SignedTransaction {\r\n  const stxnDecoded = encoding.decode(\r\n    transactionBuffer\r\n  ) as EncodedSignedTransaction;\r\n  const stxn: SignedTransaction = {\r\n    ...stxnDecoded,\r\n    txn: Transaction.from_obj_for_encoding(stxnDecoded.txn),\r\n  };\r\n  return stxn;\r\n}\r\n\r\n/**\r\n * Either a valid transaction object or an instance of the Transaction class\r\n */\r\nexport type TransactionLike = AnyTransaction | Transaction;\r\n\r\nexport function instantiateTxnIfNeeded(transactionLike: TransactionLike) {\r\n  return transactionLike instanceof Transaction\r\n    ? transactionLike\r\n    : new Transaction(transactionLike);\r\n}\r\n\r\nexport default Transaction;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
class SignTxnsError extends Error {
    code;
    data;
    constructor(message, code, data) {
        super(message);
        this.name = "SignTxnsError";
        this.code = code;
        this.data = data;
    }
}
var ScopeType;
(function (ScopeType) {
    ScopeType[ScopeType["UNKNOWN"] = -1] = "UNKNOWN";
    ScopeType[ScopeType["AUTH"] = 1] = "AUTH";
})(ScopeType || (ScopeType = {}));
class SignDataError extends Error {
    code;
    data;
    constructor(message, code, data) {
        super(message);
        this.name = "SignDataError";
        this.code = code;
        this.data = data;
    }
}
const left = 100 + window.screenX;
const top = 100 + window.screenY;
const PARAMS = `width=500,height=750,left=${left},top=${top}`;
const BASE_URL = "https://lute.app";
const EXT_ID = "kiaoohollfkjhikdifohdckeidckokjh";
class LuteConnect {
    siteName;
    forceWeb = false;
    constructor(siteName) {
        this.siteName = siteName || document.title || "Unknown site";
    }
    connect(genesisID) {
        return new Promise(async (resolve, reject) => {
            const useExt = this.forceWeb ? false : window.lute;
            let win;
            if (useExt) {
                window.dispatchEvent(new CustomEvent("lute-connect", {
                    detail: { action: "connect", genesisID },
                }));
            }
            else {
                win = open(`${BASE_URL}/connect`, this.siteName, PARAMS);
            }
            const type = useExt ? "connect-response" : "message";
            window.addEventListener(type, messageHandler);
            function messageHandler(event) {
                if (!useExt && event.origin !== BASE_URL)
                    return;
                const data = event.data || event.detail;
                if (data.debug)
                    console.log("[Lute Debug]", data);
                switch (data.action) {
                    case "ready":
                        win?.postMessage({ action: "network", genesisID }, "*");
                        break;
                    case "connect":
                        window.removeEventListener(type, messageHandler);
                        resolve(data.addrs);
                        break;
                    case "error":
                        window.removeEventListener(type, messageHandler);
                        reject(new Error(data.message));
                        break;
                    case "close":
                        window.removeEventListener(type, messageHandler);
                        reject(new Error("Operation Cancelled"));
                        break;
                }
            }
        });
    }
    signTxns(txns) {
        return new Promise(async (resolve, reject) => {
            const useExt = this.forceWeb ? false : window.lute;
            let win;
            if (useExt) {
                window.dispatchEvent(new CustomEvent("lute-connect", {
                    detail: { action: "sign", txns },
                }));
            }
            else {
                win = open(`${BASE_URL}/sign`, this.siteName, PARAMS);
            }
            const type = useExt ? "sign-txns-response" : "message";
            window.addEventListener(type, messageHandler);
            function messageHandler(event) {
                if (!useExt && event.origin !== BASE_URL)
                    return;
                const detail = event.data || event.detail;
                if (detail.debug)
                    console.log("[Lute Debug]", detail);
                switch (detail.action) {
                    case "ready":
                        win?.postMessage({ action: "sign", txns }, "*");
                        break;
                    case "signed":
                        window.removeEventListener(type, messageHandler);
                        resolve(detail.txns);
                        break;
                    case "error":
                        window.removeEventListener(type, messageHandler);
                        reject(new SignTxnsError(detail.message, detail.code || 4300));
                        break;
                    case "close":
                        window.removeEventListener(type, messageHandler);
                        reject(new SignTxnsError("User Rejected Request", 4100));
                        break;
                }
            }
        });
    }
    signData(data, metadata) {
        return new Promise(async (resolve, reject) => {
            const useExt = this.forceWeb ? false : window.lute;
            let win;
            if (useExt) {
                window.dispatchEvent(new CustomEvent("lute-connect", {
                    detail: { action: "data", data, metadata },
                }));
            }
            else {
                win = open(`${BASE_URL}/auth`, this.siteName, PARAMS);
            }
            const type = useExt ? "sign-data-response" : "message";
            window.addEventListener(type, messageHandler);
            function messageHandler(event) {
                if (!useExt && event.origin !== BASE_URL)
                    return;
                const detail = event.data || event.detail;
                if (detail.debug)
                    console.log("[Lute Debug]", detail);
                switch (detail.action) {
                    case "ready":
                        win?.postMessage({ action: "data", data, metadata }, "*");
                        break;
                    case "signed":
                        window.removeEventListener(type, messageHandler);
                        resolve(detail.signerResponse);
                        break;
                    case "error":
                        window.removeEventListener(type, messageHandler);
                        reject(new SignDataError(detail.message, detail.code || 4300));
                        break;
                    case "close":
                        window.removeEventListener(type, messageHandler);
                        reject(new SignDataError("User Rejected Request", 4100));
                        break;
                }
            }
        });
    }
}

export { BASE_URL, EXT_ID, ScopeType, SignDataError, SignTxnsError, LuteConnect as default };

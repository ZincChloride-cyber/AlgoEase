{"ast":null,"code":"export var ABITransactionType;\n(function (ABITransactionType) {\n  /**\r\n   * Any transaction type\r\n   */\n  ABITransactionType[\"any\"] = \"txn\";\n  /**\r\n   * Payment transaction type\r\n   */\n  ABITransactionType[\"pay\"] = \"pay\";\n  /**\r\n   * Key registration transaction type\r\n   */\n  ABITransactionType[\"keyreg\"] = \"keyreg\";\n  /**\r\n   * Asset configuration transaction type\r\n   */\n  ABITransactionType[\"acfg\"] = \"acfg\";\n  /**\r\n   * Asset transfer transaction type\r\n   */\n  ABITransactionType[\"axfer\"] = \"axfer\";\n  /**\r\n   * Asset freeze transaction type\r\n   */\n  ABITransactionType[\"afrz\"] = \"afrz\";\n  /**\r\n   * Application transaction type\r\n   */\n  ABITransactionType[\"appl\"] = \"appl\";\n})(ABITransactionType || (ABITransactionType = {}));\nexport function abiTypeIsTransaction(type) {\n  return type === ABITransactionType.any || type === ABITransactionType.pay || type === ABITransactionType.keyreg || type === ABITransactionType.acfg || type === ABITransactionType.axfer || type === ABITransactionType.afrz || type === ABITransactionType.appl;\n}\nexport function abiCheckTransactionType(type, txn) {\n  if (type === ABITransactionType.any) {\n    return true;\n  }\n  return txn.type && txn.type.toString() === type.toString();\n}","map":{"version":3,"names":["ABITransactionType","abiTypeIsTransaction","type","any","pay","keyreg","acfg","axfer","afrz","appl","abiCheckTransactionType","txn","toString"],"sources":["C:\\Users\\Aditya singh\\AlgoEase\\frontend\\node_modules\\algosdk\\src\\abi\\transaction.ts"],"sourcesContent":["import { Transaction } from '../transaction';\r\n\r\nexport enum ABITransactionType {\r\n  /**\r\n   * Any transaction type\r\n   */\r\n  any = 'txn',\r\n\r\n  /**\r\n   * Payment transaction type\r\n   */\r\n  pay = 'pay',\r\n\r\n  /**\r\n   * Key registration transaction type\r\n   */\r\n  keyreg = 'keyreg',\r\n\r\n  /**\r\n   * Asset configuration transaction type\r\n   */\r\n  acfg = 'acfg',\r\n\r\n  /**\r\n   * Asset transfer transaction type\r\n   */\r\n  axfer = 'axfer',\r\n\r\n  /**\r\n   * Asset freeze transaction type\r\n   */\r\n  afrz = 'afrz',\r\n\r\n  /**\r\n   * Application transaction type\r\n   */\r\n  appl = 'appl',\r\n}\r\n\r\nexport function abiTypeIsTransaction(type: any): type is ABITransactionType {\r\n  return (\r\n    type === ABITransactionType.any ||\r\n    type === ABITransactionType.pay ||\r\n    type === ABITransactionType.keyreg ||\r\n    type === ABITransactionType.acfg ||\r\n    type === ABITransactionType.axfer ||\r\n    type === ABITransactionType.afrz ||\r\n    type === ABITransactionType.appl\r\n  );\r\n}\r\n\r\nexport function abiCheckTransactionType(\r\n  type: ABITransactionType,\r\n  txn: Transaction\r\n): boolean {\r\n  if (type === ABITransactionType.any) {\r\n    return true;\r\n  }\r\n\r\n  return txn.type && txn.type.toString() === type.toString();\r\n}\r\n"],"mappings":"AAEA,WAAYA,kBAmCX;AAnCD,WAAYA,kBAAkB;EAC5B;;;EAGAA,kBAAA,eAAW;EAEX;;;EAGAA,kBAAA,eAAW;EAEX;;;EAGAA,kBAAA,qBAAiB;EAEjB;;;EAGAA,kBAAA,iBAAa;EAEb;;;EAGAA,kBAAA,mBAAe;EAEf;;;EAGAA,kBAAA,iBAAa;EAEb;;;EAGAA,kBAAA,iBAAa;AACf,CAAC,EAnCWA,kBAAkB,KAAlBA,kBAAkB;AAqC9B,OAAM,SAAUC,oBAAoBA,CAACC,IAAS;EAC5C,OACEA,IAAI,KAAKF,kBAAkB,CAACG,GAAG,IAC/BD,IAAI,KAAKF,kBAAkB,CAACI,GAAG,IAC/BF,IAAI,KAAKF,kBAAkB,CAACK,MAAM,IAClCH,IAAI,KAAKF,kBAAkB,CAACM,IAAI,IAChCJ,IAAI,KAAKF,kBAAkB,CAACO,KAAK,IACjCL,IAAI,KAAKF,kBAAkB,CAACQ,IAAI,IAChCN,IAAI,KAAKF,kBAAkB,CAACS,IAAI;AAEpC;AAEA,OAAM,SAAUC,uBAAuBA,CACrCR,IAAwB,EACxBS,GAAgB;EAEhB,IAAIT,IAAI,KAAKF,kBAAkB,CAACG,GAAG,EAAE;IACnC,OAAO,IAAI;;EAGb,OAAOQ,GAAG,CAACT,IAAI,IAAIS,GAAG,CAACT,IAAI,CAACU,QAAQ,EAAE,KAAKV,IAAI,CAACU,QAAQ,EAAE;AAC5D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { Buffer } from 'buffer';\nimport * as encoding from '../../../encoding/encoding';\nimport JSONRequest from '../jsonrequest';\nimport { SimulateResponse } from './models/types';\n/**\r\n * Sets the default header (if not previously set) for simulating a raw\r\n * transaction.\r\n * @param headers - A headers object\r\n */\nexport function setSimulateTransactionsHeaders(headers = {}) {\n  let hdrs = headers;\n  if (Object.keys(hdrs).every(key => key.toLowerCase() !== 'content-type')) {\n    hdrs = {\n      ...headers\n    };\n    hdrs['Content-Type'] = 'application/msgpack';\n  }\n  return hdrs;\n}\n/**\r\n * Simulates signed txns.\r\n */\nexport default class SimulateRawTransactions extends JSONRequest {\n  constructor(c, request) {\n    super(c);\n    this.query.format = 'msgpack';\n    this.requestBytes = encoding.rawEncode(request.get_obj_for_encoding(true));\n  }\n  // eslint-disable-next-line class-methods-use-this\n  path() {\n    return '/v2/transactions/simulate';\n  }\n  async do(headers = {}) {\n    const txHeaders = setSimulateTransactionsHeaders(headers);\n    const res = await this.c.post(this.path(), Buffer.from(this.requestBytes), txHeaders, this.query, false);\n    return this.prepare(res.body);\n  }\n  // eslint-disable-next-line class-methods-use-this\n  prepare(body) {\n    const decoded = encoding.decode(body);\n    return SimulateResponse.from_obj_for_encoding(decoded);\n  }\n}","map":{"version":3,"names":["Buffer","encoding","JSONRequest","SimulateResponse","setSimulateTransactionsHeaders","headers","hdrs","Object","keys","every","key","toLowerCase","SimulateRawTransactions","constructor","c","request","query","format","requestBytes","rawEncode","get_obj_for_encoding","path","do","txHeaders","res","post","from","prepare","body","decoded","decode","from_obj_for_encoding"],"sources":["C:\\Users\\Aditya singh\\AlgoEase\\frontend\\node_modules\\algosdk\\src\\client\\v2\\algod\\simulateTransaction.ts"],"sourcesContent":["import { Buffer } from 'buffer';\r\nimport * as encoding from '../../../encoding/encoding';\r\nimport HTTPClient from '../../client';\r\nimport JSONRequest from '../jsonrequest';\r\nimport { SimulateRequest, SimulateResponse } from './models/types';\r\n\r\n/**\r\n * Sets the default header (if not previously set) for simulating a raw\r\n * transaction.\r\n * @param headers - A headers object\r\n */\r\nexport function setSimulateTransactionsHeaders(headers = {}) {\r\n  let hdrs = headers;\r\n  if (Object.keys(hdrs).every((key) => key.toLowerCase() !== 'content-type')) {\r\n    hdrs = { ...headers };\r\n    hdrs['Content-Type'] = 'application/msgpack';\r\n  }\r\n  return hdrs;\r\n}\r\n\r\n/**\r\n * Simulates signed txns.\r\n */\r\nexport default class SimulateRawTransactions extends JSONRequest<\r\n  SimulateResponse,\r\n  Uint8Array\r\n> {\r\n  private requestBytes: Uint8Array;\r\n\r\n  constructor(c: HTTPClient, request: SimulateRequest) {\r\n    super(c);\r\n    this.query.format = 'msgpack';\r\n    this.requestBytes = encoding.rawEncode(request.get_obj_for_encoding(true));\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  path() {\r\n    return '/v2/transactions/simulate';\r\n  }\r\n\r\n  async do(headers = {}) {\r\n    const txHeaders = setSimulateTransactionsHeaders(headers);\r\n    const res = await this.c.post(\r\n      this.path(),\r\n      Buffer.from(this.requestBytes),\r\n      txHeaders,\r\n      this.query,\r\n      false\r\n    );\r\n    return this.prepare(res.body);\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  prepare(body: Uint8Array): SimulateResponse {\r\n    const decoded = encoding.decode(body);\r\n    return SimulateResponse.from_obj_for_encoding(decoded);\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,OAAO,KAAKC,QAAQ,MAAM,4BAA4B;AAEtD,OAAOC,WAAW,MAAM,gBAAgB;AACxC,SAA0BC,gBAAgB,QAAQ,gBAAgB;AAElE;;;;;AAKA,OAAM,SAAUC,8BAA8BA,CAACC,OAAO,GAAG,EAAE;EACzD,IAAIC,IAAI,GAAGD,OAAO;EAClB,IAAIE,MAAM,CAACC,IAAI,CAACF,IAAI,CAAC,CAACG,KAAK,CAAEC,GAAG,IAAKA,GAAG,CAACC,WAAW,EAAE,KAAK,cAAc,CAAC,EAAE;IAC1EL,IAAI,GAAG;MAAE,GAAGD;IAAO,CAAE;IACrBC,IAAI,CAAC,cAAc,CAAC,GAAG,qBAAqB;;EAE9C,OAAOA,IAAI;AACb;AAEA;;;AAGA,eAAc,MAAOM,uBAAwB,SAAQV,WAGpD;EAGCW,YAAYC,CAAa,EAAEC,OAAwB;IACjD,KAAK,CAACD,CAAC,CAAC;IACR,IAAI,CAACE,KAAK,CAACC,MAAM,GAAG,SAAS;IAC7B,IAAI,CAACC,YAAY,GAAGjB,QAAQ,CAACkB,SAAS,CAACJ,OAAO,CAACK,oBAAoB,CAAC,IAAI,CAAC,CAAC;EAC5E;EAEA;EACAC,IAAIA,CAAA;IACF,OAAO,2BAA2B;EACpC;EAEA,MAAMC,EAAEA,CAACjB,OAAO,GAAG,EAAE;IACnB,MAAMkB,SAAS,GAAGnB,8BAA8B,CAACC,OAAO,CAAC;IACzD,MAAMmB,GAAG,GAAG,MAAM,IAAI,CAACV,CAAC,CAACW,IAAI,CAC3B,IAAI,CAACJ,IAAI,EAAE,EACXrB,MAAM,CAAC0B,IAAI,CAAC,IAAI,CAACR,YAAY,CAAC,EAC9BK,SAAS,EACT,IAAI,CAACP,KAAK,EACV,KAAK,CACN;IACD,OAAO,IAAI,CAACW,OAAO,CAACH,GAAG,CAACI,IAAI,CAAC;EAC/B;EAEA;EACAD,OAAOA,CAACC,IAAgB;IACtB,MAAMC,OAAO,GAAG5B,QAAQ,CAAC6B,MAAM,CAACF,IAAI,CAAC;IACrC,OAAOzB,gBAAgB,CAAC4B,qBAAqB,CAACF,OAAO,CAAC;EACxD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as txnBuilder from './transaction';\nimport { OnApplicationComplete } from './types/transactions/base';\nimport {\n// Utilities\nTransactionType } from './types/transactions';\n/**\r\n * makePaymentTxnWithSuggestedParams takes payment arguments and returns a Transaction object\r\n * @param from - string representation of Algorand address of sender\r\n * @param to - string representation of Algorand address of recipient\r\n * @param amount - integer amount to send, in microAlgos\r\n * @param closeRemainderTo - optionally close out remaining account balance to this account, represented as string rep of Algorand address\r\n * @param note - uint8array of arbitrary data for sender to store\r\n * @param suggestedParams - a dict holding common-to-all-txns args:\r\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\r\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\r\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\r\n * firstRound - integer first protocol round on which this txn is valid\r\n * lastRound - integer last protocol round on which this txn is valid\r\n * genesisHash - string specifies hash genesis block of network in use\r\n * genesisID - string specifies genesis ID of network in use\r\n * @param rekeyTo - rekeyTo address, optional\r\n *\r\n * @deprecated This function will be removed in v3 in favor of {@link makePaymentTxnWithSuggestedParamsFromObject}\r\n */\nexport function makePaymentTxnWithSuggestedParams(from, to, amount, closeRemainderTo, note, suggestedParams, rekeyTo) {\n  const o = {\n    from,\n    to,\n    amount,\n    closeRemainderTo,\n    note,\n    suggestedParams,\n    type: TransactionType.pay,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makePaymentTxnWithSuggestedParams, instead accepting an arguments object\nexport function makePaymentTxnWithSuggestedParamsFromObject(o) {\n  return makePaymentTxnWithSuggestedParams(o.from, o.to, o.amount, o.closeRemainderTo, o.note, o.suggestedParams, o.rekeyTo);\n}\nexport function makeKeyRegistrationTxnWithSuggestedParams(from, note, voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution, suggestedParams, rekeyTo, nonParticipation = false, stateProofKey = undefined) {\n  const o = {\n    from,\n    note,\n    voteKey,\n    selectionKey,\n    voteFirst,\n    voteLast,\n    voteKeyDilution,\n    suggestedParams,\n    type: TransactionType.keyreg,\n    reKeyTo: rekeyTo,\n    nonParticipation,\n    stateProofKey\n  };\n  return new txnBuilder.Transaction(o);\n}\nexport function makeKeyRegistrationTxnWithSuggestedParamsFromObject(o) {\n  return makeKeyRegistrationTxnWithSuggestedParams(o.from, o.note, o.voteKey, o.selectionKey, o.voteFirst, o.voteLast, o.voteKeyDilution, o.suggestedParams, o.rekeyTo, o.nonParticipation, o.stateProofKey);\n}\n/** makeAssetCreateTxnWithSuggestedParams takes asset creation arguments and returns a Transaction object\r\n * for creating that asset\r\n *\r\n * @param from - string representation of Algorand address of sender\r\n * @param note - uint8array of arbitrary data for sender to store\r\n * @param total - integer total supply of the asset\r\n * @param decimals - integer number of decimals for asset unit calculation\r\n * @param defaultFrozen - boolean whether asset accounts should default to being frozen\r\n * @param manager - string representation of Algorand address in charge of reserve, freeze, clawback, destruction, etc\r\n * @param reserve - string representation of Algorand address representing asset reserve\r\n * @param freeze - string representation of Algorand address with power to freeze/unfreeze asset holdings\r\n * @param clawback - string representation of Algorand address with power to revoke asset holdings\r\n * @param unitName - string units name for this asset\r\n * @param assetName - string name for this asset\r\n * @param assetURL - string URL relating to this asset\r\n * @param assetMetadataHash - Uint8Array or UTF-8 string representation of a hash commitment with respect to the asset. Must be exactly 32 bytes long.\r\n * @param suggestedParams - a dict holding common-to-all-txns args:\r\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\r\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\r\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\r\n * firstRound - integer first protocol round on which this txn is valid\r\n * lastRound - integer last protocol round on which this txn is valid\r\n * genesisHash - string specifies hash genesis block of network in use\r\n * genesisID - string specifies genesis ID of network in use\r\n * @param rekeyTo - rekeyTo address, optional\r\n *\r\n * @deprecated This function will be removed in v3 in favor of {@link makeAssetCreateTxnWithSuggestedParamsFromObject}\r\n */\nexport function makeAssetCreateTxnWithSuggestedParams(from, note, total, decimals, defaultFrozen, manager, reserve, freeze, clawback, unitName, assetName, assetURL, assetMetadataHash, suggestedParams, rekeyTo) {\n  const o = {\n    from,\n    note,\n    suggestedParams,\n    assetTotal: total,\n    assetDecimals: decimals,\n    assetDefaultFrozen: defaultFrozen,\n    assetUnitName: unitName,\n    assetName,\n    assetURL,\n    assetMetadataHash,\n    assetManager: manager,\n    assetReserve: reserve,\n    assetFreeze: freeze,\n    assetClawback: clawback,\n    type: TransactionType.acfg,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeAssetCreateTxnWithSuggestedParams, instead accepting an arguments object\nexport function makeAssetCreateTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetCreateTxnWithSuggestedParams(o.from, o.note, o.total, o.decimals, o.defaultFrozen, o.manager, o.reserve, o.freeze, o.clawback, o.unitName, o.assetName, o.assetURL, o.assetMetadataHash, o.suggestedParams, o.rekeyTo);\n}\n/** makeAssetConfigTxnWithSuggestedParams can be issued by the asset manager to change the manager, reserve, freeze, or clawback\r\n * you must respecify existing addresses to keep them the same; leaving a field blank is the same as turning\r\n * that feature off for this asset\r\n *\r\n * @param from - string representation of Algorand address of sender\r\n * @param note - uint8array of arbitrary data for sender to store\r\n * @param assetIndex - int asset index uniquely specifying the asset\r\n * @param manager - string representation of new asset manager Algorand address\r\n * @param reserve - string representation of new reserve Algorand address\r\n * @param freeze - string representation of new freeze manager Algorand address\r\n * @param clawback - string representation of new revocation manager Algorand address\r\n * @param strictEmptyAddressChecking - boolean - throw an error if any of manager, reserve, freeze, or clawback are undefined. optional, defaults to true.\r\n * @param suggestedParams - a dict holding common-to-all-txns args:\r\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\r\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\r\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\r\n * firstRound - integer first protocol round on which this txn is valid\r\n * lastRound - integer last protocol round on which this txn is valid\r\n * genesisHash - string specifies hash genesis block of network in use\r\n * genesisID - string specifies genesis ID of network in use\r\n * @param rekeyTo - rekeyTo address, optional\r\n *\r\n * @deprecated This function will be removed in v3 in favor of {@link makeAssetConfigTxnWithSuggestedParamsFromObject}\r\n */\nexport function makeAssetConfigTxnWithSuggestedParams(from, note, assetIndex, manager, reserve, freeze, clawback, suggestedParams, strictEmptyAddressChecking = true, rekeyTo) {\n  if (strictEmptyAddressChecking && (manager === undefined || reserve === undefined || freeze === undefined || clawback === undefined)) {\n    throw Error('strict empty address checking was turned on, but at least one empty address was provided');\n  }\n  const o = {\n    from,\n    suggestedParams,\n    assetIndex,\n    assetManager: manager,\n    assetReserve: reserve,\n    assetFreeze: freeze,\n    assetClawback: clawback,\n    type: TransactionType.acfg,\n    note,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeAssetConfigTxnWithSuggestedParams, instead accepting an arguments object\nexport function makeAssetConfigTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetConfigTxnWithSuggestedParams(o.from, o.note, o.assetIndex, o.manager, o.reserve, o.freeze, o.clawback, o.suggestedParams, o.strictEmptyAddressChecking, o.rekeyTo);\n}\n/** makeAssetDestroyTxnWithSuggestedParams will allow the asset's manager to remove this asset from the ledger, so long\r\n * as all outstanding assets are held by the creator.\r\n *\r\n * @param from - string representation of Algorand address of sender\r\n * @param note - uint8array of arbitrary data for sender to store\r\n * @param assetIndex - int asset index uniquely specifying the asset\r\n * @param suggestedParams - a dict holding common-to-all-txns args:\r\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\r\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\r\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\r\n * firstRound - integer first protocol round on which this txn is valid\r\n * lastRound - integer last protocol round on which this txn is valid\r\n * genesisHash - string specifies hash genesis block of network in use\r\n * genesisID - string specifies genesis ID of network in use\r\n * @param rekeyTo - rekeyTo address, optional\r\n *\r\n * @deprecated This function will be removed in v3 in favor of {@link makeAssetDestroyTxnWithSuggestedParamsFromObject}\r\n */\nexport function makeAssetDestroyTxnWithSuggestedParams(from, note, assetIndex, suggestedParams, rekeyTo) {\n  const o = {\n    from,\n    suggestedParams,\n    assetIndex,\n    type: TransactionType.acfg,\n    note,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeAssetDestroyTxnWithSuggestedParams, instead accepting an arguments object\nexport function makeAssetDestroyTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetDestroyTxnWithSuggestedParams(o.from, o.note, o.assetIndex, o.suggestedParams, o.rekeyTo);\n}\n/** makeAssetFreezeTxnWithSuggestedParams will allow the asset's freeze manager to freeze or un-freeze an account,\r\n * blocking or allowing asset transfers to and from the targeted account.\r\n *\r\n * @param from - string representation of Algorand address of sender\r\n * @param note - uint8array of arbitrary data for sender to store\r\n * @param assetIndex - int asset index uniquely specifying the asset\r\n * @param freezeTarget - string representation of Algorand address being frozen or unfrozen\r\n * @param freezeState - true if freezeTarget should be frozen, false if freezeTarget should be allowed to transact\r\n * @param suggestedParams - a dict holding common-to-all-txns args:\r\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\r\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\r\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\r\n * firstRound - integer first protocol round on which this txn is valid\r\n * lastRound - integer last protocol round on which this txn is valid\r\n * genesisHash - string specifies hash genesis block of network in use\r\n * genesisID - string specifies genesis ID of network in use\r\n * @param rekeyTo - rekeyTo address, optional\r\n *\r\n * @deprecated This function will be removed in v3 in favor of {@link makeAssetFreezeTxnWithSuggestedParamsFromObject}\r\n */\nexport function makeAssetFreezeTxnWithSuggestedParams(from, note, assetIndex, freezeTarget, freezeState, suggestedParams, rekeyTo) {\n  const o = {\n    from,\n    type: TransactionType.afrz,\n    freezeAccount: freezeTarget,\n    assetIndex,\n    freezeState,\n    note,\n    suggestedParams,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeAssetFreezeTxnWithSuggestedParams, instead accepting an arguments object\nexport function makeAssetFreezeTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetFreezeTxnWithSuggestedParams(o.from, o.note, o.assetIndex, o.freezeTarget, o.freezeState, o.suggestedParams, o.rekeyTo);\n}\n/** makeAssetTransferTxnWithSuggestedParams allows for the creation of an asset transfer transaction.\r\n * Special case: to begin accepting assets, set amount=0 and from=to.\r\n *\r\n * @param from - string representation of Algorand address of sender\r\n * @param to - string representation of Algorand address of asset recipient\r\n * @param closeRemainderTo - optional - string representation of Algorand address - if provided,\r\n * send all remaining assets after transfer to the \"closeRemainderTo\" address and close \"from\"'s asset holdings\r\n * @param revocationTarget - optional - string representation of Algorand address - if provided,\r\n * and if \"from\" is the asset's revocation manager, then deduct from \"revocationTarget\" rather than \"from\"\r\n * @param amount - integer amount of assets to send\r\n * @param note - uint8array of arbitrary data for sender to store\r\n * @param assetIndex - int asset index uniquely specifying the asset\r\n * @param suggestedParams - a dict holding common-to-all-txns args:\r\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\r\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\r\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\r\n * * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\r\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\r\n * firstRound - integer first protocol round on which this txn is valid\r\n * lastRound - integer last protocol round on which this txn is valid\r\n * genesisHash - string specifies hash genesis block of network in use\r\n * genesisID - string specifies genesis ID of network in use\r\n * @param rekeyTo - rekeyTo address, optional\r\n *\r\n * @deprecated This function will be removed in v3 in favor of {@link makeAssetTransferTxnWithSuggestedParamsFromObject}\r\n */\nexport function makeAssetTransferTxnWithSuggestedParams(from, to, closeRemainderTo, revocationTarget, amount, note, assetIndex, suggestedParams, rekeyTo) {\n  const o = {\n    type: TransactionType.axfer,\n    from,\n    to,\n    amount,\n    suggestedParams,\n    assetIndex,\n    note,\n    assetRevocationTarget: revocationTarget,\n    closeRemainderTo,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeAssetTransferTxnWithSuggestedParams, instead accepting an arguments object\nexport function makeAssetTransferTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetTransferTxnWithSuggestedParams(o.from, o.to, o.closeRemainderTo, o.revocationTarget, o.amount, o.note, o.assetIndex, o.suggestedParams, o.rekeyTo);\n}\n/**\r\n * Make a transaction that will create an application.\r\n * @param from - address of sender\r\n * @param suggestedParams - a dict holding common-to-all-txns args:\r\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\r\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\r\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\r\n * firstRound - integer first protocol round on which this txn is valid\r\n * lastRound - integer last protocol round on which this txn is valid\r\n * genesisHash - string specifies hash genesis block of network in use\r\n * genesisID - string specifies genesis ID of network in use\r\n * @param onComplete - algosdk.OnApplicationComplete, what application should do once the program is done being run\r\n * @param approvalProgram - Uint8Array, the compiled TEAL that approves a transaction\r\n * @param clearProgram - Uint8Array, the compiled TEAL that runs when clearing state\r\n * @param numLocalInts - restricts number of ints in per-user local state\r\n * @param numLocalByteSlices - restricts number of byte slices in per-user local state\r\n * @param numGlobalInts - restricts number of ints in global state\r\n * @param numGlobalByteSlices - restricts number of byte slices in global state\r\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\r\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\r\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\r\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\r\n * @param note - Arbitrary data for sender to store\r\n * @param lease - Lease a transaction\r\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\r\n * @param extraPages - integer extra pages of memory to rent on creation of application\r\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\r\n *\r\n * @deprecated This function will be removed in v3 in favor of {@link makeApplicationCreateTxnFromObject}\r\n */\nexport function makeApplicationCreateTxn(from, suggestedParams, onComplete, approvalProgram, clearProgram, numLocalInts, numLocalByteSlices, numGlobalInts, numGlobalByteSlices, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, extraPages, boxes) {\n  const o = {\n    type: TransactionType.appl,\n    from,\n    suggestedParams,\n    appIndex: 0,\n    appOnComplete: onComplete,\n    appLocalInts: numLocalInts,\n    appLocalByteSlices: numLocalByteSlices,\n    appGlobalInts: numGlobalInts,\n    appGlobalByteSlices: numGlobalByteSlices,\n    appApprovalProgram: approvalProgram,\n    appClearProgram: clearProgram,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes,\n    note,\n    lease,\n    reKeyTo: rekeyTo,\n    extraPages\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeApplicationCreateTxn, instead accepting an arguments object\nexport function makeApplicationCreateTxnFromObject(o) {\n  return makeApplicationCreateTxn(o.from, o.suggestedParams, o.onComplete, o.approvalProgram, o.clearProgram, o.numLocalInts, o.numLocalByteSlices, o.numGlobalInts, o.numGlobalByteSlices, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.extraPages, o.boxes);\n}\n/**\r\n * Make a transaction that changes an application's approval and clear programs\r\n * @param from - address of sender\r\n * @param suggestedParams - a dict holding common-to-all-txns args:\r\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\r\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\r\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\r\n * firstRound - integer first protocol round on which this txn is valid\r\n * lastRound - integer last protocol round on which this txn is valid\r\n * genesisHash - string specifies hash genesis block of network in use\r\n * genesisID - string specifies genesis ID of network in use\r\n * @param appIndex - the ID of the app to be updated\r\n * @param approvalProgram - Uint8Array, the compiled TEAL that approves a transaction\r\n * @param clearProgram - Uint8Array, the compiled TEAL that runs when clearing state\r\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\r\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\r\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\r\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\r\n * @param note - Arbitrary data for sender to store\r\n * @param lease - Lease a transaction\r\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\r\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\r\n *\r\n * @deprecated This function will be removed in v3 in favor of {@link makeApplicationUpdateTxnFromObject}\r\n */\nexport function makeApplicationUpdateTxn(from, suggestedParams, appIndex, approvalProgram, clearProgram, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n  const o = {\n    type: TransactionType.appl,\n    from,\n    suggestedParams,\n    appIndex,\n    appApprovalProgram: approvalProgram,\n    appOnComplete: OnApplicationComplete.UpdateApplicationOC,\n    appClearProgram: clearProgram,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes,\n    note,\n    lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeApplicationUpdateTxn, instead accepting an arguments object\nexport function makeApplicationUpdateTxnFromObject(o) {\n  return makeApplicationUpdateTxn(o.from, o.suggestedParams, o.appIndex, o.approvalProgram, o.clearProgram, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\n/**\r\n * Make a transaction that deletes an application\r\n * @param from - address of sender\r\n * @param suggestedParams - a dict holding common-to-all-txns args:\r\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\r\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\r\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\r\n * firstRound - integer first protocol round on which this txn is valid\r\n * lastRound - integer last protocol round on which this txn is valid\r\n * genesisHash - string specifies hash genesis block of network in use\r\n * genesisID - string specifies genesis ID of network in use\r\n * @param appIndex - the ID of the app to be deleted\r\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\r\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\r\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\r\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\r\n * @param note - Arbitrary data for sender to store\r\n * @param lease - Lease a transaction\r\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\r\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\r\n *\r\n * @deprecated This function will be removed in v3 in favor of {@link makeApplicationDeleteTxnFromObject}\r\n */\nexport function makeApplicationDeleteTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n  const o = {\n    type: TransactionType.appl,\n    from,\n    suggestedParams,\n    appIndex,\n    appOnComplete: OnApplicationComplete.DeleteApplicationOC,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes,\n    note,\n    lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeApplicationDeleteTxn, instead accepting an arguments object\nexport function makeApplicationDeleteTxnFromObject(o) {\n  return makeApplicationDeleteTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\n/**\r\n * Make a transaction that opts in to use an application\r\n * @param from - address of sender\r\n * @param suggestedParams - a dict holding common-to-all-txns args:\r\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\r\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\r\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\r\n * firstRound - integer first protocol round on which this txn is valid\r\n * lastRound - integer last protocol round on which this txn is valid\r\n * genesisHash - string specifies hash genesis block of network in use\r\n * genesisID - string specifies genesis ID of network in use\r\n * @param appIndex - the ID of the app to join\r\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\r\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\r\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\r\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\r\n * @param note - Arbitrary data for sender to store\r\n * @param lease - Lease a transaction\r\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\r\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\r\n *\r\n * @deprecated This function will be removed in v3 in favor of {@link makeApplicationOptInTxnFromObject}\r\n */\nexport function makeApplicationOptInTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n  const o = {\n    type: TransactionType.appl,\n    from,\n    suggestedParams,\n    appIndex,\n    appOnComplete: OnApplicationComplete.OptInOC,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes,\n    note,\n    lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeApplicationOptInTxn, instead accepting an argument object\nexport function makeApplicationOptInTxnFromObject(o) {\n  return makeApplicationOptInTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\n/**\r\n * Make a transaction that closes out a user's state in an application\r\n * @param from - address of sender\r\n * @param suggestedParams - a dict holding common-to-all-txns args:\r\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\r\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\r\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\r\n * firstRound - integer first protocol round on which this txn is valid\r\n * lastRound - integer last protocol round on which this txn is valid\r\n * genesisHash - string specifies hash genesis block of network in use\r\n * genesisID - string specifies genesis ID of network in use\r\n * @param appIndex - the ID of the app to use\r\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\r\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\r\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\r\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\r\n * @param note - Arbitrary data for sender to store\r\n * @param lease - Lease a transaction\r\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\r\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\r\n *\r\n * @deprecated This function will be removed in v3 in favor of {@link makeApplicationCloseOutTxnFromObject}\r\n */\nexport function makeApplicationCloseOutTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n  const o = {\n    type: TransactionType.appl,\n    from,\n    suggestedParams,\n    appIndex,\n    appOnComplete: OnApplicationComplete.CloseOutOC,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes,\n    note,\n    lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeApplicationCloseOutTxn, instead accepting an argument object\nexport function makeApplicationCloseOutTxnFromObject(o) {\n  return makeApplicationCloseOutTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\n/**\r\n * Make a transaction that clears a user's state in an application\r\n * @param from - address of sender\r\n * @param suggestedParams - a dict holding common-to-all-txns args:\r\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\r\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\r\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\r\n * firstRound - integer first protocol round on which this txn is valid\r\n * lastRound - integer last protocol round on which this txn is valid\r\n * genesisHash - string specifies hash genesis block of network in use\r\n * genesisID - string specifies genesis ID of network in use\r\n * @param appIndex - the ID of the app to use\r\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\r\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\r\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\r\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\r\n * @param note - Arbitrary data for sender to store\r\n * @param lease - Lease a transaction\r\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\r\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\r\n *\r\n * @deprecated This function will be removed in v3 in favor of {@link makeApplicationClearStateTxnFromObject}\r\n */\nexport function makeApplicationClearStateTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n  const o = {\n    type: TransactionType.appl,\n    from,\n    suggestedParams,\n    appIndex,\n    appOnComplete: OnApplicationComplete.ClearStateOC,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes,\n    note,\n    lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeApplicationClearStateTxn, instead accepting an argument object\nexport function makeApplicationClearStateTxnFromObject(o) {\n  return makeApplicationClearStateTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\n/**\r\n * Make a transaction that just calls an application, doing nothing on completion\r\n * @param from - address of sender\r\n * @param suggestedParams - a dict holding common-to-all-txns args:\r\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\r\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\r\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\r\n * firstRound - integer first protocol round on which this txn is valid\r\n * lastRound - integer last protocol round on which this txn is valid\r\n * genesisHash - string specifies hash genesis block of network in use\r\n * genesisID - string specifies genesis ID of network in use\r\n * @param appIndex - the ID of the app to use\r\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\r\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\r\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\r\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\r\n * @param note - Arbitrary data for sender to store\r\n * @param lease - Lease a transaction\r\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\r\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\r\n *\r\n * @deprecated This function will be removed in v3 in favor of {@link makeApplicationNoOpTxnFromObject}\r\n */\nexport function makeApplicationNoOpTxn(from, suggestedParams, appIndex, appArgs, accounts, foreignApps, foreignAssets, note, lease, rekeyTo, boxes) {\n  const o = {\n    type: TransactionType.appl,\n    from,\n    suggestedParams,\n    appIndex,\n    appOnComplete: OnApplicationComplete.NoOpOC,\n    appArgs,\n    appAccounts: accounts,\n    appForeignApps: foreignApps,\n    appForeignAssets: foreignAssets,\n    boxes,\n    note,\n    lease,\n    reKeyTo: rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n}\n// helper for above makeApplicationNoOpTxn, instead accepting an argument object\nexport function makeApplicationNoOpTxnFromObject(o) {\n  return makeApplicationNoOpTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo, o.boxes);\n}\nexport { OnApplicationComplete } from './types/transactions/base';\n/**\r\n * Generic function for creating any application call transaction.\r\n */\nexport function makeApplicationCallTxnFromObject(options) {\n  const o = {\n    type: TransactionType.appl,\n    from: options.from,\n    suggestedParams: options.suggestedParams,\n    appIndex: options.appIndex,\n    appOnComplete: options.onComplete,\n    appLocalInts: options.numLocalInts,\n    appLocalByteSlices: options.numLocalByteSlices,\n    appGlobalInts: options.numGlobalInts,\n    appGlobalByteSlices: options.numGlobalByteSlices,\n    appApprovalProgram: options.approvalProgram,\n    appClearProgram: options.clearProgram,\n    appArgs: options.appArgs,\n    appAccounts: options.accounts,\n    appForeignApps: options.foreignApps,\n    appForeignAssets: options.foreignAssets,\n    boxes: options.boxes,\n    note: options.note,\n    lease: options.lease,\n    reKeyTo: options.rekeyTo,\n    extraPages: options.extraPages\n  };\n  return new txnBuilder.Transaction(o);\n}","map":{"version":3,"names":["txnBuilder","OnApplicationComplete","TransactionType","makePaymentTxnWithSuggestedParams","from","to","amount","closeRemainderTo","note","suggestedParams","rekeyTo","o","type","pay","reKeyTo","Transaction","makePaymentTxnWithSuggestedParamsFromObject","makeKeyRegistrationTxnWithSuggestedParams","voteKey","selectionKey","voteFirst","voteLast","voteKeyDilution","nonParticipation","stateProofKey","undefined","keyreg","makeKeyRegistrationTxnWithSuggestedParamsFromObject","makeAssetCreateTxnWithSuggestedParams","total","decimals","defaultFrozen","manager","reserve","freeze","clawback","unitName","assetName","assetURL","assetMetadataHash","assetTotal","assetDecimals","assetDefaultFrozen","assetUnitName","assetManager","assetReserve","assetFreeze","assetClawback","acfg","makeAssetCreateTxnWithSuggestedParamsFromObject","makeAssetConfigTxnWithSuggestedParams","assetIndex","strictEmptyAddressChecking","Error","makeAssetConfigTxnWithSuggestedParamsFromObject","makeAssetDestroyTxnWithSuggestedParams","makeAssetDestroyTxnWithSuggestedParamsFromObject","makeAssetFreezeTxnWithSuggestedParams","freezeTarget","freezeState","afrz","freezeAccount","makeAssetFreezeTxnWithSuggestedParamsFromObject","makeAssetTransferTxnWithSuggestedParams","revocationTarget","axfer","assetRevocationTarget","makeAssetTransferTxnWithSuggestedParamsFromObject","makeApplicationCreateTxn","onComplete","approvalProgram","clearProgram","numLocalInts","numLocalByteSlices","numGlobalInts","numGlobalByteSlices","appArgs","accounts","foreignApps","foreignAssets","lease","extraPages","boxes","appl","appIndex","appOnComplete","appLocalInts","appLocalByteSlices","appGlobalInts","appGlobalByteSlices","appApprovalProgram","appClearProgram","appAccounts","appForeignApps","appForeignAssets","makeApplicationCreateTxnFromObject","makeApplicationUpdateTxn","UpdateApplicationOC","makeApplicationUpdateTxnFromObject","makeApplicationDeleteTxn","DeleteApplicationOC","makeApplicationDeleteTxnFromObject","makeApplicationOptInTxn","OptInOC","makeApplicationOptInTxnFromObject","makeApplicationCloseOutTxn","CloseOutOC","makeApplicationCloseOutTxnFromObject","makeApplicationClearStateTxn","ClearStateOC","makeApplicationClearStateTxnFromObject","makeApplicationNoOpTxn","NoOpOC","makeApplicationNoOpTxnFromObject","makeApplicationCallTxnFromObject","options"],"sources":["C:\\Users\\Aditya singh\\AlgoEase\\frontend\\node_modules\\algosdk\\src\\makeTxn.ts"],"sourcesContent":["import * as txnBuilder from './transaction';\r\nimport { OnApplicationComplete } from './types/transactions/base';\r\nimport {\r\n  // Transaction types\r\n  PaymentTxn,\r\n  KeyRegistrationTxn,\r\n\r\n  // Utilities\r\n  TransactionType,\r\n  MustHaveSuggestedParams,\r\n  AssetCreateTxn,\r\n  AssetConfigTxn,\r\n  AssetDestroyTxn,\r\n  AssetFreezeTxn,\r\n  AssetTransferTxn,\r\n  AppCreateTxn,\r\n  AppUpdateTxn,\r\n  AppDeleteTxn,\r\n  AppOptInTxn,\r\n  AppCloseOutTxn,\r\n  AppClearStateTxn,\r\n  AppNoOpTxn,\r\n} from './types/transactions';\r\nimport { RenameProperties, RenameProperty, Expand } from './types/utils';\r\n\r\n/**\r\n * makePaymentTxnWithSuggestedParams takes payment arguments and returns a Transaction object\r\n * @param from - string representation of Algorand address of sender\r\n * @param to - string representation of Algorand address of recipient\r\n * @param amount - integer amount to send, in microAlgos\r\n * @param closeRemainderTo - optionally close out remaining account balance to this account, represented as string rep of Algorand address\r\n * @param note - uint8array of arbitrary data for sender to store\r\n * @param suggestedParams - a dict holding common-to-all-txns args:\r\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\r\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\r\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\r\n * firstRound - integer first protocol round on which this txn is valid\r\n * lastRound - integer last protocol round on which this txn is valid\r\n * genesisHash - string specifies hash genesis block of network in use\r\n * genesisID - string specifies genesis ID of network in use\r\n * @param rekeyTo - rekeyTo address, optional\r\n *\r\n * @deprecated This function will be removed in v3 in favor of {@link makePaymentTxnWithSuggestedParamsFromObject}\r\n */\r\nexport function makePaymentTxnWithSuggestedParams(\r\n  from: PaymentTxn['from'],\r\n  to: PaymentTxn['to'],\r\n  amount: PaymentTxn['amount'],\r\n  closeRemainderTo: PaymentTxn['closeRemainderTo'],\r\n  note: PaymentTxn['note'],\r\n  suggestedParams: MustHaveSuggestedParams<PaymentTxn>['suggestedParams'],\r\n  rekeyTo?: PaymentTxn['reKeyTo']\r\n) {\r\n  const o: PaymentTxn = {\r\n    from,\r\n    to,\r\n    amount,\r\n    closeRemainderTo,\r\n    note,\r\n    suggestedParams,\r\n    type: TransactionType.pay,\r\n    reKeyTo: rekeyTo,\r\n  };\r\n  return new txnBuilder.Transaction(o);\r\n}\r\n\r\n// helper for above makePaymentTxnWithSuggestedParams, instead accepting an arguments object\r\nexport function makePaymentTxnWithSuggestedParamsFromObject(\r\n  o: Expand<\r\n    Pick<\r\n      RenameProperty<MustHaveSuggestedParams<PaymentTxn>, 'reKeyTo', 'rekeyTo'>,\r\n      | 'from'\r\n      | 'to'\r\n      | 'amount'\r\n      | 'closeRemainderTo'\r\n      | 'note'\r\n      | 'suggestedParams'\r\n      | 'rekeyTo'\r\n    >\r\n  >\r\n) {\r\n  return makePaymentTxnWithSuggestedParams(\r\n    o.from,\r\n    o.to,\r\n    o.amount,\r\n    o.closeRemainderTo,\r\n    o.note,\r\n    o.suggestedParams,\r\n    o.rekeyTo\r\n  );\r\n}\r\n\r\n/**\r\n * makeKeyRegistrationTxnWithSuggestedParams takes key registration arguments and returns a Transaction object for\r\n * that key registration operation\r\n *\r\n * @param from - string representation of Algorand address of sender\r\n * @param note - uint8array of arbitrary data for sender to store\r\n * @param voteKey - voting key. for key deregistration, leave undefined\r\n * @param selectionKey - selection key. for key deregistration, leave undefined\r\n * @param voteFirst - first round on which voteKey is valid\r\n * @param voteLast - last round on which voteKey is valid\r\n * @param voteKeyDilution - integer\r\n * @param suggestedParams - a dict holding common-to-all-txns args:\r\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\r\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\r\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\r\n * firstRound - integer first protocol round on which this txn is valid\r\n * lastRound - integer last protocol round on which this txn is valid\r\n * genesisHash - string specifies hash genesis block of network in use\r\n * genesisID - string specifies genesis ID of network in use\r\n * @param rekeyTo - rekeyTo address, optional\r\n * @param nonParticipation - configure whether the address wants to stop participating. If true,\r\n *   voteKey, selectionKey, voteFirst, voteLast, and voteKeyDilution must be undefined.\r\n * @param stateProofKey - state proof key. for key deregistration, leave undefined\r\n *\r\n * @deprecated This function will be removed in v3 in favor of {@link makeKeyRegistrationTxnWithSuggestedParamsFromObject}\r\n */\r\nexport function makeKeyRegistrationTxnWithSuggestedParams(\r\n  from: KeyRegistrationTxn['from'],\r\n  note: KeyRegistrationTxn['note'],\r\n  voteKey: KeyRegistrationTxn['voteKey'],\r\n  selectionKey: KeyRegistrationTxn['selectionKey'],\r\n  voteFirst: KeyRegistrationTxn['voteFirst'],\r\n  voteLast: KeyRegistrationTxn['voteLast'],\r\n  voteKeyDilution: KeyRegistrationTxn['voteKeyDilution'],\r\n  suggestedParams: MustHaveSuggestedParams<KeyRegistrationTxn>['suggestedParams'],\r\n  rekeyTo?: KeyRegistrationTxn['reKeyTo'],\r\n  nonParticipation?: false,\r\n  stateProofKey?: KeyRegistrationTxn['stateProofKey']\r\n): txnBuilder.Transaction;\r\nexport function makeKeyRegistrationTxnWithSuggestedParams(\r\n  from: KeyRegistrationTxn['from'],\r\n  note: KeyRegistrationTxn['note'],\r\n  voteKey: undefined,\r\n  selectionKey: undefined,\r\n  voteFirst: undefined,\r\n  voteLast: undefined,\r\n  voteKeyDilution: undefined,\r\n  suggestedParams: MustHaveSuggestedParams<KeyRegistrationTxn>['suggestedParams'],\r\n  rekeyTo?: KeyRegistrationTxn['reKeyTo'],\r\n  nonParticipation?: boolean,\r\n  stateProofKey?: undefined\r\n): txnBuilder.Transaction;\r\nexport function makeKeyRegistrationTxnWithSuggestedParams(\r\n  from: any,\r\n  note: any,\r\n  voteKey: any,\r\n  selectionKey: any,\r\n  voteFirst: any,\r\n  voteLast: any,\r\n  voteKeyDilution: any,\r\n  suggestedParams: any,\r\n  rekeyTo?: any,\r\n  nonParticipation = false,\r\n  stateProofKey: any = undefined\r\n) {\r\n  const o: KeyRegistrationTxn = {\r\n    from,\r\n    note,\r\n    voteKey,\r\n    selectionKey,\r\n    voteFirst,\r\n    voteLast,\r\n    voteKeyDilution,\r\n    suggestedParams,\r\n    type: TransactionType.keyreg,\r\n    reKeyTo: rekeyTo,\r\n    nonParticipation,\r\n    stateProofKey,\r\n  };\r\n  return new txnBuilder.Transaction(o);\r\n}\r\n\r\n// helper for above makeKeyRegistrationTxnWithSuggestedParams, instead accepting an arguments object\r\nexport function makeKeyRegistrationTxnWithSuggestedParamsFromObject(\r\n  o: Expand<\r\n    Pick<\r\n      RenameProperty<\r\n        MustHaveSuggestedParams<KeyRegistrationTxn>,\r\n        'reKeyTo',\r\n        'rekeyTo'\r\n      >,\r\n      | 'from'\r\n      | 'note'\r\n      | 'voteKey'\r\n      | 'selectionKey'\r\n      | 'stateProofKey'\r\n      | 'voteFirst'\r\n      | 'voteLast'\r\n      | 'voteKeyDilution'\r\n      | 'suggestedParams'\r\n      | 'rekeyTo'\r\n    > & {\r\n      nonParticipation?: false;\r\n    }\r\n  >\r\n): txnBuilder.Transaction;\r\nexport function makeKeyRegistrationTxnWithSuggestedParamsFromObject(\r\n  o: Expand<\r\n    Pick<\r\n      RenameProperty<\r\n        MustHaveSuggestedParams<KeyRegistrationTxn>,\r\n        'reKeyTo',\r\n        'rekeyTo'\r\n      >,\r\n      'from' | 'note' | 'suggestedParams' | 'rekeyTo' | 'nonParticipation'\r\n    >\r\n  >\r\n): txnBuilder.Transaction;\r\nexport function makeKeyRegistrationTxnWithSuggestedParamsFromObject(o: any) {\r\n  return makeKeyRegistrationTxnWithSuggestedParams(\r\n    o.from,\r\n    o.note,\r\n    o.voteKey,\r\n    o.selectionKey,\r\n    o.voteFirst,\r\n    o.voteLast,\r\n    o.voteKeyDilution,\r\n    o.suggestedParams,\r\n    o.rekeyTo,\r\n    o.nonParticipation,\r\n    o.stateProofKey\r\n  );\r\n}\r\n\r\n/** makeAssetCreateTxnWithSuggestedParams takes asset creation arguments and returns a Transaction object\r\n * for creating that asset\r\n *\r\n * @param from - string representation of Algorand address of sender\r\n * @param note - uint8array of arbitrary data for sender to store\r\n * @param total - integer total supply of the asset\r\n * @param decimals - integer number of decimals for asset unit calculation\r\n * @param defaultFrozen - boolean whether asset accounts should default to being frozen\r\n * @param manager - string representation of Algorand address in charge of reserve, freeze, clawback, destruction, etc\r\n * @param reserve - string representation of Algorand address representing asset reserve\r\n * @param freeze - string representation of Algorand address with power to freeze/unfreeze asset holdings\r\n * @param clawback - string representation of Algorand address with power to revoke asset holdings\r\n * @param unitName - string units name for this asset\r\n * @param assetName - string name for this asset\r\n * @param assetURL - string URL relating to this asset\r\n * @param assetMetadataHash - Uint8Array or UTF-8 string representation of a hash commitment with respect to the asset. Must be exactly 32 bytes long.\r\n * @param suggestedParams - a dict holding common-to-all-txns args:\r\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\r\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\r\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\r\n * firstRound - integer first protocol round on which this txn is valid\r\n * lastRound - integer last protocol round on which this txn is valid\r\n * genesisHash - string specifies hash genesis block of network in use\r\n * genesisID - string specifies genesis ID of network in use\r\n * @param rekeyTo - rekeyTo address, optional\r\n *\r\n * @deprecated This function will be removed in v3 in favor of {@link makeAssetCreateTxnWithSuggestedParamsFromObject}\r\n */\r\nexport function makeAssetCreateTxnWithSuggestedParams(\r\n  from: AssetCreateTxn['from'],\r\n  note: AssetCreateTxn['note'],\r\n  total: AssetCreateTxn['assetTotal'],\r\n  decimals: AssetCreateTxn['assetDecimals'],\r\n  defaultFrozen: AssetCreateTxn['assetDefaultFrozen'],\r\n  manager: AssetCreateTxn['assetManager'],\r\n  reserve: AssetCreateTxn['assetReserve'],\r\n  freeze: AssetCreateTxn['assetFreeze'],\r\n  clawback: AssetCreateTxn['assetClawback'],\r\n  unitName: AssetCreateTxn['assetUnitName'],\r\n  assetName: AssetCreateTxn['assetName'],\r\n  assetURL: AssetCreateTxn['assetURL'],\r\n  assetMetadataHash: AssetCreateTxn['assetMetadataHash'] | undefined,\r\n  suggestedParams: MustHaveSuggestedParams<AssetCreateTxn>['suggestedParams'],\r\n  rekeyTo?: AssetCreateTxn['reKeyTo']\r\n) {\r\n  const o: AssetCreateTxn = {\r\n    from,\r\n    note,\r\n    suggestedParams,\r\n    assetTotal: total,\r\n    assetDecimals: decimals,\r\n    assetDefaultFrozen: defaultFrozen,\r\n    assetUnitName: unitName,\r\n    assetName,\r\n    assetURL,\r\n    assetMetadataHash,\r\n    assetManager: manager,\r\n    assetReserve: reserve,\r\n    assetFreeze: freeze,\r\n    assetClawback: clawback,\r\n    type: TransactionType.acfg,\r\n    reKeyTo: rekeyTo,\r\n  };\r\n  return new txnBuilder.Transaction(o);\r\n}\r\n\r\n// helper for above makeAssetCreateTxnWithSuggestedParams, instead accepting an arguments object\r\nexport function makeAssetCreateTxnWithSuggestedParamsFromObject(\r\n  o: Expand<\r\n    Pick<\r\n      RenameProperties<\r\n        MustHaveSuggestedParams<AssetCreateTxn>,\r\n        {\r\n          reKeyTo: 'rekeyTo';\r\n          assetTotal: 'total';\r\n          assetDecimals: 'decimals';\r\n          assetDefaultFrozen: 'defaultFrozen';\r\n          assetManager: 'manager';\r\n          assetReserve: 'reserve';\r\n          assetFreeze: 'freeze';\r\n          assetClawback: 'clawback';\r\n          assetUnitName: 'unitName';\r\n        }\r\n      >,\r\n      | 'from'\r\n      | 'note'\r\n      | 'total'\r\n      | 'decimals'\r\n      | 'defaultFrozen'\r\n      | 'manager'\r\n      | 'reserve'\r\n      | 'freeze'\r\n      | 'clawback'\r\n      | 'unitName'\r\n      | 'assetName'\r\n      | 'assetURL'\r\n      | 'assetMetadataHash'\r\n      | 'suggestedParams'\r\n      | 'rekeyTo'\r\n    >\r\n  >\r\n) {\r\n  return makeAssetCreateTxnWithSuggestedParams(\r\n    o.from,\r\n    o.note,\r\n    o.total,\r\n    o.decimals,\r\n    o.defaultFrozen,\r\n    o.manager,\r\n    o.reserve,\r\n    o.freeze,\r\n    o.clawback,\r\n    o.unitName,\r\n    o.assetName,\r\n    o.assetURL,\r\n    o.assetMetadataHash,\r\n    o.suggestedParams,\r\n    o.rekeyTo\r\n  );\r\n}\r\n\r\n/** makeAssetConfigTxnWithSuggestedParams can be issued by the asset manager to change the manager, reserve, freeze, or clawback\r\n * you must respecify existing addresses to keep them the same; leaving a field blank is the same as turning\r\n * that feature off for this asset\r\n *\r\n * @param from - string representation of Algorand address of sender\r\n * @param note - uint8array of arbitrary data for sender to store\r\n * @param assetIndex - int asset index uniquely specifying the asset\r\n * @param manager - string representation of new asset manager Algorand address\r\n * @param reserve - string representation of new reserve Algorand address\r\n * @param freeze - string representation of new freeze manager Algorand address\r\n * @param clawback - string representation of new revocation manager Algorand address\r\n * @param strictEmptyAddressChecking - boolean - throw an error if any of manager, reserve, freeze, or clawback are undefined. optional, defaults to true.\r\n * @param suggestedParams - a dict holding common-to-all-txns args:\r\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\r\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\r\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\r\n * firstRound - integer first protocol round on which this txn is valid\r\n * lastRound - integer last protocol round on which this txn is valid\r\n * genesisHash - string specifies hash genesis block of network in use\r\n * genesisID - string specifies genesis ID of network in use\r\n * @param rekeyTo - rekeyTo address, optional\r\n *\r\n * @deprecated This function will be removed in v3 in favor of {@link makeAssetConfigTxnWithSuggestedParamsFromObject}\r\n */\r\nexport function makeAssetConfigTxnWithSuggestedParams(\r\n  from: AssetConfigTxn['from'],\r\n  note: AssetConfigTxn['note'],\r\n  assetIndex: AssetConfigTxn['assetIndex'],\r\n  manager: AssetConfigTxn['assetManager'],\r\n  reserve: AssetConfigTxn['assetReserve'],\r\n  freeze: AssetConfigTxn['assetFreeze'],\r\n  clawback: AssetConfigTxn['assetClawback'],\r\n  suggestedParams: MustHaveSuggestedParams<AssetConfigTxn>['suggestedParams'],\r\n  strictEmptyAddressChecking = true,\r\n  rekeyTo?: AssetConfigTxn['reKeyTo']\r\n) {\r\n  if (\r\n    strictEmptyAddressChecking &&\r\n    (manager === undefined ||\r\n      reserve === undefined ||\r\n      freeze === undefined ||\r\n      clawback === undefined)\r\n  ) {\r\n    throw Error(\r\n      'strict empty address checking was turned on, but at least one empty address was provided'\r\n    );\r\n  }\r\n  const o: AssetConfigTxn = {\r\n    from,\r\n    suggestedParams,\r\n    assetIndex,\r\n    assetManager: manager,\r\n    assetReserve: reserve,\r\n    assetFreeze: freeze,\r\n    assetClawback: clawback,\r\n    type: TransactionType.acfg,\r\n    note,\r\n    reKeyTo: rekeyTo,\r\n  };\r\n  return new txnBuilder.Transaction(o);\r\n}\r\n\r\n// helper for above makeAssetConfigTxnWithSuggestedParams, instead accepting an arguments object\r\nexport function makeAssetConfigTxnWithSuggestedParamsFromObject(\r\n  o: Expand<\r\n    Pick<\r\n      RenameProperties<\r\n        MustHaveSuggestedParams<AssetConfigTxn>,\r\n        {\r\n          reKeyTo: 'rekeyTo';\r\n          assetManager: 'manager';\r\n          assetReserve: 'reserve';\r\n          assetFreeze: 'freeze';\r\n          assetClawback: 'clawback';\r\n        }\r\n      >,\r\n      | 'from'\r\n      | 'note'\r\n      | 'assetIndex'\r\n      | 'manager'\r\n      | 'reserve'\r\n      | 'freeze'\r\n      | 'clawback'\r\n      | 'suggestedParams'\r\n      | 'rekeyTo'\r\n    > & {\r\n      strictEmptyAddressChecking: boolean;\r\n    }\r\n  >\r\n) {\r\n  return makeAssetConfigTxnWithSuggestedParams(\r\n    o.from,\r\n    o.note,\r\n    o.assetIndex,\r\n    o.manager,\r\n    o.reserve,\r\n    o.freeze,\r\n    o.clawback,\r\n    o.suggestedParams,\r\n    o.strictEmptyAddressChecking,\r\n    o.rekeyTo\r\n  );\r\n}\r\n\r\n/** makeAssetDestroyTxnWithSuggestedParams will allow the asset's manager to remove this asset from the ledger, so long\r\n * as all outstanding assets are held by the creator.\r\n *\r\n * @param from - string representation of Algorand address of sender\r\n * @param note - uint8array of arbitrary data for sender to store\r\n * @param assetIndex - int asset index uniquely specifying the asset\r\n * @param suggestedParams - a dict holding common-to-all-txns args:\r\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\r\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\r\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\r\n * firstRound - integer first protocol round on which this txn is valid\r\n * lastRound - integer last protocol round on which this txn is valid\r\n * genesisHash - string specifies hash genesis block of network in use\r\n * genesisID - string specifies genesis ID of network in use\r\n * @param rekeyTo - rekeyTo address, optional\r\n *\r\n * @deprecated This function will be removed in v3 in favor of {@link makeAssetDestroyTxnWithSuggestedParamsFromObject}\r\n */\r\nexport function makeAssetDestroyTxnWithSuggestedParams(\r\n  from: AssetDestroyTxn['from'],\r\n  note: AssetDestroyTxn['note'],\r\n  assetIndex: AssetDestroyTxn['assetIndex'],\r\n  suggestedParams: MustHaveSuggestedParams<AssetDestroyTxn>['suggestedParams'],\r\n  rekeyTo?: AssetDestroyTxn['reKeyTo']\r\n) {\r\n  const o: AssetDestroyTxn = {\r\n    from,\r\n    suggestedParams,\r\n    assetIndex,\r\n    type: TransactionType.acfg,\r\n    note,\r\n    reKeyTo: rekeyTo,\r\n  };\r\n  return new txnBuilder.Transaction(o);\r\n}\r\n\r\n// helper for above makeAssetDestroyTxnWithSuggestedParams, instead accepting an arguments object\r\nexport function makeAssetDestroyTxnWithSuggestedParamsFromObject(\r\n  o: Expand<\r\n    Pick<\r\n      RenameProperty<\r\n        MustHaveSuggestedParams<AssetDestroyTxn>,\r\n        'reKeyTo',\r\n        'rekeyTo'\r\n      >,\r\n      'from' | 'note' | 'assetIndex' | 'suggestedParams' | 'rekeyTo'\r\n    >\r\n  >\r\n) {\r\n  return makeAssetDestroyTxnWithSuggestedParams(\r\n    o.from,\r\n    o.note,\r\n    o.assetIndex,\r\n    o.suggestedParams,\r\n    o.rekeyTo\r\n  );\r\n}\r\n\r\n/** makeAssetFreezeTxnWithSuggestedParams will allow the asset's freeze manager to freeze or un-freeze an account,\r\n * blocking or allowing asset transfers to and from the targeted account.\r\n *\r\n * @param from - string representation of Algorand address of sender\r\n * @param note - uint8array of arbitrary data for sender to store\r\n * @param assetIndex - int asset index uniquely specifying the asset\r\n * @param freezeTarget - string representation of Algorand address being frozen or unfrozen\r\n * @param freezeState - true if freezeTarget should be frozen, false if freezeTarget should be allowed to transact\r\n * @param suggestedParams - a dict holding common-to-all-txns args:\r\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\r\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\r\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\r\n * firstRound - integer first protocol round on which this txn is valid\r\n * lastRound - integer last protocol round on which this txn is valid\r\n * genesisHash - string specifies hash genesis block of network in use\r\n * genesisID - string specifies genesis ID of network in use\r\n * @param rekeyTo - rekeyTo address, optional\r\n *\r\n * @deprecated This function will be removed in v3 in favor of {@link makeAssetFreezeTxnWithSuggestedParamsFromObject}\r\n */\r\nexport function makeAssetFreezeTxnWithSuggestedParams(\r\n  from: AssetFreezeTxn['from'],\r\n  note: AssetFreezeTxn['note'],\r\n  assetIndex: AssetFreezeTxn['assetIndex'],\r\n  freezeTarget: AssetFreezeTxn['freezeAccount'],\r\n  freezeState: AssetFreezeTxn['freezeState'],\r\n  suggestedParams: MustHaveSuggestedParams<AssetFreezeTxn>['suggestedParams'],\r\n  rekeyTo?: AssetFreezeTxn['reKeyTo']\r\n) {\r\n  const o: AssetFreezeTxn = {\r\n    from,\r\n    type: TransactionType.afrz,\r\n    freezeAccount: freezeTarget,\r\n    assetIndex,\r\n    freezeState,\r\n    note,\r\n    suggestedParams,\r\n    reKeyTo: rekeyTo,\r\n  };\r\n  return new txnBuilder.Transaction(o);\r\n}\r\n\r\n// helper for above makeAssetFreezeTxnWithSuggestedParams, instead accepting an arguments object\r\nexport function makeAssetFreezeTxnWithSuggestedParamsFromObject(\r\n  o: Expand<\r\n    Pick<\r\n      RenameProperties<\r\n        MustHaveSuggestedParams<AssetFreezeTxn>,\r\n        {\r\n          freezeAccount: 'freezeTarget';\r\n          reKeyTo: 'rekeyTo';\r\n        }\r\n      >,\r\n      | 'from'\r\n      | 'note'\r\n      | 'assetIndex'\r\n      | 'freezeTarget'\r\n      | 'freezeState'\r\n      | 'suggestedParams'\r\n      | 'rekeyTo'\r\n    >\r\n  >\r\n) {\r\n  return makeAssetFreezeTxnWithSuggestedParams(\r\n    o.from,\r\n    o.note,\r\n    o.assetIndex,\r\n    o.freezeTarget,\r\n    o.freezeState,\r\n    o.suggestedParams,\r\n    o.rekeyTo\r\n  );\r\n}\r\n\r\n/** makeAssetTransferTxnWithSuggestedParams allows for the creation of an asset transfer transaction.\r\n * Special case: to begin accepting assets, set amount=0 and from=to.\r\n *\r\n * @param from - string representation of Algorand address of sender\r\n * @param to - string representation of Algorand address of asset recipient\r\n * @param closeRemainderTo - optional - string representation of Algorand address - if provided,\r\n * send all remaining assets after transfer to the \"closeRemainderTo\" address and close \"from\"'s asset holdings\r\n * @param revocationTarget - optional - string representation of Algorand address - if provided,\r\n * and if \"from\" is the asset's revocation manager, then deduct from \"revocationTarget\" rather than \"from\"\r\n * @param amount - integer amount of assets to send\r\n * @param note - uint8array of arbitrary data for sender to store\r\n * @param assetIndex - int asset index uniquely specifying the asset\r\n * @param suggestedParams - a dict holding common-to-all-txns args:\r\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\r\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\r\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\r\n * * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\r\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\r\n * firstRound - integer first protocol round on which this txn is valid\r\n * lastRound - integer last protocol round on which this txn is valid\r\n * genesisHash - string specifies hash genesis block of network in use\r\n * genesisID - string specifies genesis ID of network in use\r\n * @param rekeyTo - rekeyTo address, optional\r\n *\r\n * @deprecated This function will be removed in v3 in favor of {@link makeAssetTransferTxnWithSuggestedParamsFromObject}\r\n */\r\nexport function makeAssetTransferTxnWithSuggestedParams(\r\n  from: AssetTransferTxn['from'],\r\n  to: AssetTransferTxn['to'],\r\n  closeRemainderTo: AssetTransferTxn['closeRemainderTo'],\r\n  revocationTarget: AssetTransferTxn['assetRevocationTarget'],\r\n  amount: AssetTransferTxn['amount'],\r\n  note: AssetTransferTxn['note'],\r\n  assetIndex: AssetTransferTxn['assetIndex'],\r\n  suggestedParams: MustHaveSuggestedParams<AssetTransferTxn>['suggestedParams'],\r\n  rekeyTo?: AssetTransferTxn['reKeyTo']\r\n) {\r\n  const o: AssetTransferTxn = {\r\n    type: TransactionType.axfer,\r\n    from,\r\n    to,\r\n    amount,\r\n    suggestedParams,\r\n    assetIndex,\r\n    note,\r\n    assetRevocationTarget: revocationTarget,\r\n    closeRemainderTo,\r\n    reKeyTo: rekeyTo,\r\n  };\r\n  return new txnBuilder.Transaction(o);\r\n}\r\n\r\n// helper for above makeAssetTransferTxnWithSuggestedParams, instead accepting an arguments object\r\nexport function makeAssetTransferTxnWithSuggestedParamsFromObject(\r\n  o: Expand<\r\n    Pick<\r\n      RenameProperties<\r\n        MustHaveSuggestedParams<AssetTransferTxn>,\r\n        {\r\n          assetRevocationTarget: 'revocationTarget';\r\n          reKeyTo: 'rekeyTo';\r\n        }\r\n      >,\r\n      | 'from'\r\n      | 'to'\r\n      | 'closeRemainderTo'\r\n      | 'revocationTarget'\r\n      | 'amount'\r\n      | 'note'\r\n      | 'assetIndex'\r\n      | 'suggestedParams'\r\n      | 'rekeyTo'\r\n    >\r\n  >\r\n) {\r\n  return makeAssetTransferTxnWithSuggestedParams(\r\n    o.from,\r\n    o.to,\r\n    o.closeRemainderTo,\r\n    o.revocationTarget,\r\n    o.amount,\r\n    o.note,\r\n    o.assetIndex,\r\n    o.suggestedParams,\r\n    o.rekeyTo\r\n  );\r\n}\r\n\r\n/**\r\n * Make a transaction that will create an application.\r\n * @param from - address of sender\r\n * @param suggestedParams - a dict holding common-to-all-txns args:\r\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\r\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\r\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\r\n * firstRound - integer first protocol round on which this txn is valid\r\n * lastRound - integer last protocol round on which this txn is valid\r\n * genesisHash - string specifies hash genesis block of network in use\r\n * genesisID - string specifies genesis ID of network in use\r\n * @param onComplete - algosdk.OnApplicationComplete, what application should do once the program is done being run\r\n * @param approvalProgram - Uint8Array, the compiled TEAL that approves a transaction\r\n * @param clearProgram - Uint8Array, the compiled TEAL that runs when clearing state\r\n * @param numLocalInts - restricts number of ints in per-user local state\r\n * @param numLocalByteSlices - restricts number of byte slices in per-user local state\r\n * @param numGlobalInts - restricts number of ints in global state\r\n * @param numGlobalByteSlices - restricts number of byte slices in global state\r\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\r\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\r\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\r\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\r\n * @param note - Arbitrary data for sender to store\r\n * @param lease - Lease a transaction\r\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\r\n * @param extraPages - integer extra pages of memory to rent on creation of application\r\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\r\n *\r\n * @deprecated This function will be removed in v3 in favor of {@link makeApplicationCreateTxnFromObject}\r\n */\r\nexport function makeApplicationCreateTxn(\r\n  from: AppCreateTxn['from'],\r\n  suggestedParams: MustHaveSuggestedParams<AppCreateTxn>['suggestedParams'],\r\n  onComplete: AppCreateTxn['appOnComplete'],\r\n  approvalProgram: AppCreateTxn['appApprovalProgram'],\r\n  clearProgram: AppCreateTxn['appClearProgram'],\r\n  numLocalInts: AppCreateTxn['appLocalInts'],\r\n  numLocalByteSlices: AppCreateTxn['appLocalByteSlices'],\r\n  numGlobalInts: AppCreateTxn['appGlobalInts'],\r\n  numGlobalByteSlices: AppCreateTxn['appGlobalByteSlices'],\r\n  appArgs?: AppCreateTxn['appArgs'],\r\n  accounts?: AppCreateTxn['appAccounts'],\r\n  foreignApps?: AppCreateTxn['appForeignApps'],\r\n  foreignAssets?: AppCreateTxn['appForeignAssets'],\r\n  note?: AppCreateTxn['note'],\r\n  lease?: AppCreateTxn['lease'],\r\n  rekeyTo?: AppCreateTxn['reKeyTo'],\r\n  extraPages?: AppCreateTxn['extraPages'],\r\n  boxes?: AppCreateTxn['boxes']\r\n) {\r\n  const o: AppCreateTxn = {\r\n    type: TransactionType.appl,\r\n    from,\r\n    suggestedParams,\r\n    appIndex: 0,\r\n    appOnComplete: onComplete,\r\n    appLocalInts: numLocalInts,\r\n    appLocalByteSlices: numLocalByteSlices,\r\n    appGlobalInts: numGlobalInts,\r\n    appGlobalByteSlices: numGlobalByteSlices,\r\n    appApprovalProgram: approvalProgram,\r\n    appClearProgram: clearProgram,\r\n    appArgs,\r\n    appAccounts: accounts,\r\n    appForeignApps: foreignApps,\r\n    appForeignAssets: foreignAssets,\r\n    boxes,\r\n    note,\r\n    lease,\r\n    reKeyTo: rekeyTo,\r\n    extraPages,\r\n  };\r\n  return new txnBuilder.Transaction(o);\r\n}\r\n\r\n// helper for above makeApplicationCreateTxn, instead accepting an arguments object\r\nexport function makeApplicationCreateTxnFromObject(\r\n  o: Expand<\r\n    Pick<\r\n      RenameProperties<\r\n        MustHaveSuggestedParams<AppCreateTxn>,\r\n        {\r\n          appOnComplete: 'onComplete';\r\n          appApprovalProgram: 'approvalProgram';\r\n          appClearProgram: 'clearProgram';\r\n          appLocalInts: 'numLocalInts';\r\n          appLocalByteSlices: 'numLocalByteSlices';\r\n          appGlobalInts: 'numGlobalInts';\r\n          appGlobalByteSlices: 'numGlobalByteSlices';\r\n          appAccounts: 'accounts';\r\n          appForeignApps: 'foreignApps';\r\n          appForeignAssets: 'foreignAssets';\r\n          reKeyTo: 'rekeyTo';\r\n        }\r\n      >,\r\n      | 'from'\r\n      | 'suggestedParams'\r\n      | 'onComplete'\r\n      | 'approvalProgram'\r\n      | 'clearProgram'\r\n      | 'numLocalInts'\r\n      | 'numLocalByteSlices'\r\n      | 'numGlobalInts'\r\n      | 'numGlobalByteSlices'\r\n      | 'appArgs'\r\n      | 'accounts'\r\n      | 'foreignApps'\r\n      | 'foreignAssets'\r\n      | 'boxes'\r\n      | 'note'\r\n      | 'lease'\r\n      | 'rekeyTo'\r\n      | 'extraPages'\r\n    >\r\n  >\r\n) {\r\n  return makeApplicationCreateTxn(\r\n    o.from,\r\n    o.suggestedParams,\r\n    o.onComplete,\r\n    o.approvalProgram,\r\n    o.clearProgram,\r\n    o.numLocalInts,\r\n    o.numLocalByteSlices,\r\n    o.numGlobalInts,\r\n    o.numGlobalByteSlices,\r\n    o.appArgs,\r\n    o.accounts,\r\n    o.foreignApps,\r\n    o.foreignAssets,\r\n    o.note,\r\n    o.lease,\r\n    o.rekeyTo,\r\n    o.extraPages,\r\n    o.boxes\r\n  );\r\n}\r\n\r\n/**\r\n * Make a transaction that changes an application's approval and clear programs\r\n * @param from - address of sender\r\n * @param suggestedParams - a dict holding common-to-all-txns args:\r\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\r\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\r\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\r\n * firstRound - integer first protocol round on which this txn is valid\r\n * lastRound - integer last protocol round on which this txn is valid\r\n * genesisHash - string specifies hash genesis block of network in use\r\n * genesisID - string specifies genesis ID of network in use\r\n * @param appIndex - the ID of the app to be updated\r\n * @param approvalProgram - Uint8Array, the compiled TEAL that approves a transaction\r\n * @param clearProgram - Uint8Array, the compiled TEAL that runs when clearing state\r\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\r\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\r\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\r\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\r\n * @param note - Arbitrary data for sender to store\r\n * @param lease - Lease a transaction\r\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\r\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\r\n *\r\n * @deprecated This function will be removed in v3 in favor of {@link makeApplicationUpdateTxnFromObject}\r\n */\r\nexport function makeApplicationUpdateTxn(\r\n  from: AppUpdateTxn['from'],\r\n  suggestedParams: MustHaveSuggestedParams<AppUpdateTxn>['suggestedParams'],\r\n  appIndex: AppUpdateTxn['appIndex'],\r\n  approvalProgram: AppUpdateTxn['appApprovalProgram'],\r\n  clearProgram: AppUpdateTxn['appClearProgram'],\r\n  appArgs?: AppUpdateTxn['appArgs'],\r\n  accounts?: AppUpdateTxn['appAccounts'],\r\n  foreignApps?: AppUpdateTxn['appForeignApps'],\r\n  foreignAssets?: AppUpdateTxn['appForeignAssets'],\r\n  note?: AppUpdateTxn['note'],\r\n  lease?: AppUpdateTxn['lease'],\r\n  rekeyTo?: AppUpdateTxn['reKeyTo'],\r\n  boxes?: AppUpdateTxn['boxes']\r\n) {\r\n  const o: AppUpdateTxn = {\r\n    type: TransactionType.appl,\r\n    from,\r\n    suggestedParams,\r\n    appIndex,\r\n    appApprovalProgram: approvalProgram,\r\n    appOnComplete: OnApplicationComplete.UpdateApplicationOC,\r\n    appClearProgram: clearProgram,\r\n    appArgs,\r\n    appAccounts: accounts,\r\n    appForeignApps: foreignApps,\r\n    appForeignAssets: foreignAssets,\r\n    boxes,\r\n    note,\r\n    lease,\r\n    reKeyTo: rekeyTo,\r\n  };\r\n  return new txnBuilder.Transaction(o);\r\n}\r\n\r\n// helper for above makeApplicationUpdateTxn, instead accepting an arguments object\r\nexport function makeApplicationUpdateTxnFromObject(\r\n  o: Expand<\r\n    Pick<\r\n      RenameProperties<\r\n        MustHaveSuggestedParams<AppUpdateTxn>,\r\n        {\r\n          appApprovalProgram: 'approvalProgram';\r\n          appClearProgram: 'clearProgram';\r\n          appAccounts: 'accounts';\r\n          appForeignApps: 'foreignApps';\r\n          appForeignAssets: 'foreignAssets';\r\n          reKeyTo: 'rekeyTo';\r\n        }\r\n      >,\r\n      | 'from'\r\n      | 'suggestedParams'\r\n      | 'appIndex'\r\n      | 'approvalProgram'\r\n      | 'clearProgram'\r\n      | 'appArgs'\r\n      | 'accounts'\r\n      | 'foreignApps'\r\n      | 'foreignAssets'\r\n      | 'boxes'\r\n      | 'note'\r\n      | 'lease'\r\n      | 'rekeyTo'\r\n    >\r\n  >\r\n) {\r\n  return makeApplicationUpdateTxn(\r\n    o.from,\r\n    o.suggestedParams,\r\n    o.appIndex,\r\n    o.approvalProgram,\r\n    o.clearProgram,\r\n    o.appArgs,\r\n    o.accounts,\r\n    o.foreignApps,\r\n    o.foreignAssets,\r\n    o.note,\r\n    o.lease,\r\n    o.rekeyTo,\r\n    o.boxes\r\n  );\r\n}\r\n\r\n/**\r\n * Make a transaction that deletes an application\r\n * @param from - address of sender\r\n * @param suggestedParams - a dict holding common-to-all-txns args:\r\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\r\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\r\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\r\n * firstRound - integer first protocol round on which this txn is valid\r\n * lastRound - integer last protocol round on which this txn is valid\r\n * genesisHash - string specifies hash genesis block of network in use\r\n * genesisID - string specifies genesis ID of network in use\r\n * @param appIndex - the ID of the app to be deleted\r\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\r\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\r\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\r\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\r\n * @param note - Arbitrary data for sender to store\r\n * @param lease - Lease a transaction\r\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\r\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\r\n *\r\n * @deprecated This function will be removed in v3 in favor of {@link makeApplicationDeleteTxnFromObject}\r\n */\r\nexport function makeApplicationDeleteTxn(\r\n  from: AppDeleteTxn['from'],\r\n  suggestedParams: MustHaveSuggestedParams<AppDeleteTxn>['suggestedParams'],\r\n  appIndex: AppDeleteTxn['appIndex'],\r\n  appArgs?: AppDeleteTxn['appArgs'],\r\n  accounts?: AppDeleteTxn['appAccounts'],\r\n  foreignApps?: AppDeleteTxn['appForeignApps'],\r\n  foreignAssets?: AppDeleteTxn['appForeignAssets'],\r\n  note?: AppDeleteTxn['note'],\r\n  lease?: AppDeleteTxn['lease'],\r\n  rekeyTo?: AppDeleteTxn['reKeyTo'],\r\n  boxes?: AppDeleteTxn['boxes']\r\n) {\r\n  const o: AppDeleteTxn = {\r\n    type: TransactionType.appl,\r\n    from,\r\n    suggestedParams,\r\n    appIndex,\r\n    appOnComplete: OnApplicationComplete.DeleteApplicationOC,\r\n    appArgs,\r\n    appAccounts: accounts,\r\n    appForeignApps: foreignApps,\r\n    appForeignAssets: foreignAssets,\r\n    boxes,\r\n    note,\r\n    lease,\r\n    reKeyTo: rekeyTo,\r\n  };\r\n  return new txnBuilder.Transaction(o);\r\n}\r\n\r\n// helper for above makeApplicationDeleteTxn, instead accepting an arguments object\r\nexport function makeApplicationDeleteTxnFromObject(\r\n  o: Expand<\r\n    Pick<\r\n      RenameProperties<\r\n        MustHaveSuggestedParams<AppDeleteTxn>,\r\n        {\r\n          appAccounts: 'accounts';\r\n          appForeignApps: 'foreignApps';\r\n          appForeignAssets: 'foreignAssets';\r\n          reKeyTo: 'rekeyTo';\r\n        }\r\n      >,\r\n      | 'from'\r\n      | 'suggestedParams'\r\n      | 'appIndex'\r\n      | 'appArgs'\r\n      | 'accounts'\r\n      | 'foreignApps'\r\n      | 'foreignAssets'\r\n      | 'boxes'\r\n      | 'note'\r\n      | 'lease'\r\n      | 'rekeyTo'\r\n    >\r\n  >\r\n) {\r\n  return makeApplicationDeleteTxn(\r\n    o.from,\r\n    o.suggestedParams,\r\n    o.appIndex,\r\n    o.appArgs,\r\n    o.accounts,\r\n    o.foreignApps,\r\n    o.foreignAssets,\r\n    o.note,\r\n    o.lease,\r\n    o.rekeyTo,\r\n    o.boxes\r\n  );\r\n}\r\n\r\n/**\r\n * Make a transaction that opts in to use an application\r\n * @param from - address of sender\r\n * @param suggestedParams - a dict holding common-to-all-txns args:\r\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\r\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\r\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\r\n * firstRound - integer first protocol round on which this txn is valid\r\n * lastRound - integer last protocol round on which this txn is valid\r\n * genesisHash - string specifies hash genesis block of network in use\r\n * genesisID - string specifies genesis ID of network in use\r\n * @param appIndex - the ID of the app to join\r\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\r\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\r\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\r\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\r\n * @param note - Arbitrary data for sender to store\r\n * @param lease - Lease a transaction\r\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\r\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\r\n *\r\n * @deprecated This function will be removed in v3 in favor of {@link makeApplicationOptInTxnFromObject}\r\n */\r\nexport function makeApplicationOptInTxn(\r\n  from: AppOptInTxn['from'],\r\n  suggestedParams: MustHaveSuggestedParams<AppOptInTxn>['suggestedParams'],\r\n  appIndex: AppOptInTxn['appIndex'],\r\n  appArgs?: AppOptInTxn['appArgs'],\r\n  accounts?: AppOptInTxn['appAccounts'],\r\n  foreignApps?: AppOptInTxn['appForeignApps'],\r\n  foreignAssets?: AppOptInTxn['appForeignAssets'],\r\n  note?: AppOptInTxn['note'],\r\n  lease?: AppOptInTxn['lease'],\r\n  rekeyTo?: AppOptInTxn['reKeyTo'],\r\n  boxes?: AppOptInTxn['boxes']\r\n) {\r\n  const o: AppOptInTxn = {\r\n    type: TransactionType.appl,\r\n    from,\r\n    suggestedParams,\r\n    appIndex,\r\n    appOnComplete: OnApplicationComplete.OptInOC,\r\n    appArgs,\r\n    appAccounts: accounts,\r\n    appForeignApps: foreignApps,\r\n    appForeignAssets: foreignAssets,\r\n    boxes,\r\n    note,\r\n    lease,\r\n    reKeyTo: rekeyTo,\r\n  };\r\n  return new txnBuilder.Transaction(o);\r\n}\r\n\r\n// helper for above makeApplicationOptInTxn, instead accepting an argument object\r\nexport function makeApplicationOptInTxnFromObject(\r\n  o: Expand<\r\n    Pick<\r\n      RenameProperties<\r\n        MustHaveSuggestedParams<AppOptInTxn>,\r\n        {\r\n          appAccounts: 'accounts';\r\n          appForeignApps: 'foreignApps';\r\n          appForeignAssets: 'foreignAssets';\r\n          reKeyTo: 'rekeyTo';\r\n        }\r\n      >,\r\n      | 'from'\r\n      | 'suggestedParams'\r\n      | 'appIndex'\r\n      | 'appArgs'\r\n      | 'accounts'\r\n      | 'foreignApps'\r\n      | 'foreignAssets'\r\n      | 'boxes'\r\n      | 'note'\r\n      | 'lease'\r\n      | 'rekeyTo'\r\n    >\r\n  >\r\n) {\r\n  return makeApplicationOptInTxn(\r\n    o.from,\r\n    o.suggestedParams,\r\n    o.appIndex,\r\n    o.appArgs,\r\n    o.accounts,\r\n    o.foreignApps,\r\n    o.foreignAssets,\r\n    o.note,\r\n    o.lease,\r\n    o.rekeyTo,\r\n    o.boxes\r\n  );\r\n}\r\n\r\n/**\r\n * Make a transaction that closes out a user's state in an application\r\n * @param from - address of sender\r\n * @param suggestedParams - a dict holding common-to-all-txns args:\r\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\r\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\r\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\r\n * firstRound - integer first protocol round on which this txn is valid\r\n * lastRound - integer last protocol round on which this txn is valid\r\n * genesisHash - string specifies hash genesis block of network in use\r\n * genesisID - string specifies genesis ID of network in use\r\n * @param appIndex - the ID of the app to use\r\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\r\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\r\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\r\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\r\n * @param note - Arbitrary data for sender to store\r\n * @param lease - Lease a transaction\r\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\r\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\r\n *\r\n * @deprecated This function will be removed in v3 in favor of {@link makeApplicationCloseOutTxnFromObject}\r\n */\r\nexport function makeApplicationCloseOutTxn(\r\n  from: AppCloseOutTxn['from'],\r\n  suggestedParams: MustHaveSuggestedParams<AppCloseOutTxn>['suggestedParams'],\r\n  appIndex: AppCloseOutTxn['appIndex'],\r\n  appArgs?: AppCloseOutTxn['appArgs'],\r\n  accounts?: AppCloseOutTxn['appAccounts'],\r\n  foreignApps?: AppCloseOutTxn['appForeignApps'],\r\n  foreignAssets?: AppCloseOutTxn['appForeignAssets'],\r\n  note?: AppCloseOutTxn['note'],\r\n  lease?: AppCloseOutTxn['lease'],\r\n  rekeyTo?: AppCloseOutTxn['reKeyTo'],\r\n  boxes?: AppCloseOutTxn['boxes']\r\n) {\r\n  const o: AppCloseOutTxn = {\r\n    type: TransactionType.appl,\r\n    from,\r\n    suggestedParams,\r\n    appIndex,\r\n    appOnComplete: OnApplicationComplete.CloseOutOC,\r\n    appArgs,\r\n    appAccounts: accounts,\r\n    appForeignApps: foreignApps,\r\n    appForeignAssets: foreignAssets,\r\n    boxes,\r\n    note,\r\n    lease,\r\n    reKeyTo: rekeyTo,\r\n  };\r\n  return new txnBuilder.Transaction(o);\r\n}\r\n\r\n// helper for above makeApplicationCloseOutTxn, instead accepting an argument object\r\nexport function makeApplicationCloseOutTxnFromObject(\r\n  o: Expand<\r\n    Pick<\r\n      RenameProperties<\r\n        MustHaveSuggestedParams<AppOptInTxn>,\r\n        {\r\n          appAccounts: 'accounts';\r\n          appForeignApps: 'foreignApps';\r\n          appForeignAssets: 'foreignAssets';\r\n          reKeyTo: 'rekeyTo';\r\n        }\r\n      >,\r\n      | 'from'\r\n      | 'suggestedParams'\r\n      | 'appIndex'\r\n      | 'appArgs'\r\n      | 'accounts'\r\n      | 'foreignApps'\r\n      | 'foreignAssets'\r\n      | 'boxes'\r\n      | 'note'\r\n      | 'lease'\r\n      | 'rekeyTo'\r\n    >\r\n  >\r\n) {\r\n  return makeApplicationCloseOutTxn(\r\n    o.from,\r\n    o.suggestedParams,\r\n    o.appIndex,\r\n    o.appArgs,\r\n    o.accounts,\r\n    o.foreignApps,\r\n    o.foreignAssets,\r\n    o.note,\r\n    o.lease,\r\n    o.rekeyTo,\r\n    o.boxes\r\n  );\r\n}\r\n\r\n/**\r\n * Make a transaction that clears a user's state in an application\r\n * @param from - address of sender\r\n * @param suggestedParams - a dict holding common-to-all-txns args:\r\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\r\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\r\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\r\n * firstRound - integer first protocol round on which this txn is valid\r\n * lastRound - integer last protocol round on which this txn is valid\r\n * genesisHash - string specifies hash genesis block of network in use\r\n * genesisID - string specifies genesis ID of network in use\r\n * @param appIndex - the ID of the app to use\r\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\r\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\r\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\r\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\r\n * @param note - Arbitrary data for sender to store\r\n * @param lease - Lease a transaction\r\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\r\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\r\n *\r\n * @deprecated This function will be removed in v3 in favor of {@link makeApplicationClearStateTxnFromObject}\r\n */\r\nexport function makeApplicationClearStateTxn(\r\n  from: AppClearStateTxn['from'],\r\n  suggestedParams: MustHaveSuggestedParams<AppClearStateTxn>['suggestedParams'],\r\n  appIndex: AppClearStateTxn['appIndex'],\r\n  appArgs?: AppClearStateTxn['appArgs'],\r\n  accounts?: AppClearStateTxn['appAccounts'],\r\n  foreignApps?: AppClearStateTxn['appForeignApps'],\r\n  foreignAssets?: AppClearStateTxn['appForeignAssets'],\r\n  note?: AppClearStateTxn['note'],\r\n  lease?: AppClearStateTxn['lease'],\r\n  rekeyTo?: AppClearStateTxn['reKeyTo'],\r\n  boxes?: AppClearStateTxn['boxes']\r\n) {\r\n  const o: AppClearStateTxn = {\r\n    type: TransactionType.appl,\r\n    from,\r\n    suggestedParams,\r\n    appIndex,\r\n    appOnComplete: OnApplicationComplete.ClearStateOC,\r\n    appArgs,\r\n    appAccounts: accounts,\r\n    appForeignApps: foreignApps,\r\n    appForeignAssets: foreignAssets,\r\n    boxes,\r\n    note,\r\n    lease,\r\n    reKeyTo: rekeyTo,\r\n  };\r\n  return new txnBuilder.Transaction(o);\r\n}\r\n\r\n// helper for above makeApplicationClearStateTxn, instead accepting an argument object\r\nexport function makeApplicationClearStateTxnFromObject(\r\n  o: Expand<\r\n    Pick<\r\n      RenameProperties<\r\n        MustHaveSuggestedParams<AppOptInTxn>,\r\n        {\r\n          appAccounts: 'accounts';\r\n          appForeignApps: 'foreignApps';\r\n          appForeignAssets: 'foreignAssets';\r\n          reKeyTo: 'rekeyTo';\r\n        }\r\n      >,\r\n      | 'from'\r\n      | 'suggestedParams'\r\n      | 'appIndex'\r\n      | 'appArgs'\r\n      | 'accounts'\r\n      | 'foreignApps'\r\n      | 'foreignAssets'\r\n      | 'boxes'\r\n      | 'note'\r\n      | 'lease'\r\n      | 'rekeyTo'\r\n    >\r\n  >\r\n) {\r\n  return makeApplicationClearStateTxn(\r\n    o.from,\r\n    o.suggestedParams,\r\n    o.appIndex,\r\n    o.appArgs,\r\n    o.accounts,\r\n    o.foreignApps,\r\n    o.foreignAssets,\r\n    o.note,\r\n    o.lease,\r\n    o.rekeyTo,\r\n    o.boxes\r\n  );\r\n}\r\n\r\n/**\r\n * Make a transaction that just calls an application, doing nothing on completion\r\n * @param from - address of sender\r\n * @param suggestedParams - a dict holding common-to-all-txns args:\r\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\r\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\r\n *       If true, txn fee may fall below the ALGORAND_MIN_TX_FEE\r\n * firstRound - integer first protocol round on which this txn is valid\r\n * lastRound - integer last protocol round on which this txn is valid\r\n * genesisHash - string specifies hash genesis block of network in use\r\n * genesisID - string specifies genesis ID of network in use\r\n * @param appIndex - the ID of the app to use\r\n * @param appArgs - Array of Uint8Array, any additional arguments to the application\r\n * @param accounts - Array of Address strings, any additional accounts to supply to the application\r\n * @param foreignApps - Array of int, any other apps used by the application, identified by index\r\n * @param foreignAssets - Array of int, any assets used by the application, identified by index\r\n * @param note - Arbitrary data for sender to store\r\n * @param lease - Lease a transaction\r\n * @param rekeyTo - String representation of the Algorand address that will be used to authorize all future transactions\r\n * @param boxes - Array of BoxReference, app ID and name of box to be accessed\r\n *\r\n * @deprecated This function will be removed in v3 in favor of {@link makeApplicationNoOpTxnFromObject}\r\n */\r\nexport function makeApplicationNoOpTxn(\r\n  from: AppNoOpTxn['from'],\r\n  suggestedParams: MustHaveSuggestedParams<AppNoOpTxn>['suggestedParams'],\r\n  appIndex: AppNoOpTxn['appIndex'],\r\n  appArgs?: AppNoOpTxn['appArgs'],\r\n  accounts?: AppNoOpTxn['appAccounts'],\r\n  foreignApps?: AppNoOpTxn['appForeignApps'],\r\n  foreignAssets?: AppNoOpTxn['appForeignAssets'],\r\n  note?: AppNoOpTxn['note'],\r\n  lease?: AppNoOpTxn['lease'],\r\n  rekeyTo?: AppNoOpTxn['reKeyTo'],\r\n  boxes?: AppNoOpTxn['boxes']\r\n) {\r\n  const o: AppNoOpTxn = {\r\n    type: TransactionType.appl,\r\n    from,\r\n    suggestedParams,\r\n    appIndex,\r\n    appOnComplete: OnApplicationComplete.NoOpOC,\r\n    appArgs,\r\n    appAccounts: accounts,\r\n    appForeignApps: foreignApps,\r\n    appForeignAssets: foreignAssets,\r\n    boxes,\r\n    note,\r\n    lease,\r\n    reKeyTo: rekeyTo,\r\n  };\r\n  return new txnBuilder.Transaction(o);\r\n}\r\n\r\n// helper for above makeApplicationNoOpTxn, instead accepting an argument object\r\nexport function makeApplicationNoOpTxnFromObject(\r\n  o: Expand<\r\n    Pick<\r\n      RenameProperties<\r\n        MustHaveSuggestedParams<AppOptInTxn>,\r\n        {\r\n          appAccounts: 'accounts';\r\n          appForeignApps: 'foreignApps';\r\n          appForeignAssets: 'foreignAssets';\r\n          reKeyTo: 'rekeyTo';\r\n        }\r\n      >,\r\n      | 'from'\r\n      | 'suggestedParams'\r\n      | 'appIndex'\r\n      | 'appArgs'\r\n      | 'accounts'\r\n      | 'foreignApps'\r\n      | 'foreignAssets'\r\n      | 'boxes'\r\n      | 'note'\r\n      | 'lease'\r\n      | 'rekeyTo'\r\n    >\r\n  >\r\n) {\r\n  return makeApplicationNoOpTxn(\r\n    o.from,\r\n    o.suggestedParams,\r\n    o.appIndex,\r\n    o.appArgs,\r\n    o.accounts,\r\n    o.foreignApps,\r\n    o.foreignAssets,\r\n    o.note,\r\n    o.lease,\r\n    o.rekeyTo,\r\n    o.boxes\r\n  );\r\n}\r\n\r\nexport { OnApplicationComplete } from './types/transactions/base';\r\n\r\n/**\r\n * Generic function for creating any application call transaction.\r\n */\r\nexport function makeApplicationCallTxnFromObject(\r\n  options: Expand<\r\n    Pick<\r\n      RenameProperties<\r\n        MustHaveSuggestedParams<AppCreateTxn>,\r\n        {\r\n          appOnComplete: 'onComplete';\r\n          appAccounts: 'accounts';\r\n          appForeignApps: 'foreignApps';\r\n          appForeignAssets: 'foreignAssets';\r\n          reKeyTo: 'rekeyTo';\r\n        }\r\n      >,\r\n      | 'from'\r\n      | 'suggestedParams'\r\n      | 'appIndex'\r\n      | 'onComplete'\r\n      | 'appArgs'\r\n      | 'accounts'\r\n      | 'foreignApps'\r\n      | 'foreignAssets'\r\n      | 'boxes'\r\n      | 'note'\r\n      | 'lease'\r\n      | 'rekeyTo'\r\n      | 'extraPages'\r\n    > &\r\n      Partial<\r\n        Pick<\r\n          RenameProperties<\r\n            MustHaveSuggestedParams<AppCreateTxn>,\r\n            {\r\n              appApprovalProgram: 'approvalProgram';\r\n              appClearProgram: 'clearProgram';\r\n              appLocalInts: 'numLocalInts';\r\n              appLocalByteSlices: 'numLocalByteSlices';\r\n              appGlobalInts: 'numGlobalInts';\r\n              appGlobalByteSlices: 'numGlobalByteSlices';\r\n            }\r\n          >,\r\n          | 'approvalProgram'\r\n          | 'clearProgram'\r\n          | 'numLocalInts'\r\n          | 'numLocalByteSlices'\r\n          | 'numGlobalInts'\r\n          | 'numGlobalByteSlices'\r\n        >\r\n      >\r\n  >\r\n) {\r\n  const o: AppCreateTxn = {\r\n    type: TransactionType.appl,\r\n    from: options.from,\r\n    suggestedParams: options.suggestedParams,\r\n    appIndex: options.appIndex,\r\n    appOnComplete: options.onComplete,\r\n    appLocalInts: options.numLocalInts,\r\n    appLocalByteSlices: options.numLocalByteSlices,\r\n    appGlobalInts: options.numGlobalInts,\r\n    appGlobalByteSlices: options.numGlobalByteSlices,\r\n    appApprovalProgram: options.approvalProgram,\r\n    appClearProgram: options.clearProgram,\r\n    appArgs: options.appArgs,\r\n    appAccounts: options.accounts,\r\n    appForeignApps: options.foreignApps,\r\n    appForeignAssets: options.foreignAssets,\r\n    boxes: options.boxes,\r\n    note: options.note,\r\n    lease: options.lease,\r\n    reKeyTo: options.rekeyTo,\r\n    extraPages: options.extraPages,\r\n  };\r\n  return new txnBuilder.Transaction(o);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
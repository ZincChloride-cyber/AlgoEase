{"ast":null,"code":"import JSONRequest from '../jsonrequest';\n/**\r\n * Returns information about indexed block headers.\r\n *\r\n * #### Example\r\n * ```typescript\r\n * const bhs = await indexerClient.searchForBlockHeaders().do();\r\n * ```\r\n *\r\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2block-headers)\r\n * @category GET\r\n */\nexport default class SearchForBlockHeaders extends JSONRequest {\n  /**\r\n   * @returns `/v2/block-headers`\r\n   */\n  // eslint-disable-next-line class-methods-use-this\n  path() {\n    return '/v2/block-headers';\n  }\n  /**\r\n   * Accounts marked as absent in the block header's participation updates.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const address1 = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const address2 = \"4H5UNRBJ2Q6JENAXQ6HNTGKLKINP4J4VTQBEPK5F3I6RDICMZBPGNH6KD4\";\r\n   * const bhs = await indexerClient\r\n   *        .searchForBlockHeaders()\r\n   *        .absent([address1,address2])\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param absent - a comma separated list of addresses\r\n   * @category query\r\n   */\n  absent(absent) {\n    this.query.absent = absent;\n    return this;\n  }\n  /**\r\n   * Include results after the given time.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const afterTime = \"2022-10-21T00:00:11.55Z\";\r\n   * const bhs = await indexerClient\r\n   *        .searchForBlockHeaders()\r\n   *        .afterTime(afterTime)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param after - rfc3339 string\r\n   * @category query\r\n   */\n  afterTime(after) {\n    this.query['after-time'] = after;\n    return this;\n  }\n  /**\r\n   * Include results before the given time.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const beforeTime = \"2022-02-02T20:20:22.02Z\";\r\n   * const bhs = await indexerClient\r\n   *        .searchForBlockHeaders()\r\n   *        .beforeTime(beforeTime)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param before - rfc3339 string\r\n   * @category query\r\n   */\n  beforeTime(before) {\n    this.query['before-time'] = before;\n    return this;\n  }\n  /**\r\n   * Accounts marked as expired in the block header's participation updates.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const address1 = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const address2 = \"4H5UNRBJ2Q6JENAXQ6HNTGKLKINP4J4VTQBEPK5F3I6RDICMZBPGNH6KD4\";\r\n   * const bhs = await indexerClient\r\n   *        .searchForBlockHeaders()\r\n   *        .expired([address1,address2])\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param expired - - a comma separated list of addresses\r\n   * @category query\r\n   */\n  expired(expired) {\n    this.query.expired = expired;\n    return this;\n  }\n  /**\r\n   * Maximum number of results to return.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxResults = 25;\r\n   * const bhs = await indexerClient\r\n   *        .searchForBlockHeaders()\r\n   *        .limit(maxResults)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param limit\r\n   * @category query\r\n   */\n  limit(limit) {\n    this.query.limit = limit;\n    return this;\n  }\n  /**\r\n   * Include results at or before the specified max-round.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxRound = 18309917;\r\n   * const bhs = await indexerClient\r\n   *        .searchForBlockHeaders()\r\n   *        .maxRound(maxRound)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param round\r\n   * @category query\r\n   */\n  maxRound(round) {\n    this.query['max-round'] = round;\n    return this;\n  }\n  /**\r\n   * Include results at or after the specified min-round.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const minRound = 18309917;\r\n   * const bhs = await indexerClient\r\n   *        .searchForBlockHeaders()\r\n   *        .minRound(minRound)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param round\r\n   * @category query\r\n   */\n  minRound(round) {\n    this.query['min-round'] = round;\n    return this;\n  }\n  /**\r\n   * The next page of results.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxResults = 25;\r\n   *\r\n   * const bh1 = await indexerClient\r\n   *        .searchForBlockHeaders()\r\n   *        .limit(maxResults)\r\n   *        .do();\r\n   *\r\n   * const bh2 = await indexerClient\r\n   *        .searchForBlockHeaders()\r\n   *        .limit(maxResults)\r\n   *        .nextToken(bh1[\"next-token\"])\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param nextToken - provided by the previous results\r\n   * @category query\r\n   */\n  nextToken(nextToken) {\n    this.query.next = nextToken;\n    return this;\n  }\n  /**\r\n   * Accounts marked as proposer in the block header's participation updates.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const address1 = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const address2 = \"4H5UNRBJ2Q6JENAXQ6HNTGKLKINP4J4VTQBEPK5F3I6RDICMZBPGNH6KD4\";\r\n   * const bhs = await indexerClient\r\n   *        .searchForBlockHeaders()\r\n   *        .proposers([address1,address2])\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param proposers - a comma separated list of addresses\r\n   * @category query\r\n   */\n  proposers(proposers) {\n    this.query.proposers = proposers;\n    return this;\n  }\n}","map":{"version":3,"names":["JSONRequest","SearchForBlockHeaders","path","absent","query","afterTime","after","beforeTime","before","expired","limit","maxRound","round","minRound","nextToken","next","proposers"],"sources":["C:\\Users\\Aditya singh\\AlgoEase\\frontend\\node_modules\\algosdk\\src\\client\\v2\\indexer\\searchForBlockHeaders.ts"],"sourcesContent":["import JSONRequest from '../jsonrequest';\r\n\r\n/**\r\n * Returns information about indexed block headers.\r\n *\r\n * #### Example\r\n * ```typescript\r\n * const bhs = await indexerClient.searchForBlockHeaders().do();\r\n * ```\r\n *\r\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2block-headers)\r\n * @category GET\r\n */\r\nexport default class SearchForBlockHeaders extends JSONRequest {\r\n  /**\r\n   * @returns `/v2/block-headers`\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  path() {\r\n    return '/v2/block-headers';\r\n  }\r\n\r\n  /**\r\n   * Accounts marked as absent in the block header's participation updates.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const address1 = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const address2 = \"4H5UNRBJ2Q6JENAXQ6HNTGKLKINP4J4VTQBEPK5F3I6RDICMZBPGNH6KD4\";\r\n   * const bhs = await indexerClient\r\n   *        .searchForBlockHeaders()\r\n   *        .absent([address1,address2])\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param absent - a comma separated list of addresses\r\n   * @category query\r\n   */\r\n  absent(absent: string[]) {\r\n    this.query.absent = absent;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Include results after the given time.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const afterTime = \"2022-10-21T00:00:11.55Z\";\r\n   * const bhs = await indexerClient\r\n   *        .searchForBlockHeaders()\r\n   *        .afterTime(afterTime)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param after - rfc3339 string\r\n   * @category query\r\n   */\r\n  afterTime(after: string) {\r\n    this.query['after-time'] = after;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Include results before the given time.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const beforeTime = \"2022-02-02T20:20:22.02Z\";\r\n   * const bhs = await indexerClient\r\n   *        .searchForBlockHeaders()\r\n   *        .beforeTime(beforeTime)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param before - rfc3339 string\r\n   * @category query\r\n   */\r\n  beforeTime(before: string) {\r\n    this.query['before-time'] = before;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Accounts marked as expired in the block header's participation updates.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const address1 = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const address2 = \"4H5UNRBJ2Q6JENAXQ6HNTGKLKINP4J4VTQBEPK5F3I6RDICMZBPGNH6KD4\";\r\n   * const bhs = await indexerClient\r\n   *        .searchForBlockHeaders()\r\n   *        .expired([address1,address2])\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param expired - - a comma separated list of addresses\r\n   * @category query\r\n   */\r\n  expired(expired: string[]) {\r\n    this.query.expired = expired;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Maximum number of results to return.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxResults = 25;\r\n   * const bhs = await indexerClient\r\n   *        .searchForBlockHeaders()\r\n   *        .limit(maxResults)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param limit\r\n   * @category query\r\n   */\r\n  limit(limit: number) {\r\n    this.query.limit = limit;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Include results at or before the specified max-round.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxRound = 18309917;\r\n   * const bhs = await indexerClient\r\n   *        .searchForBlockHeaders()\r\n   *        .maxRound(maxRound)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param round\r\n   * @category query\r\n   */\r\n  maxRound(round: number) {\r\n    this.query['max-round'] = round;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Include results at or after the specified min-round.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const minRound = 18309917;\r\n   * const bhs = await indexerClient\r\n   *        .searchForBlockHeaders()\r\n   *        .minRound(minRound)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param round\r\n   * @category query\r\n   */\r\n  minRound(round: number) {\r\n    this.query['min-round'] = round;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * The next page of results.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxResults = 25;\r\n   *\r\n   * const bh1 = await indexerClient\r\n   *        .searchForBlockHeaders()\r\n   *        .limit(maxResults)\r\n   *        .do();\r\n   *\r\n   * const bh2 = await indexerClient\r\n   *        .searchForBlockHeaders()\r\n   *        .limit(maxResults)\r\n   *        .nextToken(bh1[\"next-token\"])\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param nextToken - provided by the previous results\r\n   * @category query\r\n   */\r\n  nextToken(nextToken: string) {\r\n    this.query.next = nextToken;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Accounts marked as proposer in the block header's participation updates.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const address1 = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const address2 = \"4H5UNRBJ2Q6JENAXQ6HNTGKLKINP4J4VTQBEPK5F3I6RDICMZBPGNH6KD4\";\r\n   * const bhs = await indexerClient\r\n   *        .searchForBlockHeaders()\r\n   *        .proposers([address1,address2])\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param proposers - a comma separated list of addresses\r\n   * @category query\r\n   */\r\n  proposers(proposers: string[]) {\r\n    this.query.proposers = proposers;\r\n    return this;\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,gBAAgB;AAExC;;;;;;;;;;;AAWA,eAAc,MAAOC,qBAAsB,SAAQD,WAAW;EAC5D;;;EAGA;EACAE,IAAIA,CAAA;IACF,OAAO,mBAAmB;EAC5B;EAEA;;;;;;;;;;;;;;;;EAgBAC,MAAMA,CAACA,MAAgB;IACrB,IAAI,CAACC,KAAK,CAACD,MAAM,GAAGA,MAAM;IAC1B,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;EAeAE,SAASA,CAACC,KAAa;IACrB,IAAI,CAACF,KAAK,CAAC,YAAY,CAAC,GAAGE,KAAK;IAChC,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;EAeAC,UAAUA,CAACC,MAAc;IACvB,IAAI,CAACJ,KAAK,CAAC,aAAa,CAAC,GAAGI,MAAM;IAClC,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;;EAgBAC,OAAOA,CAACA,OAAiB;IACvB,IAAI,CAACL,KAAK,CAACK,OAAO,GAAGA,OAAO;IAC5B,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;EAeAC,KAAKA,CAACA,KAAa;IACjB,IAAI,CAACN,KAAK,CAACM,KAAK,GAAGA,KAAK;IACxB,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;EAeAC,QAAQA,CAACC,KAAa;IACpB,IAAI,CAACR,KAAK,CAAC,WAAW,CAAC,GAAGQ,KAAK;IAC/B,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;EAeAC,QAAQA,CAACD,KAAa;IACpB,IAAI,CAACR,KAAK,CAAC,WAAW,CAAC,GAAGQ,KAAK;IAC/B,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;;;;;;;;EAsBAE,SAASA,CAACA,SAAiB;IACzB,IAAI,CAACV,KAAK,CAACW,IAAI,GAAGD,SAAS;IAC3B,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;;EAgBAE,SAASA,CAACA,SAAmB;IAC3B,IAAI,CAACZ,KAAK,CAACY,SAAS,GAAGA,SAAS;IAChC,OAAO,IAAI;EACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
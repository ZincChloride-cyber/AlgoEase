{"ast":null,"code":"import { Buffer } from 'buffer';\nimport JSONRequest from '../jsonrequest';\nimport { concatArrays } from '../../../utils/utils';\n/**\r\n * Sets the default header (if not previously set) for sending a raw\r\n * transaction.\r\n * @param headers - A headers object\r\n */\nexport function setSendTransactionHeaders(headers = {}) {\n  let hdrs = headers;\n  if (Object.keys(hdrs).every(key => key.toLowerCase() !== 'content-type')) {\n    hdrs = {\n      ...headers\n    };\n    hdrs['Content-Type'] = 'application/x-binary';\n  }\n  return hdrs;\n}\nfunction isByteArray(array) {\n  return array && array.byteLength !== undefined;\n}\n/**\r\n * broadcasts the passed signed txns to the network\r\n */\nexport default class SendRawTransaction extends JSONRequest {\n  constructor(c, stxOrStxs) {\n    super(c);\n    let forPosting = stxOrStxs;\n    if (Array.isArray(stxOrStxs)) {\n      if (!stxOrStxs.every(isByteArray)) {\n        throw new TypeError('Array elements must be byte arrays');\n      }\n      // Flatten into a single Uint8Array\n      forPosting = concatArrays(...stxOrStxs);\n    } else if (!isByteArray(forPosting)) {\n      throw new TypeError('Argument must be byte array');\n    }\n    this.txnBytesToPost = forPosting;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  path() {\n    return '/v2/transactions';\n  }\n  async do(headers = {}) {\n    const txHeaders = setSendTransactionHeaders(headers);\n    const res = await this.c.post(this.path(), Buffer.from(this.txnBytesToPost), txHeaders);\n    return res.body;\n  }\n}","map":{"version":3,"names":["Buffer","JSONRequest","concatArrays","setSendTransactionHeaders","headers","hdrs","Object","keys","every","key","toLowerCase","isByteArray","array","byteLength","undefined","SendRawTransaction","constructor","c","stxOrStxs","forPosting","Array","isArray","TypeError","txnBytesToPost","path","do","txHeaders","res","post","from","body"],"sources":["C:\\Users\\Aditya singh\\AlgoEase\\frontend\\node_modules\\algosdk\\src\\client\\v2\\algod\\sendRawTransaction.ts"],"sourcesContent":["import { Buffer } from 'buffer';\r\nimport JSONRequest from '../jsonrequest';\r\nimport HTTPClient from '../../client';\r\nimport { concatArrays } from '../../../utils/utils';\r\n\r\n/**\r\n * Sets the default header (if not previously set) for sending a raw\r\n * transaction.\r\n * @param headers - A headers object\r\n */\r\nexport function setSendTransactionHeaders(headers = {}) {\r\n  let hdrs = headers;\r\n  if (Object.keys(hdrs).every((key) => key.toLowerCase() !== 'content-type')) {\r\n    hdrs = { ...headers };\r\n    hdrs['Content-Type'] = 'application/x-binary';\r\n  }\r\n  return hdrs;\r\n}\r\n\r\nfunction isByteArray(array: any): array is Uint8Array {\r\n  return array && array.byteLength !== undefined;\r\n}\r\n\r\n/**\r\n * broadcasts the passed signed txns to the network\r\n */\r\nexport default class SendRawTransaction extends JSONRequest {\r\n  private txnBytesToPost: Uint8Array;\r\n\r\n  constructor(c: HTTPClient, stxOrStxs: Uint8Array | Uint8Array[]) {\r\n    super(c);\r\n\r\n    let forPosting = stxOrStxs;\r\n    if (Array.isArray(stxOrStxs)) {\r\n      if (!stxOrStxs.every(isByteArray)) {\r\n        throw new TypeError('Array elements must be byte arrays');\r\n      }\r\n      // Flatten into a single Uint8Array\r\n      forPosting = concatArrays(...stxOrStxs);\r\n    } else if (!isByteArray(forPosting)) {\r\n      throw new TypeError('Argument must be byte array');\r\n    }\r\n    this.txnBytesToPost = forPosting;\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  path() {\r\n    return '/v2/transactions';\r\n  }\r\n\r\n  async do(headers = {}) {\r\n    const txHeaders = setSendTransactionHeaders(headers);\r\n    const res = await this.c.post(\r\n      this.path(),\r\n      Buffer.from(this.txnBytesToPost),\r\n      txHeaders\r\n    );\r\n    return res.body;\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,WAAW,MAAM,gBAAgB;AAExC,SAASC,YAAY,QAAQ,sBAAsB;AAEnD;;;;;AAKA,OAAM,SAAUC,yBAAyBA,CAACC,OAAO,GAAG,EAAE;EACpD,IAAIC,IAAI,GAAGD,OAAO;EAClB,IAAIE,MAAM,CAACC,IAAI,CAACF,IAAI,CAAC,CAACG,KAAK,CAAEC,GAAG,IAAKA,GAAG,CAACC,WAAW,EAAE,KAAK,cAAc,CAAC,EAAE;IAC1EL,IAAI,GAAG;MAAE,GAAGD;IAAO,CAAE;IACrBC,IAAI,CAAC,cAAc,CAAC,GAAG,sBAAsB;;EAE/C,OAAOA,IAAI;AACb;AAEA,SAASM,WAAWA,CAACC,KAAU;EAC7B,OAAOA,KAAK,IAAIA,KAAK,CAACC,UAAU,KAAKC,SAAS;AAChD;AAEA;;;AAGA,eAAc,MAAOC,kBAAmB,SAAQd,WAAW;EAGzDe,YAAYC,CAAa,EAAEC,SAAoC;IAC7D,KAAK,CAACD,CAAC,CAAC;IAER,IAAIE,UAAU,GAAGD,SAAS;IAC1B,IAAIE,KAAK,CAACC,OAAO,CAACH,SAAS,CAAC,EAAE;MAC5B,IAAI,CAACA,SAAS,CAACV,KAAK,CAACG,WAAW,CAAC,EAAE;QACjC,MAAM,IAAIW,SAAS,CAAC,oCAAoC,CAAC;;MAE3D;MACAH,UAAU,GAAGjB,YAAY,CAAC,GAAGgB,SAAS,CAAC;KACxC,MAAM,IAAI,CAACP,WAAW,CAACQ,UAAU,CAAC,EAAE;MACnC,MAAM,IAAIG,SAAS,CAAC,6BAA6B,CAAC;;IAEpD,IAAI,CAACC,cAAc,GAAGJ,UAAU;EAClC;EAEA;EACAK,IAAIA,CAAA;IACF,OAAO,kBAAkB;EAC3B;EAEA,MAAMC,EAAEA,CAACrB,OAAO,GAAG,EAAE;IACnB,MAAMsB,SAAS,GAAGvB,yBAAyB,CAACC,OAAO,CAAC;IACpD,MAAMuB,GAAG,GAAG,MAAM,IAAI,CAACV,CAAC,CAACW,IAAI,CAC3B,IAAI,CAACJ,IAAI,EAAE,EACXxB,MAAM,CAAC6B,IAAI,CAAC,IAAI,CAACN,cAAc,CAAC,EAChCG,SAAS,CACV;IACD,OAAOC,GAAG,CAACG,IAAI;EACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
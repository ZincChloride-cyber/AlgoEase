{"ast":null,"code":"import JSONRequest from '../jsonrequest';\n/**\r\n * Returns information about indexed accounts.\r\n *\r\n * #### Example\r\n * ```typescript\r\n * const accounts = await indexerClient.searchAccounts().do();\r\n * ```\r\n *\r\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accounts)\r\n * @category GET\r\n */\nexport default class SearchAccounts extends JSONRequest {\n  /**\r\n   * @returns `/v2/accounts`\r\n   */\n  // eslint-disable-next-line class-methods-use-this\n  path() {\n    return '/v2/accounts';\n  }\n  /**\r\n   * Filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\r\n   *\r\n   * #### Example 1\r\n   * ```typescript\r\n   * const minBalance = 300000;\r\n   * const accounts = await indexerClient\r\n   *        .searchAccounts()\r\n   *        .currencyGreaterThan(minBalance - 1)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * #### Example 2\r\n   * ```typescript\r\n   * const assetID = 163650;\r\n   * const minBalance = 300000;\r\n   * const accounts = await indexerClient\r\n   *        .searchAccounts()\r\n   *        .assetID(assetID)\r\n   *        .currencyGreaterThan(minBalance - 1)\r\n   *        .do();\r\n   * ```\r\n   * @remarks\r\n   * If you are looking for accounts with the currency amount greater than 0, simply construct the query without `currencyGreaterThan` because it doesn't accept `-1`, and passing the `0` `currency-greater-than` value would exclude accounts with a 0 amount.\r\n   *\r\n   * @param greater\r\n   * @category query\r\n   */\n  currencyGreaterThan(greater) {\n    // We convert the following to a string for now to correctly include zero values in request parameters.\n    this.query['currency-greater-than'] = greater.toString();\n    return this;\n  }\n  /**\r\n   * Filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\r\n   *\r\n   * #### Example 1\r\n   * ```typescript\r\n   * const maxBalance = 500000;\r\n   * const accounts = await indexerClient\r\n   *        .searchAccounts()\r\n   *        .currencyLessThan(maxBalance + 1)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * #### Example 2\r\n   * ```typescript\r\n   * const assetID = 163650;\r\n   * const maxBalance = 500000;\r\n   * const accounts = await indexerClient\r\n   *        .searchAccounts()\r\n   *        .assetID(assetID)\r\n   *        .currencyLessThan(maxBalance + 1)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param lesser\r\n   * @category query\r\n   */\n  currencyLessThan(lesser) {\n    this.query['currency-less-than'] = lesser;\n    return this;\n  }\n  /**\r\n   * Maximum number of results to return.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxResults = 25;\r\n   * const accounts = await indexerClient\r\n   *        .searchAccounts()\r\n   *        .limit(maxResults)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param limit\r\n   * @category query\r\n   */\n  limit(limit) {\n    this.query.limit = limit;\n    return this;\n  }\n  /**\r\n   * Asset ID to filter with.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const assetID = 163650;\r\n   * const accounts = await indexerClient\r\n   *        .searchAccounts()\r\n   *        .assetID(assetID)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param id\r\n   * @category query\r\n   */\n  assetID(id) {\n    this.query['asset-id'] = id;\n    return this;\n  }\n  /**\r\n   * The next page of results.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxResults = 25;\r\n   *\r\n   * const accountsPage1 = await indexerClient\r\n   *        .searchAccounts()\r\n   *        .limit(maxResults)\r\n   *        .do();\r\n   *\r\n   * const accountsPage2 = await indexerClient\r\n   *        .searchAccounts()\r\n   *        .limit(maxResults)\r\n   *        .nextToken(accountsPage1[\"next-token\"])\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param nextToken - provided by the previous results\r\n   * @category query\r\n   */\n  nextToken(nextToken) {\n    this.query.next = nextToken;\n    return this;\n  }\n  /**\r\n   * Include results for the specified round.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const targetBlock = 18309917;\r\n   * const accounts = await indexerClient\r\n   *        .searchAccounts()\r\n   *        .round(targetBlock)\r\n   *        .do();\r\n   * ```\r\n   * @remarks For performance reasons, this parameter may be disabled on some configurations.\r\n   * @param round\r\n   * @category query\r\n   */\n  round(round) {\n    this.query.round = round;\n    return this;\n  }\n  /**\r\n   * Include accounts that use this spending key.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const authAddr = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accounts = await indexerClient\r\n   *        .searchAccounts()\r\n   *        .authAddr(authAddr)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param authAddr\r\n   */\n  authAddr(authAddr) {\n    this.query['auth-addr'] = authAddr;\n    return this;\n  }\n  /**\r\n   * Filter for this application.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const appId = 60553466;\r\n   * const accounts = await indexerClient\r\n   *        .searchAccounts()\r\n   *        .applicationID(appId)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param applicationID\r\n   * @category query\r\n   */\n  applicationID(applicationID) {\n    this.query['application-id'] = applicationID;\n    return this;\n  }\n  /**\r\n   * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\r\n   *\r\n   * #### Example 1\r\n   * ```typescript\r\n   * const assetId = 163650;\r\n   * const accounts = await indexerClient\r\n   *        .searchAccounts()\r\n   *        .includeAll(false)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * #### Example 2\r\n   * ```typescript\r\n   * const assetId = 163650;\r\n   * const accounts = await indexerClient\r\n   *        .searchAccounts()\r\n   *        .includeAll()\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param value - default true when called without passing a value\r\n   * @category query\r\n   */\n  includeAll(value = true) {\n    this.query['include-all'] = value;\n    return this;\n  }\n  /**\r\n   * Exclude additional items such as asset holdings, application local data stored for this account, asset parameters created by this account, and application parameters created by this account.\r\n   *\r\n   * #### Example 1\r\n   * ```typescript\r\n   * const accounts = await indexerClient\r\n   *        .searchAccounts()\r\n   *        .exclude(\"all\")\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * #### Example 2\r\n   * ```typescript\r\n   * const accounts = await indexerClient\r\n   *        .searchAccounts()\r\n   *        .exclude(\"assets,created-assets\")\r\n   *        .do();\r\n   * ```\r\n   * @remarks By default, it behaves as exclude=none\r\n   * @param exclude - Array of `all`, `assets`, `created-assets`, `apps-local-state`, `created-apps`, `none`\r\n   * @category query\r\n   */\n  exclude(exclude) {\n    this.query.exclude = exclude;\n    return this;\n  }\n}","map":{"version":3,"names":["JSONRequest","SearchAccounts","path","currencyGreaterThan","greater","query","toString","currencyLessThan","lesser","limit","assetID","id","nextToken","next","round","authAddr","applicationID","includeAll","value","exclude"],"sources":["C:\\Users\\Aditya singh\\AlgoEase\\frontend\\node_modules\\algosdk\\src\\client\\v2\\indexer\\searchAccounts.ts"],"sourcesContent":["import JSONRequest from '../jsonrequest';\r\n\r\n/**\r\n * Returns information about indexed accounts.\r\n *\r\n * #### Example\r\n * ```typescript\r\n * const accounts = await indexerClient.searchAccounts().do();\r\n * ```\r\n *\r\n * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accounts)\r\n * @category GET\r\n */\r\nexport default class SearchAccounts extends JSONRequest {\r\n  /**\r\n   * @returns `/v2/accounts`\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  path() {\r\n    return '/v2/accounts';\r\n  }\r\n\r\n  /**\r\n   * Filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\r\n   *\r\n   * #### Example 1\r\n   * ```typescript\r\n   * const minBalance = 300000;\r\n   * const accounts = await indexerClient\r\n   *        .searchAccounts()\r\n   *        .currencyGreaterThan(minBalance - 1)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * #### Example 2\r\n   * ```typescript\r\n   * const assetID = 163650;\r\n   * const minBalance = 300000;\r\n   * const accounts = await indexerClient\r\n   *        .searchAccounts()\r\n   *        .assetID(assetID)\r\n   *        .currencyGreaterThan(minBalance - 1)\r\n   *        .do();\r\n   * ```\r\n   * @remarks\r\n   * If you are looking for accounts with the currency amount greater than 0, simply construct the query without `currencyGreaterThan` because it doesn't accept `-1`, and passing the `0` `currency-greater-than` value would exclude accounts with a 0 amount.\r\n   *\r\n   * @param greater\r\n   * @category query\r\n   */\r\n  currencyGreaterThan(greater: number) {\r\n    // We convert the following to a string for now to correctly include zero values in request parameters.\r\n    this.query['currency-greater-than'] = greater.toString();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\r\n   *\r\n   * #### Example 1\r\n   * ```typescript\r\n   * const maxBalance = 500000;\r\n   * const accounts = await indexerClient\r\n   *        .searchAccounts()\r\n   *        .currencyLessThan(maxBalance + 1)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * #### Example 2\r\n   * ```typescript\r\n   * const assetID = 163650;\r\n   * const maxBalance = 500000;\r\n   * const accounts = await indexerClient\r\n   *        .searchAccounts()\r\n   *        .assetID(assetID)\r\n   *        .currencyLessThan(maxBalance + 1)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param lesser\r\n   * @category query\r\n   */\r\n  currencyLessThan(lesser: number) {\r\n    this.query['currency-less-than'] = lesser;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Maximum number of results to return.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxResults = 25;\r\n   * const accounts = await indexerClient\r\n   *        .searchAccounts()\r\n   *        .limit(maxResults)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param limit\r\n   * @category query\r\n   */\r\n  limit(limit: number) {\r\n    this.query.limit = limit;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Asset ID to filter with.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const assetID = 163650;\r\n   * const accounts = await indexerClient\r\n   *        .searchAccounts()\r\n   *        .assetID(assetID)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param id\r\n   * @category query\r\n   */\r\n  assetID(id: number) {\r\n    this.query['asset-id'] = id;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * The next page of results.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxResults = 25;\r\n   *\r\n   * const accountsPage1 = await indexerClient\r\n   *        .searchAccounts()\r\n   *        .limit(maxResults)\r\n   *        .do();\r\n   *\r\n   * const accountsPage2 = await indexerClient\r\n   *        .searchAccounts()\r\n   *        .limit(maxResults)\r\n   *        .nextToken(accountsPage1[\"next-token\"])\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param nextToken - provided by the previous results\r\n   * @category query\r\n   */\r\n  nextToken(nextToken: string) {\r\n    this.query.next = nextToken;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Include results for the specified round.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const targetBlock = 18309917;\r\n   * const accounts = await indexerClient\r\n   *        .searchAccounts()\r\n   *        .round(targetBlock)\r\n   *        .do();\r\n   * ```\r\n   * @remarks For performance reasons, this parameter may be disabled on some configurations.\r\n   * @param round\r\n   * @category query\r\n   */\r\n  round(round: number) {\r\n    this.query.round = round;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Include accounts that use this spending key.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const authAddr = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accounts = await indexerClient\r\n   *        .searchAccounts()\r\n   *        .authAddr(authAddr)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param authAddr\r\n   */\r\n  authAddr(authAddr: string) {\r\n    this.query['auth-addr'] = authAddr;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Filter for this application.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const appId = 60553466;\r\n   * const accounts = await indexerClient\r\n   *        .searchAccounts()\r\n   *        .applicationID(appId)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param applicationID\r\n   * @category query\r\n   */\r\n  applicationID(applicationID: number) {\r\n    this.query['application-id'] = applicationID;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Includes all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates\r\n   *\r\n   * #### Example 1\r\n   * ```typescript\r\n   * const assetId = 163650;\r\n   * const accounts = await indexerClient\r\n   *        .searchAccounts()\r\n   *        .includeAll(false)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * #### Example 2\r\n   * ```typescript\r\n   * const assetId = 163650;\r\n   * const accounts = await indexerClient\r\n   *        .searchAccounts()\r\n   *        .includeAll()\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param value - default true when called without passing a value\r\n   * @category query\r\n   */\r\n  includeAll(value = true) {\r\n    this.query['include-all'] = value;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Exclude additional items such as asset holdings, application local data stored for this account, asset parameters created by this account, and application parameters created by this account.\r\n   *\r\n   * #### Example 1\r\n   * ```typescript\r\n   * const accounts = await indexerClient\r\n   *        .searchAccounts()\r\n   *        .exclude(\"all\")\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * #### Example 2\r\n   * ```typescript\r\n   * const accounts = await indexerClient\r\n   *        .searchAccounts()\r\n   *        .exclude(\"assets,created-assets\")\r\n   *        .do();\r\n   * ```\r\n   * @remarks By default, it behaves as exclude=none\r\n   * @param exclude - Array of `all`, `assets`, `created-assets`, `apps-local-state`, `created-apps`, `none`\r\n   * @category query\r\n   */\r\n  exclude(exclude: string) {\r\n    this.query.exclude = exclude;\r\n    return this;\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,gBAAgB;AAExC;;;;;;;;;;;AAWA,eAAc,MAAOC,cAAe,SAAQD,WAAW;EACrD;;;EAGA;EACAE,IAAIA,CAAA;IACF,OAAO,cAAc;EACvB;EAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4BAC,mBAAmBA,CAACC,OAAe;IACjC;IACA,IAAI,CAACC,KAAK,CAAC,uBAAuB,CAAC,GAAGD,OAAO,CAACE,QAAQ,EAAE;IACxD,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;;;;;;;;;;;;EA0BAC,gBAAgBA,CAACC,MAAc;IAC7B,IAAI,CAACH,KAAK,CAAC,oBAAoB,CAAC,GAAGG,MAAM;IACzC,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;EAeAC,KAAKA,CAACA,KAAa;IACjB,IAAI,CAACJ,KAAK,CAACI,KAAK,GAAGA,KAAK;IACxB,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;EAeAC,OAAOA,CAACC,EAAU;IAChB,IAAI,CAACN,KAAK,CAAC,UAAU,CAAC,GAAGM,EAAE;IAC3B,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;;;;;;;;EAsBAC,SAASA,CAACA,SAAiB;IACzB,IAAI,CAACP,KAAK,CAACQ,IAAI,GAAGD,SAAS;IAC3B,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;EAeAE,KAAKA,CAACA,KAAa;IACjB,IAAI,CAACT,KAAK,CAACS,KAAK,GAAGA,KAAK;IACxB,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;EAcAC,QAAQA,CAACA,QAAgB;IACvB,IAAI,CAACV,KAAK,CAAC,WAAW,CAAC,GAAGU,QAAQ;IAClC,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;EAeAC,aAAaA,CAACA,aAAqB;IACjC,IAAI,CAACX,KAAK,CAAC,gBAAgB,CAAC,GAAGW,aAAa;IAC5C,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;;;;;;;;;;EAwBAC,UAAUA,CAACC,KAAK,GAAG,IAAI;IACrB,IAAI,CAACb,KAAK,CAAC,aAAa,CAAC,GAAGa,KAAK;IACjC,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;;;;;;;;EAsBAC,OAAOA,CAACA,OAAe;IACrB,IAAI,CAACd,KAAK,CAACc,OAAO,GAAGA,OAAO;IAC5B,OAAO,IAAI;EACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
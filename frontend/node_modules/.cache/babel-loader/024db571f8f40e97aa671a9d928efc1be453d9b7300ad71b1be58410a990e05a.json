{"ast":null,"code":"/**\r\n * NOTICE: This file was generated. Editing this file manually is not recommended.\r\n */\n/* eslint-disable no-use-before-define */\nimport { Buffer } from 'buffer';\nimport BaseModel from '../../basemodel';\n/**\r\n * Account information at a given round.\r\n * Definition:\r\n * data/basics/userBalance.go : AccountData\r\n */\nexport class Account extends BaseModel {\n  /**\r\n   * Creates a new `Account` object.\r\n   * @param address - the account public key\r\n   * @param amount - (algo) total number of MicroAlgos in the account\r\n   * @param amountWithoutPendingRewards - specifies the amount of MicroAlgos in the account, without the pending rewards.\r\n   * @param minBalance - MicroAlgo balance required by the account.\r\n   * The requirement grows based on asset and application usage.\r\n   * @param pendingRewards - amount of MicroAlgos of pending rewards in this account.\r\n   * @param rewards - (ern) total rewards of MicroAlgos the account has received, including pending\r\n   * rewards.\r\n   * @param round - The round for which this information is relevant.\r\n   * @param status - (onl) delegation status of the account's MicroAlgos\r\n   * * Offline - indicates that the associated account is delegated.\r\n   * * Online - indicates that the associated account used as part of the delegation\r\n   * pool.\r\n   * * NotParticipating - indicates that the associated account is neither a\r\n   * delegator nor a delegate.\r\n   * @param totalAppsOptedIn - The count of all applications that have been opted in, equivalent to the count\r\n   * of application local data (AppLocalState objects) stored in this account.\r\n   * @param totalAssetsOptedIn - The count of all assets that have been opted in, equivalent to the count of\r\n   * AssetHolding objects held by this account.\r\n   * @param totalCreatedApps - The count of all apps (AppParams objects) created by this account.\r\n   * @param totalCreatedAssets - The count of all assets (AssetParams objects) created by this account.\r\n   * @param appsLocalState - (appl) applications local data stored in this account.\r\n   * Note the raw object uses `map[int] -> AppLocalState` for this type.\r\n   * @param appsTotalExtraPages - (teap) the sum of all extra application program pages for this account.\r\n   * @param appsTotalSchema - (tsch) stores the sum of all of the local schemas and global schemas in this\r\n   * account.\r\n   * Note: the raw account uses `StateSchema` for this type.\r\n   * @param assets - (asset) assets held by this account.\r\n   * Note the raw object uses `map[int] -> AssetHolding` for this type.\r\n   * @param authAddr - (spend) the address against which signing should be checked. If empty, the\r\n   * address of the current account is used. This field can be updated in any\r\n   * transaction by setting the RekeyTo field.\r\n   * @param createdApps - (appp) parameters of applications created by this account including app global\r\n   * data.\r\n   * Note: the raw account uses `map[int] -> AppParams` for this type.\r\n   * @param createdAssets - (apar) parameters of assets created by this account.\r\n   * Note: the raw account uses `map[int] -> Asset` for this type.\r\n   * @param incentiveEligible - Whether or not the account can receive block incentives if its balance is in\r\n   * range at proposal time.\r\n   * @param lastHeartbeat - The round in which this account last went online, or explicitly renewed their\r\n   * online status.\r\n   * @param lastProposed - The round in which this account last proposed the block.\r\n   * @param participation - AccountParticipation describes the parameters used by this account in consensus\r\n   * protocol.\r\n   * @param rewardBase - (ebase) used as part of the rewards computation. Only applicable to accounts\r\n   * which are participating.\r\n   * @param sigType - Indicates what type of signature is used by this account, must be one of:\r\n   * * sig\r\n   * * msig\r\n   * * lsig\r\n   * @param totalBoxBytes - (tbxb) The total number of bytes used by this account's app's box keys and\r\n   * values.\r\n   * @param totalBoxes - (tbx) The number of existing boxes created by this account's app.\r\n   */\n  constructor({\n    address,\n    amount,\n    amountWithoutPendingRewards,\n    minBalance,\n    pendingRewards,\n    rewards,\n    round,\n    status,\n    totalAppsOptedIn,\n    totalAssetsOptedIn,\n    totalCreatedApps,\n    totalCreatedAssets,\n    appsLocalState,\n    appsTotalExtraPages,\n    appsTotalSchema,\n    assets,\n    authAddr,\n    createdApps,\n    createdAssets,\n    incentiveEligible,\n    lastHeartbeat,\n    lastProposed,\n    participation,\n    rewardBase,\n    sigType,\n    totalBoxBytes,\n    totalBoxes\n  }) {\n    super();\n    this.address = address;\n    this.amount = amount;\n    this.amountWithoutPendingRewards = amountWithoutPendingRewards;\n    this.minBalance = minBalance;\n    this.pendingRewards = pendingRewards;\n    this.rewards = rewards;\n    this.round = round;\n    this.status = status;\n    this.totalAppsOptedIn = totalAppsOptedIn;\n    this.totalAssetsOptedIn = totalAssetsOptedIn;\n    this.totalCreatedApps = totalCreatedApps;\n    this.totalCreatedAssets = totalCreatedAssets;\n    this.appsLocalState = appsLocalState;\n    this.appsTotalExtraPages = appsTotalExtraPages;\n    this.appsTotalSchema = appsTotalSchema;\n    this.assets = assets;\n    this.authAddr = authAddr;\n    this.createdApps = createdApps;\n    this.createdAssets = createdAssets;\n    this.incentiveEligible = incentiveEligible;\n    this.lastHeartbeat = lastHeartbeat;\n    this.lastProposed = lastProposed;\n    this.participation = participation;\n    this.rewardBase = rewardBase;\n    this.sigType = sigType;\n    this.totalBoxBytes = totalBoxBytes;\n    this.totalBoxes = totalBoxes;\n    this.attribute_map = {\n      address: 'address',\n      amount: 'amount',\n      amountWithoutPendingRewards: 'amount-without-pending-rewards',\n      minBalance: 'min-balance',\n      pendingRewards: 'pending-rewards',\n      rewards: 'rewards',\n      round: 'round',\n      status: 'status',\n      totalAppsOptedIn: 'total-apps-opted-in',\n      totalAssetsOptedIn: 'total-assets-opted-in',\n      totalCreatedApps: 'total-created-apps',\n      totalCreatedAssets: 'total-created-assets',\n      appsLocalState: 'apps-local-state',\n      appsTotalExtraPages: 'apps-total-extra-pages',\n      appsTotalSchema: 'apps-total-schema',\n      assets: 'assets',\n      authAddr: 'auth-addr',\n      createdApps: 'created-apps',\n      createdAssets: 'created-assets',\n      incentiveEligible: 'incentive-eligible',\n      lastHeartbeat: 'last-heartbeat',\n      lastProposed: 'last-proposed',\n      participation: 'participation',\n      rewardBase: 'reward-base',\n      sigType: 'sig-type',\n      totalBoxBytes: 'total-box-bytes',\n      totalBoxes: 'total-boxes'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['address'] === 'undefined') throw new Error(`Response is missing required field 'address': ${data}`);\n    if (typeof data['amount'] === 'undefined') throw new Error(`Response is missing required field 'amount': ${data}`);\n    if (typeof data['amount-without-pending-rewards'] === 'undefined') throw new Error(`Response is missing required field 'amount-without-pending-rewards': ${data}`);\n    if (typeof data['min-balance'] === 'undefined') throw new Error(`Response is missing required field 'min-balance': ${data}`);\n    if (typeof data['pending-rewards'] === 'undefined') throw new Error(`Response is missing required field 'pending-rewards': ${data}`);\n    if (typeof data['rewards'] === 'undefined') throw new Error(`Response is missing required field 'rewards': ${data}`);\n    if (typeof data['round'] === 'undefined') throw new Error(`Response is missing required field 'round': ${data}`);\n    if (typeof data['status'] === 'undefined') throw new Error(`Response is missing required field 'status': ${data}`);\n    if (typeof data['total-apps-opted-in'] === 'undefined') throw new Error(`Response is missing required field 'total-apps-opted-in': ${data}`);\n    if (typeof data['total-assets-opted-in'] === 'undefined') throw new Error(`Response is missing required field 'total-assets-opted-in': ${data}`);\n    if (typeof data['total-created-apps'] === 'undefined') throw new Error(`Response is missing required field 'total-created-apps': ${data}`);\n    if (typeof data['total-created-assets'] === 'undefined') throw new Error(`Response is missing required field 'total-created-assets': ${data}`);\n    return new Account({\n      address: data['address'],\n      amount: data['amount'],\n      amountWithoutPendingRewards: data['amount-without-pending-rewards'],\n      minBalance: data['min-balance'],\n      pendingRewards: data['pending-rewards'],\n      rewards: data['rewards'],\n      round: data['round'],\n      status: data['status'],\n      totalAppsOptedIn: data['total-apps-opted-in'],\n      totalAssetsOptedIn: data['total-assets-opted-in'],\n      totalCreatedApps: data['total-created-apps'],\n      totalCreatedAssets: data['total-created-assets'],\n      appsLocalState: typeof data['apps-local-state'] !== 'undefined' ? data['apps-local-state'].map(ApplicationLocalState.from_obj_for_encoding) : undefined,\n      appsTotalExtraPages: data['apps-total-extra-pages'],\n      appsTotalSchema: typeof data['apps-total-schema'] !== 'undefined' ? ApplicationStateSchema.from_obj_for_encoding(data['apps-total-schema']) : undefined,\n      assets: typeof data['assets'] !== 'undefined' ? data['assets'].map(AssetHolding.from_obj_for_encoding) : undefined,\n      authAddr: data['auth-addr'],\n      createdApps: typeof data['created-apps'] !== 'undefined' ? data['created-apps'].map(Application.from_obj_for_encoding) : undefined,\n      createdAssets: typeof data['created-assets'] !== 'undefined' ? data['created-assets'].map(Asset.from_obj_for_encoding) : undefined,\n      incentiveEligible: data['incentive-eligible'],\n      lastHeartbeat: data['last-heartbeat'],\n      lastProposed: data['last-proposed'],\n      participation: typeof data['participation'] !== 'undefined' ? AccountParticipation.from_obj_for_encoding(data['participation']) : undefined,\n      rewardBase: data['reward-base'],\n      sigType: data['sig-type'],\n      totalBoxBytes: data['total-box-bytes'],\n      totalBoxes: data['total-boxes']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * AccountApplicationResponse describes the account's application local state and\r\n * global state (AppLocalState and AppParams, if either exists) for a specific\r\n * application ID. Global state will only be returned if the provided address is\r\n * the application's creator.\r\n */\nexport class AccountApplicationResponse extends BaseModel {\n  /**\r\n   * Creates a new `AccountApplicationResponse` object.\r\n   * @param round - The round for which this information is relevant.\r\n   * @param appLocalState - (appl) the application local data stored in this account.\r\n   * The raw account uses `AppLocalState` for this type.\r\n   * @param createdApp - (appp) parameters of the application created by this account including app\r\n   * global data.\r\n   * The raw account uses `AppParams` for this type.\r\n   */\n  constructor({\n    round,\n    appLocalState,\n    createdApp\n  }) {\n    super();\n    this.round = round;\n    this.appLocalState = appLocalState;\n    this.createdApp = createdApp;\n    this.attribute_map = {\n      round: 'round',\n      appLocalState: 'app-local-state',\n      createdApp: 'created-app'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['round'] === 'undefined') throw new Error(`Response is missing required field 'round': ${data}`);\n    return new AccountApplicationResponse({\n      round: data['round'],\n      appLocalState: typeof data['app-local-state'] !== 'undefined' ? ApplicationLocalState.from_obj_for_encoding(data['app-local-state']) : undefined,\n      createdApp: typeof data['created-app'] !== 'undefined' ? ApplicationParams.from_obj_for_encoding(data['created-app']) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * AccountAssetHolding describes the account's asset holding and asset parameters\r\n * (if either exist) for a specific asset ID.\r\n */\nexport class AccountAssetHolding extends BaseModel {\n  /**\r\n   * Creates a new `AccountAssetHolding` object.\r\n   * @param assetHolding - (asset) Details about the asset held by this account.\r\n   * The raw account uses `AssetHolding` for this type.\r\n   * @param assetParams - (apar) parameters of the asset held by this account.\r\n   * The raw account uses `AssetParams` for this type.\r\n   */\n  constructor({\n    assetHolding,\n    assetParams\n  }) {\n    super();\n    this.assetHolding = assetHolding;\n    this.assetParams = assetParams;\n    this.attribute_map = {\n      assetHolding: 'asset-holding',\n      assetParams: 'asset-params'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['asset-holding'] === 'undefined') throw new Error(`Response is missing required field 'asset-holding': ${data}`);\n    return new AccountAssetHolding({\n      assetHolding: AssetHolding.from_obj_for_encoding(data['asset-holding']),\n      assetParams: typeof data['asset-params'] !== 'undefined' ? AssetParams.from_obj_for_encoding(data['asset-params']) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * AccountAssetResponse describes the account's asset holding and asset parameters\r\n * (if either exist) for a specific asset ID. Asset parameters will only be\r\n * returned if the provided address is the asset's creator.\r\n */\nexport class AccountAssetResponse extends BaseModel {\n  /**\r\n   * Creates a new `AccountAssetResponse` object.\r\n   * @param round - The round for which this information is relevant.\r\n   * @param assetHolding - (asset) Details about the asset held by this account.\r\n   * The raw account uses `AssetHolding` for this type.\r\n   * @param createdAsset - (apar) parameters of the asset created by this account.\r\n   * The raw account uses `AssetParams` for this type.\r\n   */\n  constructor({\n    round,\n    assetHolding,\n    createdAsset\n  }) {\n    super();\n    this.round = round;\n    this.assetHolding = assetHolding;\n    this.createdAsset = createdAsset;\n    this.attribute_map = {\n      round: 'round',\n      assetHolding: 'asset-holding',\n      createdAsset: 'created-asset'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['round'] === 'undefined') throw new Error(`Response is missing required field 'round': ${data}`);\n    return new AccountAssetResponse({\n      round: data['round'],\n      assetHolding: typeof data['asset-holding'] !== 'undefined' ? AssetHolding.from_obj_for_encoding(data['asset-holding']) : undefined,\n      createdAsset: typeof data['created-asset'] !== 'undefined' ? AssetParams.from_obj_for_encoding(data['created-asset']) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * AccountAssetsInformationResponse contains a list of assets held by an account.\r\n */\nexport class AccountAssetsInformationResponse extends BaseModel {\n  /**\r\n   * Creates a new `AccountAssetsInformationResponse` object.\r\n   * @param round - The round for which this information is relevant.\r\n   * @param assetHoldings -\r\n   * @param nextToken - Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\n  constructor({\n    round,\n    assetHoldings,\n    nextToken\n  }) {\n    super();\n    this.round = round;\n    this.assetHoldings = assetHoldings;\n    this.nextToken = nextToken;\n    this.attribute_map = {\n      round: 'round',\n      assetHoldings: 'asset-holdings',\n      nextToken: 'next-token'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['round'] === 'undefined') throw new Error(`Response is missing required field 'round': ${data}`);\n    return new AccountAssetsInformationResponse({\n      round: data['round'],\n      assetHoldings: typeof data['asset-holdings'] !== 'undefined' ? data['asset-holdings'].map(AccountAssetHolding.from_obj_for_encoding) : undefined,\n      nextToken: data['next-token']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * AccountParticipation describes the parameters used by this account in consensus\r\n * protocol.\r\n */\nexport class AccountParticipation extends BaseModel {\n  /**\r\n   * Creates a new `AccountParticipation` object.\r\n   * @param selectionParticipationKey - (sel) Selection public key (if any) currently registered for this round.\r\n   * @param voteFirstValid - (voteFst) First round for which this participation is valid.\r\n   * @param voteKeyDilution - (voteKD) Number of subkeys in each batch of participation keys.\r\n   * @param voteLastValid - (voteLst) Last round for which this participation is valid.\r\n   * @param voteParticipationKey - (vote) root participation public key (if any) currently registered for this\r\n   * round.\r\n   * @param stateProofKey - (stprf) Root of the state proof key (if any)\r\n   */\n  constructor({\n    selectionParticipationKey,\n    voteFirstValid,\n    voteKeyDilution,\n    voteLastValid,\n    voteParticipationKey,\n    stateProofKey\n  }) {\n    super();\n    this.selectionParticipationKey = typeof selectionParticipationKey === 'string' ? new Uint8Array(Buffer.from(selectionParticipationKey, 'base64')) : selectionParticipationKey;\n    this.voteFirstValid = voteFirstValid;\n    this.voteKeyDilution = voteKeyDilution;\n    this.voteLastValid = voteLastValid;\n    this.voteParticipationKey = typeof voteParticipationKey === 'string' ? new Uint8Array(Buffer.from(voteParticipationKey, 'base64')) : voteParticipationKey;\n    this.stateProofKey = typeof stateProofKey === 'string' ? new Uint8Array(Buffer.from(stateProofKey, 'base64')) : stateProofKey;\n    this.attribute_map = {\n      selectionParticipationKey: 'selection-participation-key',\n      voteFirstValid: 'vote-first-valid',\n      voteKeyDilution: 'vote-key-dilution',\n      voteLastValid: 'vote-last-valid',\n      voteParticipationKey: 'vote-participation-key',\n      stateProofKey: 'state-proof-key'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['selection-participation-key'] === 'undefined') throw new Error(`Response is missing required field 'selection-participation-key': ${data}`);\n    if (typeof data['vote-first-valid'] === 'undefined') throw new Error(`Response is missing required field 'vote-first-valid': ${data}`);\n    if (typeof data['vote-key-dilution'] === 'undefined') throw new Error(`Response is missing required field 'vote-key-dilution': ${data}`);\n    if (typeof data['vote-last-valid'] === 'undefined') throw new Error(`Response is missing required field 'vote-last-valid': ${data}`);\n    if (typeof data['vote-participation-key'] === 'undefined') throw new Error(`Response is missing required field 'vote-participation-key': ${data}`);\n    return new AccountParticipation({\n      selectionParticipationKey: data['selection-participation-key'],\n      voteFirstValid: data['vote-first-valid'],\n      voteKeyDilution: data['vote-key-dilution'],\n      voteLastValid: data['vote-last-valid'],\n      voteParticipationKey: data['vote-participation-key'],\n      stateProofKey: data['state-proof-key']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Application state delta.\r\n */\nexport class AccountStateDelta extends BaseModel {\n  /**\r\n   * Creates a new `AccountStateDelta` object.\r\n   * @param address -\r\n   * @param delta - Application state delta.\r\n   */\n  constructor({\n    address,\n    delta\n  }) {\n    super();\n    this.address = address;\n    this.delta = delta;\n    this.attribute_map = {\n      address: 'address',\n      delta: 'delta'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['address'] === 'undefined') throw new Error(`Response is missing required field 'address': ${data}`);\n    if (!Array.isArray(data['delta'])) throw new Error(`Response is missing required array field 'delta': ${data}`);\n    return new AccountStateDelta({\n      address: data['address'],\n      delta: data['delta'].map(EvalDeltaKeyValue.from_obj_for_encoding)\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * The logged messages from an app call along with the app ID and outer transaction\r\n * ID. Logs appear in the same order that they were emitted.\r\n */\nexport class AppCallLogs extends BaseModel {\n  /**\r\n   * Creates a new `AppCallLogs` object.\r\n   * @param applicationIndex - The application from which the logs were generated\r\n   * @param logs - An array of logs\r\n   * @param txid - The transaction ID of the outer app call that lead to these logs\r\n   */\n  constructor({\n    applicationIndex,\n    logs,\n    txid\n  }) {\n    super();\n    this.applicationIndex = applicationIndex;\n    this.logs = logs;\n    this.txid = txid;\n    this.attribute_map = {\n      applicationIndex: 'application-index',\n      logs: 'logs',\n      txid: 'txId'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['application-index'] === 'undefined') throw new Error(`Response is missing required field 'application-index': ${data}`);\n    if (!Array.isArray(data['logs'])) throw new Error(`Response is missing required array field 'logs': ${data}`);\n    if (typeof data['txId'] === 'undefined') throw new Error(`Response is missing required field 'txId': ${data}`);\n    return new AppCallLogs({\n      applicationIndex: data['application-index'],\n      logs: data['logs'],\n      txid: data['txId']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Application index and its parameters\r\n */\nexport class Application extends BaseModel {\n  /**\r\n   * Creates a new `Application` object.\r\n   * @param id - (appidx) application index.\r\n   * @param params - (appparams) application parameters.\r\n   */\n  constructor({\n    id,\n    params\n  }) {\n    super();\n    this.id = id;\n    this.params = params;\n    this.attribute_map = {\n      id: 'id',\n      params: 'params'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['id'] === 'undefined') throw new Error(`Response is missing required field 'id': ${data}`);\n    if (typeof data['params'] === 'undefined') throw new Error(`Response is missing required field 'params': ${data}`);\n    return new Application({\n      id: data['id'],\n      params: ApplicationParams.from_obj_for_encoding(data['params'])\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * An application's initial global/local/box states that were accessed during\r\n * simulation.\r\n */\nexport class ApplicationInitialStates extends BaseModel {\n  /**\r\n   * Creates a new `ApplicationInitialStates` object.\r\n   * @param id - Application index.\r\n   * @param appBoxes - An application's global/local/box state.\r\n   * @param appGlobals - An application's global/local/box state.\r\n   * @param appLocals - An application's initial local states tied to different accounts.\r\n   */\n  constructor({\n    id,\n    appBoxes,\n    appGlobals,\n    appLocals\n  }) {\n    super();\n    this.id = id;\n    this.appBoxes = appBoxes;\n    this.appGlobals = appGlobals;\n    this.appLocals = appLocals;\n    this.attribute_map = {\n      id: 'id',\n      appBoxes: 'app-boxes',\n      appGlobals: 'app-globals',\n      appLocals: 'app-locals'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['id'] === 'undefined') throw new Error(`Response is missing required field 'id': ${data}`);\n    return new ApplicationInitialStates({\n      id: data['id'],\n      appBoxes: typeof data['app-boxes'] !== 'undefined' ? ApplicationKVStorage.from_obj_for_encoding(data['app-boxes']) : undefined,\n      appGlobals: typeof data['app-globals'] !== 'undefined' ? ApplicationKVStorage.from_obj_for_encoding(data['app-globals']) : undefined,\n      appLocals: typeof data['app-locals'] !== 'undefined' ? data['app-locals'].map(ApplicationKVStorage.from_obj_for_encoding) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * An application's global/local/box state.\r\n */\nexport class ApplicationKVStorage extends BaseModel {\n  /**\r\n   * Creates a new `ApplicationKVStorage` object.\r\n   * @param kvs - Key-Value pairs representing application states.\r\n   * @param account - The address of the account associated with the local state.\r\n   */\n  constructor({\n    kvs,\n    account\n  }) {\n    super();\n    this.kvs = kvs;\n    this.account = account;\n    this.attribute_map = {\n      kvs: 'kvs',\n      account: 'account'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['kvs'])) throw new Error(`Response is missing required array field 'kvs': ${data}`);\n    return new ApplicationKVStorage({\n      kvs: data['kvs'].map(AvmKeyValue.from_obj_for_encoding),\n      account: data['account']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * References an account's local state for an application.\r\n */\nexport class ApplicationLocalReference extends BaseModel {\n  /**\r\n   * Creates a new `ApplicationLocalReference` object.\r\n   * @param account - Address of the account with the local state.\r\n   * @param app - Application ID of the local state application.\r\n   */\n  constructor({\n    account,\n    app\n  }) {\n    super();\n    this.account = account;\n    this.app = app;\n    this.attribute_map = {\n      account: 'account',\n      app: 'app'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['account'] === 'undefined') throw new Error(`Response is missing required field 'account': ${data}`);\n    if (typeof data['app'] === 'undefined') throw new Error(`Response is missing required field 'app': ${data}`);\n    return new ApplicationLocalReference({\n      account: data['account'],\n      app: data['app']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Stores local state associated with an application.\r\n */\nexport class ApplicationLocalState extends BaseModel {\n  /**\r\n   * Creates a new `ApplicationLocalState` object.\r\n   * @param id - The application which this local state is for.\r\n   * @param schema - (hsch) schema.\r\n   * @param keyValue - (tkv) storage.\r\n   */\n  constructor({\n    id,\n    schema,\n    keyValue\n  }) {\n    super();\n    this.id = id;\n    this.schema = schema;\n    this.keyValue = keyValue;\n    this.attribute_map = {\n      id: 'id',\n      schema: 'schema',\n      keyValue: 'key-value'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['id'] === 'undefined') throw new Error(`Response is missing required field 'id': ${data}`);\n    if (typeof data['schema'] === 'undefined') throw new Error(`Response is missing required field 'schema': ${data}`);\n    return new ApplicationLocalState({\n      id: data['id'],\n      schema: ApplicationStateSchema.from_obj_for_encoding(data['schema']),\n      keyValue: typeof data['key-value'] !== 'undefined' ? data['key-value'].map(TealKeyValue.from_obj_for_encoding) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Stores the global information associated with an application.\r\n */\nexport class ApplicationParams extends BaseModel {\n  /**\r\n   * Creates a new `ApplicationParams` object.\r\n   * @param approvalProgram - (approv) approval program.\r\n   * @param clearStateProgram - (clearp) approval program.\r\n   * @param creator - The address that created this application. This is the address where the\r\n   * parameters and global state for this application can be found.\r\n   * @param extraProgramPages - (epp) the amount of extra program pages available to this app.\r\n   * @param globalState - (gs) global state\r\n   * @param globalStateSchema - (gsch) global schema\r\n   * @param localStateSchema - (lsch) local schema\r\n   */\n  constructor({\n    approvalProgram,\n    clearStateProgram,\n    creator,\n    extraProgramPages,\n    globalState,\n    globalStateSchema,\n    localStateSchema\n  }) {\n    super();\n    this.approvalProgram = typeof approvalProgram === 'string' ? new Uint8Array(Buffer.from(approvalProgram, 'base64')) : approvalProgram;\n    this.clearStateProgram = typeof clearStateProgram === 'string' ? new Uint8Array(Buffer.from(clearStateProgram, 'base64')) : clearStateProgram;\n    this.creator = creator;\n    this.extraProgramPages = extraProgramPages;\n    this.globalState = globalState;\n    this.globalStateSchema = globalStateSchema;\n    this.localStateSchema = localStateSchema;\n    this.attribute_map = {\n      approvalProgram: 'approval-program',\n      clearStateProgram: 'clear-state-program',\n      creator: 'creator',\n      extraProgramPages: 'extra-program-pages',\n      globalState: 'global-state',\n      globalStateSchema: 'global-state-schema',\n      localStateSchema: 'local-state-schema'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['approval-program'] === 'undefined') throw new Error(`Response is missing required field 'approval-program': ${data}`);\n    if (typeof data['clear-state-program'] === 'undefined') throw new Error(`Response is missing required field 'clear-state-program': ${data}`);\n    if (typeof data['creator'] === 'undefined') throw new Error(`Response is missing required field 'creator': ${data}`);\n    return new ApplicationParams({\n      approvalProgram: data['approval-program'],\n      clearStateProgram: data['clear-state-program'],\n      creator: data['creator'],\n      extraProgramPages: data['extra-program-pages'],\n      globalState: typeof data['global-state'] !== 'undefined' ? data['global-state'].map(TealKeyValue.from_obj_for_encoding) : undefined,\n      globalStateSchema: typeof data['global-state-schema'] !== 'undefined' ? ApplicationStateSchema.from_obj_for_encoding(data['global-state-schema']) : undefined,\n      localStateSchema: typeof data['local-state-schema'] !== 'undefined' ? ApplicationStateSchema.from_obj_for_encoding(data['local-state-schema']) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * An operation against an application's global/local/box state.\r\n */\nexport class ApplicationStateOperation extends BaseModel {\n  /**\r\n   * Creates a new `ApplicationStateOperation` object.\r\n   * @param appStateType - Type of application state. Value `g` is **global state**, `l` is **local\r\n   * state**, `b` is **boxes**.\r\n   * @param key - The key (name) of the global/local/box state.\r\n   * @param operation - Operation type. Value `w` is **write**, `d` is **delete**.\r\n   * @param account - For local state changes, the address of the account associated with the local\r\n   * state.\r\n   * @param newValue - Represents an AVM value.\r\n   */\n  constructor({\n    appStateType,\n    key,\n    operation,\n    account,\n    newValue\n  }) {\n    super();\n    this.appStateType = appStateType;\n    this.key = typeof key === 'string' ? new Uint8Array(Buffer.from(key, 'base64')) : key;\n    this.operation = operation;\n    this.account = account;\n    this.newValue = newValue;\n    this.attribute_map = {\n      appStateType: 'app-state-type',\n      key: 'key',\n      operation: 'operation',\n      account: 'account',\n      newValue: 'new-value'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['app-state-type'] === 'undefined') throw new Error(`Response is missing required field 'app-state-type': ${data}`);\n    if (typeof data['key'] === 'undefined') throw new Error(`Response is missing required field 'key': ${data}`);\n    if (typeof data['operation'] === 'undefined') throw new Error(`Response is missing required field 'operation': ${data}`);\n    return new ApplicationStateOperation({\n      appStateType: data['app-state-type'],\n      key: data['key'],\n      operation: data['operation'],\n      account: data['account'],\n      newValue: typeof data['new-value'] !== 'undefined' ? AvmValue.from_obj_for_encoding(data['new-value']) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Specifies maximums on the number of each type that may be stored.\r\n */\nexport class ApplicationStateSchema extends BaseModel {\n  /**\r\n   * Creates a new `ApplicationStateSchema` object.\r\n   * @param numUint - (nui) num of uints.\r\n   * @param numByteSlice - (nbs) num of byte slices.\r\n   */\n  constructor({\n    numUint,\n    numByteSlice\n  }) {\n    super();\n    this.numUint = numUint;\n    this.numByteSlice = numByteSlice;\n    this.attribute_map = {\n      numUint: 'num-uint',\n      numByteSlice: 'num-byte-slice'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['num-uint'] === 'undefined') throw new Error(`Response is missing required field 'num-uint': ${data}`);\n    if (typeof data['num-byte-slice'] === 'undefined') throw new Error(`Response is missing required field 'num-byte-slice': ${data}`);\n    return new ApplicationStateSchema({\n      numUint: data['num-uint'],\n      numByteSlice: data['num-byte-slice']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Specifies both the unique identifier and the parameters for an asset\r\n */\nexport class Asset extends BaseModel {\n  /**\r\n   * Creates a new `Asset` object.\r\n   * @param index - unique asset identifier\r\n   * @param params - AssetParams specifies the parameters for an asset.\r\n   * (apar) when part of an AssetConfig transaction.\r\n   * Definition:\r\n   * data/transactions/asset.go : AssetParams\r\n   */\n  constructor({\n    index,\n    params\n  }) {\n    super();\n    this.index = index;\n    this.params = params;\n    this.attribute_map = {\n      index: 'index',\n      params: 'params'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['index'] === 'undefined') throw new Error(`Response is missing required field 'index': ${data}`);\n    if (typeof data['params'] === 'undefined') throw new Error(`Response is missing required field 'params': ${data}`);\n    return new Asset({\n      index: data['index'],\n      params: AssetParams.from_obj_for_encoding(data['params'])\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Describes an asset held by an account.\r\n * Definition:\r\n * data/basics/userBalance.go : AssetHolding\r\n */\nexport class AssetHolding extends BaseModel {\n  /**\r\n   * Creates a new `AssetHolding` object.\r\n   * @param amount - (a) number of units held.\r\n   * @param assetId - Asset ID of the holding.\r\n   * @param isFrozen - (f) whether or not the holding is frozen.\r\n   */\n  constructor({\n    amount,\n    assetId,\n    isFrozen\n  }) {\n    super();\n    this.amount = amount;\n    this.assetId = assetId;\n    this.isFrozen = isFrozen;\n    this.attribute_map = {\n      amount: 'amount',\n      assetId: 'asset-id',\n      isFrozen: 'is-frozen'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['amount'] === 'undefined') throw new Error(`Response is missing required field 'amount': ${data}`);\n    if (typeof data['asset-id'] === 'undefined') throw new Error(`Response is missing required field 'asset-id': ${data}`);\n    if (typeof data['is-frozen'] === 'undefined') throw new Error(`Response is missing required field 'is-frozen': ${data}`);\n    return new AssetHolding({\n      amount: data['amount'],\n      assetId: data['asset-id'],\n      isFrozen: data['is-frozen']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * References an asset held by an account.\r\n */\nexport class AssetHoldingReference extends BaseModel {\n  /**\r\n   * Creates a new `AssetHoldingReference` object.\r\n   * @param account - Address of the account holding the asset.\r\n   * @param asset - Asset ID of the holding.\r\n   */\n  constructor({\n    account,\n    asset\n  }) {\n    super();\n    this.account = account;\n    this.asset = asset;\n    this.attribute_map = {\n      account: 'account',\n      asset: 'asset'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['account'] === 'undefined') throw new Error(`Response is missing required field 'account': ${data}`);\n    if (typeof data['asset'] === 'undefined') throw new Error(`Response is missing required field 'asset': ${data}`);\n    return new AssetHoldingReference({\n      account: data['account'],\n      asset: data['asset']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * AssetParams specifies the parameters for an asset.\r\n * (apar) when part of an AssetConfig transaction.\r\n * Definition:\r\n * data/transactions/asset.go : AssetParams\r\n */\nexport class AssetParams extends BaseModel {\n  /**\r\n   * Creates a new `AssetParams` object.\r\n   * @param creator - The address that created this asset. This is the address where the parameters\r\n   * for this asset can be found, and also the address where unwanted asset units can\r\n   * be sent in the worst case.\r\n   * @param decimals - (dc) The number of digits to use after the decimal point when displaying this\r\n   * asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in\r\n   * tenths. If 2, the base unit of the asset is in hundredths, and so on. This value\r\n   * must be between 0 and 19 (inclusive).\r\n   * @param total - (t) The total number of units of this asset.\r\n   * @param clawback - (c) Address of account used to clawback holdings of this asset. If empty,\r\n   * clawback is not permitted.\r\n   * @param defaultFrozen - (df) Whether holdings of this asset are frozen by default.\r\n   * @param freeze - (f) Address of account used to freeze holdings of this asset. If empty, freezing\r\n   * is not permitted.\r\n   * @param manager - (m) Address of account used to manage the keys of this asset and to destroy it.\r\n   * @param metadataHash - (am) A commitment to some unspecified asset metadata. The format of this\r\n   * metadata is up to the application.\r\n   * @param name - (an) Name of this asset, as supplied by the creator. Included only when the\r\n   * asset name is composed of printable utf-8 characters.\r\n   * @param nameB64 - Base64 encoded name of this asset, as supplied by the creator.\r\n   * @param reserve - (r) Address of account holding reserve (non-minted) units of this asset.\r\n   * @param unitName - (un) Name of a unit of this asset, as supplied by the creator. Included only\r\n   * when the name of a unit of this asset is composed of printable utf-8 characters.\r\n   * @param unitNameB64 - Base64 encoded name of a unit of this asset, as supplied by the creator.\r\n   * @param url - (au) URL where more information about the asset can be retrieved. Included only\r\n   * when the URL is composed of printable utf-8 characters.\r\n   * @param urlB64 - Base64 encoded URL where more information about the asset can be retrieved.\r\n   */\n  constructor({\n    creator,\n    decimals,\n    total,\n    clawback,\n    defaultFrozen,\n    freeze,\n    manager,\n    metadataHash,\n    name,\n    nameB64,\n    reserve,\n    unitName,\n    unitNameB64,\n    url,\n    urlB64\n  }) {\n    super();\n    this.creator = creator;\n    this.decimals = decimals;\n    this.total = total;\n    this.clawback = clawback;\n    this.defaultFrozen = defaultFrozen;\n    this.freeze = freeze;\n    this.manager = manager;\n    this.metadataHash = typeof metadataHash === 'string' ? new Uint8Array(Buffer.from(metadataHash, 'base64')) : metadataHash;\n    this.name = name;\n    this.nameB64 = typeof nameB64 === 'string' ? new Uint8Array(Buffer.from(nameB64, 'base64')) : nameB64;\n    this.reserve = reserve;\n    this.unitName = unitName;\n    this.unitNameB64 = typeof unitNameB64 === 'string' ? new Uint8Array(Buffer.from(unitNameB64, 'base64')) : unitNameB64;\n    this.url = url;\n    this.urlB64 = typeof urlB64 === 'string' ? new Uint8Array(Buffer.from(urlB64, 'base64')) : urlB64;\n    this.attribute_map = {\n      creator: 'creator',\n      decimals: 'decimals',\n      total: 'total',\n      clawback: 'clawback',\n      defaultFrozen: 'default-frozen',\n      freeze: 'freeze',\n      manager: 'manager',\n      metadataHash: 'metadata-hash',\n      name: 'name',\n      nameB64: 'name-b64',\n      reserve: 'reserve',\n      unitName: 'unit-name',\n      unitNameB64: 'unit-name-b64',\n      url: 'url',\n      urlB64: 'url-b64'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['creator'] === 'undefined') throw new Error(`Response is missing required field 'creator': ${data}`);\n    if (typeof data['decimals'] === 'undefined') throw new Error(`Response is missing required field 'decimals': ${data}`);\n    if (typeof data['total'] === 'undefined') throw new Error(`Response is missing required field 'total': ${data}`);\n    return new AssetParams({\n      creator: data['creator'],\n      decimals: data['decimals'],\n      total: data['total'],\n      clawback: data['clawback'],\n      defaultFrozen: data['default-frozen'],\n      freeze: data['freeze'],\n      manager: data['manager'],\n      metadataHash: data['metadata-hash'],\n      name: data['name'],\n      nameB64: data['name-b64'],\n      reserve: data['reserve'],\n      unitName: data['unit-name'],\n      unitNameB64: data['unit-name-b64'],\n      url: data['url'],\n      urlB64: data['url-b64']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Represents an AVM key-value pair in an application store.\r\n */\nexport class AvmKeyValue extends BaseModel {\n  /**\r\n   * Creates a new `AvmKeyValue` object.\r\n   * @param key -\r\n   * @param value - Represents an AVM value.\r\n   */\n  constructor({\n    key,\n    value\n  }) {\n    super();\n    this.key = typeof key === 'string' ? new Uint8Array(Buffer.from(key, 'base64')) : key;\n    this.value = value;\n    this.attribute_map = {\n      key: 'key',\n      value: 'value'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['key'] === 'undefined') throw new Error(`Response is missing required field 'key': ${data}`);\n    if (typeof data['value'] === 'undefined') throw new Error(`Response is missing required field 'value': ${data}`);\n    return new AvmKeyValue({\n      key: data['key'],\n      value: AvmValue.from_obj_for_encoding(data['value'])\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Represents an AVM value.\r\n */\nexport class AvmValue extends BaseModel {\n  /**\r\n   * Creates a new `AvmValue` object.\r\n   * @param type - value type. Value `1` refers to **bytes**, value `2` refers to **uint64**\r\n   * @param bytes - bytes value.\r\n   * @param uint - uint value.\r\n   */\n  constructor({\n    type,\n    bytes,\n    uint\n  }) {\n    super();\n    this.type = type;\n    this.bytes = typeof bytes === 'string' ? new Uint8Array(Buffer.from(bytes, 'base64')) : bytes;\n    this.uint = uint;\n    this.attribute_map = {\n      type: 'type',\n      bytes: 'bytes',\n      uint: 'uint'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['type'] === 'undefined') throw new Error(`Response is missing required field 'type': ${data}`);\n    return new AvmValue({\n      type: data['type'],\n      bytes: data['bytes'],\n      uint: data['uint']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Hash of a block header.\r\n */\nexport class BlockHashResponse extends BaseModel {\n  /**\r\n   * Creates a new `BlockHashResponse` object.\r\n   * @param blockhash - Block header hash.\r\n   */\n  constructor({\n    blockhash\n  }) {\n    super();\n    this.blockhash = blockhash;\n    this.attribute_map = {\n      blockhash: 'blockHash'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['blockHash'] === 'undefined') throw new Error(`Response is missing required field 'blockHash': ${data}`);\n    return new BlockHashResponse({\n      blockhash: data['blockHash']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * All logs emitted in the given round. Each app call, whether top-level or inner,\r\n * that contains logs results in a separate AppCallLogs object. Therefore there may\r\n * be multiple AppCallLogs with the same application ID and outer transaction ID in\r\n * the event of multiple inner app calls to the same app. App calls with no logs\r\n * are not included in the response. AppCallLogs are returned in the same order\r\n * that their corresponding app call appeared in the block (pre-order traversal of\r\n * inner app calls)\r\n */\nexport class BlockLogsResponse extends BaseModel {\n  /**\r\n   * Creates a new `BlockLogsResponse` object.\r\n   * @param logs -\r\n   */\n  constructor({\n    logs\n  }) {\n    super();\n    this.logs = logs;\n    this.attribute_map = {\n      logs: 'logs'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['logs'])) throw new Error(`Response is missing required array field 'logs': ${data}`);\n    return new BlockLogsResponse({\n      logs: data['logs'].map(AppCallLogs.from_obj_for_encoding)\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Encoded block object.\r\n */\nexport class BlockResponse extends BaseModel {\n  /**\r\n   * Creates a new `BlockResponse` object.\r\n   * @param block - Block header data.\r\n   * @param cert - Optional certificate object. This is only included when the format is set to\r\n   * message pack.\r\n   */\n  constructor({\n    block,\n    cert\n  }) {\n    super();\n    this.block = block;\n    this.cert = cert;\n    this.attribute_map = {\n      block: 'block',\n      cert: 'cert'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['block'] === 'undefined') throw new Error(`Response is missing required field 'block': ${data}`);\n    return new BlockResponse({\n      block: data['block'],\n      cert: data['cert']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Top level transaction IDs in a block.\r\n */\nexport class BlockTxidsResponse extends BaseModel {\n  /**\r\n   * Creates a new `BlockTxidsResponse` object.\r\n   * @param blocktxids - Block transaction IDs.\r\n   */\n  constructor({\n    blocktxids\n  }) {\n    super();\n    this.blocktxids = blocktxids;\n    this.attribute_map = {\n      blocktxids: 'blockTxids'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['blockTxids'])) throw new Error(`Response is missing required array field 'blockTxids': ${data}`);\n    return new BlockTxidsResponse({\n      blocktxids: data['blockTxids']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Box name and its content.\r\n */\nexport class Box extends BaseModel {\n  /**\r\n   * Creates a new `Box` object.\r\n   * @param name - (name) box name, base64 encoded\r\n   * @param round - The round for which this information is relevant\r\n   * @param value - (value) box value, base64 encoded.\r\n   */\n  constructor({\n    name,\n    round,\n    value\n  }) {\n    super();\n    this.name = typeof name === 'string' ? new Uint8Array(Buffer.from(name, 'base64')) : name;\n    this.round = round;\n    this.value = typeof value === 'string' ? new Uint8Array(Buffer.from(value, 'base64')) : value;\n    this.attribute_map = {\n      name: 'name',\n      round: 'round',\n      value: 'value'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['name'] === 'undefined') throw new Error(`Response is missing required field 'name': ${data}`);\n    if (typeof data['round'] === 'undefined') throw new Error(`Response is missing required field 'round': ${data}`);\n    if (typeof data['value'] === 'undefined') throw new Error(`Response is missing required field 'value': ${data}`);\n    return new Box({\n      name: data['name'],\n      round: data['round'],\n      value: data['value']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Box descriptor describes a Box.\r\n */\nexport class BoxDescriptor extends BaseModel {\n  /**\r\n   * Creates a new `BoxDescriptor` object.\r\n   * @param name - Base64 encoded box name\r\n   */\n  constructor({\n    name\n  }) {\n    super();\n    this.name = typeof name === 'string' ? new Uint8Array(Buffer.from(name, 'base64')) : name;\n    this.attribute_map = {\n      name: 'name'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['name'] === 'undefined') throw new Error(`Response is missing required field 'name': ${data}`);\n    return new BoxDescriptor({\n      name: data['name']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * References a box of an application.\r\n */\nexport class BoxReference extends BaseModel {\n  /**\r\n   * Creates a new `BoxReference` object.\r\n   * @param app - Application ID which this box belongs to\r\n   * @param name - Base64 encoded box name\r\n   */\n  constructor({\n    app,\n    name\n  }) {\n    super();\n    this.app = app;\n    this.name = typeof name === 'string' ? new Uint8Array(Buffer.from(name, 'base64')) : name;\n    this.attribute_map = {\n      app: 'app',\n      name: 'name'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['app'] === 'undefined') throw new Error(`Response is missing required field 'app': ${data}`);\n    if (typeof data['name'] === 'undefined') throw new Error(`Response is missing required field 'name': ${data}`);\n    return new BoxReference({\n      app: data['app'],\n      name: data['name']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Box names of an application\r\n */\nexport class BoxesResponse extends BaseModel {\n  /**\r\n   * Creates a new `BoxesResponse` object.\r\n   * @param boxes -\r\n   */\n  constructor({\n    boxes\n  }) {\n    super();\n    this.boxes = boxes;\n    this.attribute_map = {\n      boxes: 'boxes'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['boxes'])) throw new Error(`Response is missing required array field 'boxes': ${data}`);\n    return new BoxesResponse({\n      boxes: data['boxes'].map(BoxDescriptor.from_obj_for_encoding)\n    });\n    /* eslint-enable dot-notation */\n  }\n}\nexport class BuildVersion extends BaseModel {\n  /**\r\n   * Creates a new `BuildVersion` object.\r\n   * @param branch -\r\n   * @param buildNumber -\r\n   * @param channel -\r\n   * @param commitHash -\r\n   * @param major -\r\n   * @param minor -\r\n   */\n  constructor({\n    branch,\n    buildNumber,\n    channel,\n    commitHash,\n    major,\n    minor\n  }) {\n    super();\n    this.branch = branch;\n    this.buildNumber = buildNumber;\n    this.channel = channel;\n    this.commitHash = commitHash;\n    this.major = major;\n    this.minor = minor;\n    this.attribute_map = {\n      branch: 'branch',\n      buildNumber: 'build_number',\n      channel: 'channel',\n      commitHash: 'commit_hash',\n      major: 'major',\n      minor: 'minor'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['branch'] === 'undefined') throw new Error(`Response is missing required field 'branch': ${data}`);\n    if (typeof data['build_number'] === 'undefined') throw new Error(`Response is missing required field 'build_number': ${data}`);\n    if (typeof data['channel'] === 'undefined') throw new Error(`Response is missing required field 'channel': ${data}`);\n    if (typeof data['commit_hash'] === 'undefined') throw new Error(`Response is missing required field 'commit_hash': ${data}`);\n    if (typeof data['major'] === 'undefined') throw new Error(`Response is missing required field 'major': ${data}`);\n    if (typeof data['minor'] === 'undefined') throw new Error(`Response is missing required field 'minor': ${data}`);\n    return new BuildVersion({\n      branch: data['branch'],\n      buildNumber: data['build_number'],\n      channel: data['channel'],\n      commitHash: data['commit_hash'],\n      major: data['major'],\n      minor: data['minor']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Teal compile Result\r\n */\nexport class CompileResponse extends BaseModel {\n  /**\r\n   * Creates a new `CompileResponse` object.\r\n   * @param hash - base32 SHA512_256 of program bytes (Address style)\r\n   * @param result - base64 encoded program bytes\r\n   * @param sourcemap - JSON of the source map\r\n   */\n  constructor({\n    hash,\n    result,\n    sourcemap\n  }) {\n    super();\n    this.hash = hash;\n    this.result = result;\n    this.sourcemap = sourcemap;\n    this.attribute_map = {\n      hash: 'hash',\n      result: 'result',\n      sourcemap: 'sourcemap'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['hash'] === 'undefined') throw new Error(`Response is missing required field 'hash': ${data}`);\n    if (typeof data['result'] === 'undefined') throw new Error(`Response is missing required field 'result': ${data}`);\n    return new CompileResponse({\n      hash: data['hash'],\n      result: data['result'],\n      sourcemap: data['sourcemap']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Teal disassembly Result\r\n */\nexport class DisassembleResponse extends BaseModel {\n  /**\r\n   * Creates a new `DisassembleResponse` object.\r\n   * @param result - disassembled Teal code\r\n   */\n  constructor({\n    result\n  }) {\n    super();\n    this.result = result;\n    this.attribute_map = {\n      result: 'result'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['result'] === 'undefined') throw new Error(`Response is missing required field 'result': ${data}`);\n    return new DisassembleResponse({\n      result: data['result']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Request data type for dryrun endpoint. Given the Transactions and simulated\r\n * ledger state upload, run TEAL scripts and return debugging information.\r\n */\nexport class DryrunRequest extends BaseModel {\n  /**\r\n   * Creates a new `DryrunRequest` object.\r\n   * @param accounts -\r\n   * @param apps -\r\n   * @param latestTimestamp - LatestTimestamp is available to some TEAL scripts. Defaults to the latest\r\n   * confirmed timestamp this algod is attached to.\r\n   * @param protocolVersion - ProtocolVersion specifies a specific version string to operate under, otherwise\r\n   * whatever the current protocol of the network this algod is running in.\r\n   * @param round - Round is available to some TEAL scripts. Defaults to the current round on the\r\n   * network this algod is attached to.\r\n   * @param sources -\r\n   * @param txns -\r\n   */\n  constructor({\n    accounts,\n    apps,\n    latestTimestamp,\n    protocolVersion,\n    round,\n    sources,\n    txns\n  }) {\n    super();\n    this.accounts = accounts;\n    this.apps = apps;\n    this.latestTimestamp = latestTimestamp;\n    this.protocolVersion = protocolVersion;\n    this.round = round;\n    this.sources = sources;\n    this.txns = txns;\n    this.attribute_map = {\n      accounts: 'accounts',\n      apps: 'apps',\n      latestTimestamp: 'latest-timestamp',\n      protocolVersion: 'protocol-version',\n      round: 'round',\n      sources: 'sources',\n      txns: 'txns'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['accounts'])) throw new Error(`Response is missing required array field 'accounts': ${data}`);\n    if (!Array.isArray(data['apps'])) throw new Error(`Response is missing required array field 'apps': ${data}`);\n    if (typeof data['latest-timestamp'] === 'undefined') throw new Error(`Response is missing required field 'latest-timestamp': ${data}`);\n    if (typeof data['protocol-version'] === 'undefined') throw new Error(`Response is missing required field 'protocol-version': ${data}`);\n    if (typeof data['round'] === 'undefined') throw new Error(`Response is missing required field 'round': ${data}`);\n    if (!Array.isArray(data['sources'])) throw new Error(`Response is missing required array field 'sources': ${data}`);\n    if (!Array.isArray(data['txns'])) throw new Error(`Response is missing required array field 'txns': ${data}`);\n    return new DryrunRequest({\n      accounts: data['accounts'].map(Account.from_obj_for_encoding),\n      apps: data['apps'].map(Application.from_obj_for_encoding),\n      latestTimestamp: data['latest-timestamp'],\n      protocolVersion: data['protocol-version'],\n      round: data['round'],\n      sources: data['sources'].map(DryrunSource.from_obj_for_encoding),\n      txns: data['txns']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * DryrunResponse contains per-txn debug information from a dryrun.\r\n */\nexport class DryrunResponse extends BaseModel {\n  /**\r\n   * Creates a new `DryrunResponse` object.\r\n   * @param error -\r\n   * @param protocolVersion - Protocol version is the protocol version Dryrun was operated under.\r\n   * @param txns -\r\n   */\n  constructor({\n    error,\n    protocolVersion,\n    txns\n  }) {\n    super();\n    this.error = error;\n    this.protocolVersion = protocolVersion;\n    this.txns = txns;\n    this.attribute_map = {\n      error: 'error',\n      protocolVersion: 'protocol-version',\n      txns: 'txns'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['error'] === 'undefined') throw new Error(`Response is missing required field 'error': ${data}`);\n    if (typeof data['protocol-version'] === 'undefined') throw new Error(`Response is missing required field 'protocol-version': ${data}`);\n    if (!Array.isArray(data['txns'])) throw new Error(`Response is missing required array field 'txns': ${data}`);\n    return new DryrunResponse({\n      error: data['error'],\n      protocolVersion: data['protocol-version'],\n      txns: data['txns'].map(DryrunTxnResult.from_obj_for_encoding)\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * DryrunSource is TEAL source text that gets uploaded, compiled, and inserted into\r\n * transactions or application state.\r\n */\nexport class DryrunSource extends BaseModel {\n  /**\r\n   * Creates a new `DryrunSource` object.\r\n   * @param fieldName - FieldName is what kind of sources this is. If lsig then it goes into the\r\n   * transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the\r\n   * Approval Program or Clear State Program of application[this.AppIndex].\r\n   * @param source -\r\n   * @param txnIndex -\r\n   * @param appIndex -\r\n   */\n  constructor({\n    fieldName,\n    source,\n    txnIndex,\n    appIndex\n  }) {\n    super();\n    this.fieldName = fieldName;\n    this.source = source;\n    this.txnIndex = txnIndex;\n    this.appIndex = appIndex;\n    this.attribute_map = {\n      fieldName: 'field-name',\n      source: 'source',\n      txnIndex: 'txn-index',\n      appIndex: 'app-index'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['field-name'] === 'undefined') throw new Error(`Response is missing required field 'field-name': ${data}`);\n    if (typeof data['source'] === 'undefined') throw new Error(`Response is missing required field 'source': ${data}`);\n    if (typeof data['txn-index'] === 'undefined') throw new Error(`Response is missing required field 'txn-index': ${data}`);\n    if (typeof data['app-index'] === 'undefined') throw new Error(`Response is missing required field 'app-index': ${data}`);\n    return new DryrunSource({\n      fieldName: data['field-name'],\n      source: data['source'],\n      txnIndex: data['txn-index'],\n      appIndex: data['app-index']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Stores the TEAL eval step data\r\n */\nexport class DryrunState extends BaseModel {\n  /**\r\n   * Creates a new `DryrunState` object.\r\n   * @param line - Line number\r\n   * @param pc - Program counter\r\n   * @param stack -\r\n   * @param error - Evaluation error if any\r\n   * @param scratch -\r\n   */\n  constructor({\n    line,\n    pc,\n    stack,\n    error,\n    scratch\n  }) {\n    super();\n    this.line = line;\n    this.pc = pc;\n    this.stack = stack;\n    this.error = error;\n    this.scratch = scratch;\n    this.attribute_map = {\n      line: 'line',\n      pc: 'pc',\n      stack: 'stack',\n      error: 'error',\n      scratch: 'scratch'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['line'] === 'undefined') throw new Error(`Response is missing required field 'line': ${data}`);\n    if (typeof data['pc'] === 'undefined') throw new Error(`Response is missing required field 'pc': ${data}`);\n    if (!Array.isArray(data['stack'])) throw new Error(`Response is missing required array field 'stack': ${data}`);\n    return new DryrunState({\n      line: data['line'],\n      pc: data['pc'],\n      stack: data['stack'].map(TealValue.from_obj_for_encoding),\n      error: data['error'],\n      scratch: typeof data['scratch'] !== 'undefined' ? data['scratch'].map(TealValue.from_obj_for_encoding) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * DryrunTxnResult contains any LogicSig or ApplicationCall program debug\r\n * information and state updates from a dryrun.\r\n */\nexport class DryrunTxnResult extends BaseModel {\n  /**\r\n   * Creates a new `DryrunTxnResult` object.\r\n   * @param disassembly - Disassembled program line by line.\r\n   * @param appCallMessages -\r\n   * @param appCallTrace -\r\n   * @param budgetAdded - Budget added during execution of app call transaction.\r\n   * @param budgetConsumed - Budget consumed during execution of app call transaction.\r\n   * @param globalDelta - Application state delta.\r\n   * @param localDeltas -\r\n   * @param logicSigDisassembly - Disassembled lsig program line by line.\r\n   * @param logicSigMessages -\r\n   * @param logicSigTrace -\r\n   * @param logs -\r\n   */\n  constructor({\n    disassembly,\n    appCallMessages,\n    appCallTrace,\n    budgetAdded,\n    budgetConsumed,\n    globalDelta,\n    localDeltas,\n    logicSigDisassembly,\n    logicSigMessages,\n    logicSigTrace,\n    logs\n  }) {\n    super();\n    this.disassembly = disassembly;\n    this.appCallMessages = appCallMessages;\n    this.appCallTrace = appCallTrace;\n    this.budgetAdded = budgetAdded;\n    this.budgetConsumed = budgetConsumed;\n    this.globalDelta = globalDelta;\n    this.localDeltas = localDeltas;\n    this.logicSigDisassembly = logicSigDisassembly;\n    this.logicSigMessages = logicSigMessages;\n    this.logicSigTrace = logicSigTrace;\n    this.logs = logs;\n    this.attribute_map = {\n      disassembly: 'disassembly',\n      appCallMessages: 'app-call-messages',\n      appCallTrace: 'app-call-trace',\n      budgetAdded: 'budget-added',\n      budgetConsumed: 'budget-consumed',\n      globalDelta: 'global-delta',\n      localDeltas: 'local-deltas',\n      logicSigDisassembly: 'logic-sig-disassembly',\n      logicSigMessages: 'logic-sig-messages',\n      logicSigTrace: 'logic-sig-trace',\n      logs: 'logs'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['disassembly'])) throw new Error(`Response is missing required array field 'disassembly': ${data}`);\n    return new DryrunTxnResult({\n      disassembly: data['disassembly'],\n      appCallMessages: data['app-call-messages'],\n      appCallTrace: typeof data['app-call-trace'] !== 'undefined' ? data['app-call-trace'].map(DryrunState.from_obj_for_encoding) : undefined,\n      budgetAdded: data['budget-added'],\n      budgetConsumed: data['budget-consumed'],\n      globalDelta: typeof data['global-delta'] !== 'undefined' ? data['global-delta'].map(EvalDeltaKeyValue.from_obj_for_encoding) : undefined,\n      localDeltas: typeof data['local-deltas'] !== 'undefined' ? data['local-deltas'].map(AccountStateDelta.from_obj_for_encoding) : undefined,\n      logicSigDisassembly: data['logic-sig-disassembly'],\n      logicSigMessages: data['logic-sig-messages'],\n      logicSigTrace: typeof data['logic-sig-trace'] !== 'undefined' ? data['logic-sig-trace'].map(DryrunState.from_obj_for_encoding) : undefined,\n      logs: data['logs']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * An error response with optional data field.\r\n */\nexport class ErrorResponse extends BaseModel {\n  /**\r\n   * Creates a new `ErrorResponse` object.\r\n   * @param message -\r\n   * @param data -\r\n   */\n  constructor({\n    message,\n    data\n  }) {\n    super();\n    this.message = message;\n    this.data = data;\n    this.attribute_map = {\n      message: 'message',\n      data: 'data'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['message'] === 'undefined') throw new Error(`Response is missing required field 'message': ${data}`);\n    return new ErrorResponse({\n      message: data['message'],\n      data: data['data']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Represents a TEAL value delta.\r\n */\nexport class EvalDelta extends BaseModel {\n  /**\r\n   * Creates a new `EvalDelta` object.\r\n   * @param action - (at) delta action.\r\n   * @param bytes - (bs) bytes value.\r\n   * @param uint - (ui) uint value.\r\n   */\n  constructor({\n    action,\n    bytes,\n    uint\n  }) {\n    super();\n    this.action = action;\n    this.bytes = bytes;\n    this.uint = uint;\n    this.attribute_map = {\n      action: 'action',\n      bytes: 'bytes',\n      uint: 'uint'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['action'] === 'undefined') throw new Error(`Response is missing required field 'action': ${data}`);\n    return new EvalDelta({\n      action: data['action'],\n      bytes: data['bytes'],\n      uint: data['uint']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Key-value pairs for StateDelta.\r\n */\nexport class EvalDeltaKeyValue extends BaseModel {\n  /**\r\n   * Creates a new `EvalDeltaKeyValue` object.\r\n   * @param key -\r\n   * @param value - Represents a TEAL value delta.\r\n   */\n  constructor({\n    key,\n    value\n  }) {\n    super();\n    this.key = key;\n    this.value = value;\n    this.attribute_map = {\n      key: 'key',\n      value: 'value'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['key'] === 'undefined') throw new Error(`Response is missing required field 'key': ${data}`);\n    if (typeof data['value'] === 'undefined') throw new Error(`Response is missing required field 'value': ${data}`);\n    return new EvalDeltaKeyValue({\n      key: data['key'],\n      value: EvalDelta.from_obj_for_encoding(data['value'])\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Response containing the timestamp offset in seconds\r\n */\nexport class GetBlockTimeStampOffsetResponse extends BaseModel {\n  /**\r\n   * Creates a new `GetBlockTimeStampOffsetResponse` object.\r\n   * @param offset - Timestamp offset in seconds.\r\n   */\n  constructor({\n    offset\n  }) {\n    super();\n    this.offset = offset;\n    this.attribute_map = {\n      offset: 'offset'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['offset'] === 'undefined') throw new Error(`Response is missing required field 'offset': ${data}`);\n    return new GetBlockTimeStampOffsetResponse({\n      offset: data['offset']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Response containing the ledger's minimum sync round\r\n */\nexport class GetSyncRoundResponse extends BaseModel {\n  /**\r\n   * Creates a new `GetSyncRoundResponse` object.\r\n   * @param round - The minimum sync round for the ledger.\r\n   */\n  constructor({\n    round\n  }) {\n    super();\n    this.round = round;\n    this.attribute_map = {\n      round: 'round'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['round'] === 'undefined') throw new Error(`Response is missing required field 'round': ${data}`);\n    return new GetSyncRoundResponse({\n      round: data['round']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * A single Delta containing the key, the previous value and the current value for\r\n * a single round.\r\n */\nexport class KvDelta extends BaseModel {\n  /**\r\n   * Creates a new `KvDelta` object.\r\n   * @param key - The key, base64 encoded.\r\n   * @param value - The new value of the KV store entry, base64 encoded.\r\n   */\n  constructor({\n    key,\n    value\n  }) {\n    super();\n    this.key = typeof key === 'string' ? new Uint8Array(Buffer.from(key, 'base64')) : key;\n    this.value = typeof value === 'string' ? new Uint8Array(Buffer.from(value, 'base64')) : value;\n    this.attribute_map = {\n      key: 'key',\n      value: 'value'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new KvDelta({\n      key: data['key'],\n      value: data['value']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Contains a ledger delta for a single transaction group\r\n */\nexport class LedgerStateDeltaForTransactionGroup extends BaseModel {\n  /**\r\n   * Creates a new `LedgerStateDeltaForTransactionGroup` object.\r\n   * @param delta - Ledger StateDelta object\r\n   * @param ids -\r\n   */\n  constructor({\n    delta,\n    ids\n  }) {\n    super();\n    this.delta = delta;\n    this.ids = ids;\n    this.attribute_map = {\n      delta: 'Delta',\n      ids: 'Ids'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['Delta'] === 'undefined') throw new Error(`Response is missing required field 'Delta': ${data}`);\n    if (!Array.isArray(data['Ids'])) throw new Error(`Response is missing required array field 'Ids': ${data}`);\n    return new LedgerStateDeltaForTransactionGroup({\n      delta: data['Delta'],\n      ids: data['Ids']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Proof of membership and position of a light block header.\r\n */\nexport class LightBlockHeaderProof extends BaseModel {\n  /**\r\n   * Creates a new `LightBlockHeaderProof` object.\r\n   * @param index - The index of the light block header in the vector commitment tree\r\n   * @param proof - The encoded proof.\r\n   * @param treedepth - Represents the depth of the tree that is being proven, i.e. the number of edges\r\n   * from a leaf to the root.\r\n   */\n  constructor({\n    index,\n    proof,\n    treedepth\n  }) {\n    super();\n    this.index = index;\n    this.proof = typeof proof === 'string' ? new Uint8Array(Buffer.from(proof, 'base64')) : proof;\n    this.treedepth = treedepth;\n    this.attribute_map = {\n      index: 'index',\n      proof: 'proof',\n      treedepth: 'treedepth'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['index'] === 'undefined') throw new Error(`Response is missing required field 'index': ${data}`);\n    if (typeof data['proof'] === 'undefined') throw new Error(`Response is missing required field 'proof': ${data}`);\n    if (typeof data['treedepth'] === 'undefined') throw new Error(`Response is missing required field 'treedepth': ${data}`);\n    return new LightBlockHeaderProof({\n      index: data['index'],\n      proof: data['proof'],\n      treedepth: data['treedepth']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n *\r\n */\nexport class NodeStatusResponse extends BaseModel {\n  /**\r\n   * Creates a new `NodeStatusResponse` object.\r\n   * @param catchupTime - CatchupTime in nanoseconds\r\n   * @param lastRound - LastRound indicates the last round seen\r\n   * @param lastVersion - LastVersion indicates the last consensus version supported\r\n   * @param nextVersion - NextVersion of consensus protocol to use\r\n   * @param nextVersionRound - NextVersionRound is the round at which the next consensus version will apply\r\n   * @param nextVersionSupported - NextVersionSupported indicates whether the next consensus version is supported\r\n   * by this node\r\n   * @param stoppedAtUnsupportedRound - StoppedAtUnsupportedRound indicates that the node does not support the new\r\n   * rounds and has stopped making progress\r\n   * @param timeSinceLastRound - TimeSinceLastRound in nanoseconds\r\n   * @param catchpoint - The current catchpoint that is being caught up to\r\n   * @param catchpointAcquiredBlocks - The number of blocks that have already been obtained by the node as part of the\r\n   * catchup\r\n   * @param catchpointProcessedAccounts - The number of accounts from the current catchpoint that have been processed so\r\n   * far as part of the catchup\r\n   * @param catchpointProcessedKvs - The number of key-values (KVs) from the current catchpoint that have been\r\n   * processed so far as part of the catchup\r\n   * @param catchpointTotalAccounts - The total number of accounts included in the current catchpoint\r\n   * @param catchpointTotalBlocks - The total number of blocks that are required to complete the current catchpoint\r\n   * catchup\r\n   * @param catchpointTotalKvs - The total number of key-values (KVs) included in the current catchpoint\r\n   * @param catchpointVerifiedAccounts - The number of accounts from the current catchpoint that have been verified so\r\n   * far as part of the catchup\r\n   * @param catchpointVerifiedKvs - The number of key-values (KVs) from the current catchpoint that have been\r\n   * verified so far as part of the catchup\r\n   * @param lastCatchpoint - The last catchpoint seen by the node\r\n   * @param upgradeDelay - Upgrade delay\r\n   * @param upgradeNextProtocolVoteBefore - Next protocol round\r\n   * @param upgradeNoVotes - No votes cast for consensus upgrade\r\n   * @param upgradeNodeVote - This node's upgrade vote\r\n   * @param upgradeVoteRounds - Total voting rounds for current upgrade\r\n   * @param upgradeVotes - Total votes cast for consensus upgrade\r\n   * @param upgradeVotesRequired - Yes votes required for consensus upgrade\r\n   * @param upgradeYesVotes - Yes votes cast for consensus upgrade\r\n   */\n  constructor({\n    catchupTime,\n    lastRound,\n    lastVersion,\n    nextVersion,\n    nextVersionRound,\n    nextVersionSupported,\n    stoppedAtUnsupportedRound,\n    timeSinceLastRound,\n    catchpoint,\n    catchpointAcquiredBlocks,\n    catchpointProcessedAccounts,\n    catchpointProcessedKvs,\n    catchpointTotalAccounts,\n    catchpointTotalBlocks,\n    catchpointTotalKvs,\n    catchpointVerifiedAccounts,\n    catchpointVerifiedKvs,\n    lastCatchpoint,\n    upgradeDelay,\n    upgradeNextProtocolVoteBefore,\n    upgradeNoVotes,\n    upgradeNodeVote,\n    upgradeVoteRounds,\n    upgradeVotes,\n    upgradeVotesRequired,\n    upgradeYesVotes\n  }) {\n    super();\n    this.catchupTime = catchupTime;\n    this.lastRound = lastRound;\n    this.lastVersion = lastVersion;\n    this.nextVersion = nextVersion;\n    this.nextVersionRound = nextVersionRound;\n    this.nextVersionSupported = nextVersionSupported;\n    this.stoppedAtUnsupportedRound = stoppedAtUnsupportedRound;\n    this.timeSinceLastRound = timeSinceLastRound;\n    this.catchpoint = catchpoint;\n    this.catchpointAcquiredBlocks = catchpointAcquiredBlocks;\n    this.catchpointProcessedAccounts = catchpointProcessedAccounts;\n    this.catchpointProcessedKvs = catchpointProcessedKvs;\n    this.catchpointTotalAccounts = catchpointTotalAccounts;\n    this.catchpointTotalBlocks = catchpointTotalBlocks;\n    this.catchpointTotalKvs = catchpointTotalKvs;\n    this.catchpointVerifiedAccounts = catchpointVerifiedAccounts;\n    this.catchpointVerifiedKvs = catchpointVerifiedKvs;\n    this.lastCatchpoint = lastCatchpoint;\n    this.upgradeDelay = upgradeDelay;\n    this.upgradeNextProtocolVoteBefore = upgradeNextProtocolVoteBefore;\n    this.upgradeNoVotes = upgradeNoVotes;\n    this.upgradeNodeVote = upgradeNodeVote;\n    this.upgradeVoteRounds = upgradeVoteRounds;\n    this.upgradeVotes = upgradeVotes;\n    this.upgradeVotesRequired = upgradeVotesRequired;\n    this.upgradeYesVotes = upgradeYesVotes;\n    this.attribute_map = {\n      catchupTime: 'catchup-time',\n      lastRound: 'last-round',\n      lastVersion: 'last-version',\n      nextVersion: 'next-version',\n      nextVersionRound: 'next-version-round',\n      nextVersionSupported: 'next-version-supported',\n      stoppedAtUnsupportedRound: 'stopped-at-unsupported-round',\n      timeSinceLastRound: 'time-since-last-round',\n      catchpoint: 'catchpoint',\n      catchpointAcquiredBlocks: 'catchpoint-acquired-blocks',\n      catchpointProcessedAccounts: 'catchpoint-processed-accounts',\n      catchpointProcessedKvs: 'catchpoint-processed-kvs',\n      catchpointTotalAccounts: 'catchpoint-total-accounts',\n      catchpointTotalBlocks: 'catchpoint-total-blocks',\n      catchpointTotalKvs: 'catchpoint-total-kvs',\n      catchpointVerifiedAccounts: 'catchpoint-verified-accounts',\n      catchpointVerifiedKvs: 'catchpoint-verified-kvs',\n      lastCatchpoint: 'last-catchpoint',\n      upgradeDelay: 'upgrade-delay',\n      upgradeNextProtocolVoteBefore: 'upgrade-next-protocol-vote-before',\n      upgradeNoVotes: 'upgrade-no-votes',\n      upgradeNodeVote: 'upgrade-node-vote',\n      upgradeVoteRounds: 'upgrade-vote-rounds',\n      upgradeVotes: 'upgrade-votes',\n      upgradeVotesRequired: 'upgrade-votes-required',\n      upgradeYesVotes: 'upgrade-yes-votes'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['catchup-time'] === 'undefined') throw new Error(`Response is missing required field 'catchup-time': ${data}`);\n    if (typeof data['last-round'] === 'undefined') throw new Error(`Response is missing required field 'last-round': ${data}`);\n    if (typeof data['last-version'] === 'undefined') throw new Error(`Response is missing required field 'last-version': ${data}`);\n    if (typeof data['next-version'] === 'undefined') throw new Error(`Response is missing required field 'next-version': ${data}`);\n    if (typeof data['next-version-round'] === 'undefined') throw new Error(`Response is missing required field 'next-version-round': ${data}`);\n    if (typeof data['next-version-supported'] === 'undefined') throw new Error(`Response is missing required field 'next-version-supported': ${data}`);\n    if (typeof data['stopped-at-unsupported-round'] === 'undefined') throw new Error(`Response is missing required field 'stopped-at-unsupported-round': ${data}`);\n    if (typeof data['time-since-last-round'] === 'undefined') throw new Error(`Response is missing required field 'time-since-last-round': ${data}`);\n    return new NodeStatusResponse({\n      catchupTime: data['catchup-time'],\n      lastRound: data['last-round'],\n      lastVersion: data['last-version'],\n      nextVersion: data['next-version'],\n      nextVersionRound: data['next-version-round'],\n      nextVersionSupported: data['next-version-supported'],\n      stoppedAtUnsupportedRound: data['stopped-at-unsupported-round'],\n      timeSinceLastRound: data['time-since-last-round'],\n      catchpoint: data['catchpoint'],\n      catchpointAcquiredBlocks: data['catchpoint-acquired-blocks'],\n      catchpointProcessedAccounts: data['catchpoint-processed-accounts'],\n      catchpointProcessedKvs: data['catchpoint-processed-kvs'],\n      catchpointTotalAccounts: data['catchpoint-total-accounts'],\n      catchpointTotalBlocks: data['catchpoint-total-blocks'],\n      catchpointTotalKvs: data['catchpoint-total-kvs'],\n      catchpointVerifiedAccounts: data['catchpoint-verified-accounts'],\n      catchpointVerifiedKvs: data['catchpoint-verified-kvs'],\n      lastCatchpoint: data['last-catchpoint'],\n      upgradeDelay: data['upgrade-delay'],\n      upgradeNextProtocolVoteBefore: data['upgrade-next-protocol-vote-before'],\n      upgradeNoVotes: data['upgrade-no-votes'],\n      upgradeNodeVote: data['upgrade-node-vote'],\n      upgradeVoteRounds: data['upgrade-vote-rounds'],\n      upgradeVotes: data['upgrade-votes'],\n      upgradeVotesRequired: data['upgrade-votes-required'],\n      upgradeYesVotes: data['upgrade-yes-votes']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Details about a pending transaction. If the transaction was recently confirmed,\r\n * includes confirmation details like the round and reward details.\r\n */\nexport class PendingTransactionResponse extends BaseModel {\n  /**\r\n   * Creates a new `PendingTransactionResponse` object.\r\n   * @param poolError - Indicates that the transaction was kicked out of this node's transaction pool\r\n   * (and specifies why that happened). An empty string indicates the transaction\r\n   * wasn't kicked out of this node's txpool due to an error.\r\n   * @param txn - The raw signed transaction.\r\n   * @param applicationIndex - The application index if the transaction was found and it created an\r\n   * application.\r\n   * @param assetClosingAmount - The number of the asset's unit that were transferred to the close-to address.\r\n   * @param assetIndex - The asset index if the transaction was found and it created an asset.\r\n   * @param closeRewards - Rewards in microalgos applied to the close remainder to account.\r\n   * @param closingAmount - Closing amount for the transaction.\r\n   * @param confirmedRound - The round where this transaction was confirmed, if present.\r\n   * @param globalStateDelta - Global state key/value changes for the application being executed by this\r\n   * transaction.\r\n   * @param innerTxns - Inner transactions produced by application execution.\r\n   * @param localStateDelta - Local state key/value changes for the application being executed by this\r\n   * transaction.\r\n   * @param logs - Logs for the application being executed by this transaction.\r\n   * @param receiverRewards - Rewards in microalgos applied to the receiver account.\r\n   * @param senderRewards - Rewards in microalgos applied to the sender account.\r\n   */\n  constructor({\n    poolError,\n    txn,\n    applicationIndex,\n    assetClosingAmount,\n    assetIndex,\n    closeRewards,\n    closingAmount,\n    confirmedRound,\n    globalStateDelta,\n    innerTxns,\n    localStateDelta,\n    logs,\n    receiverRewards,\n    senderRewards\n  }) {\n    super();\n    this.poolError = poolError;\n    this.txn = txn;\n    this.applicationIndex = applicationIndex;\n    this.assetClosingAmount = assetClosingAmount;\n    this.assetIndex = assetIndex;\n    this.closeRewards = closeRewards;\n    this.closingAmount = closingAmount;\n    this.confirmedRound = confirmedRound;\n    this.globalStateDelta = globalStateDelta;\n    this.innerTxns = innerTxns;\n    this.localStateDelta = localStateDelta;\n    this.logs = logs;\n    this.receiverRewards = receiverRewards;\n    this.senderRewards = senderRewards;\n    this.attribute_map = {\n      poolError: 'pool-error',\n      txn: 'txn',\n      applicationIndex: 'application-index',\n      assetClosingAmount: 'asset-closing-amount',\n      assetIndex: 'asset-index',\n      closeRewards: 'close-rewards',\n      closingAmount: 'closing-amount',\n      confirmedRound: 'confirmed-round',\n      globalStateDelta: 'global-state-delta',\n      innerTxns: 'inner-txns',\n      localStateDelta: 'local-state-delta',\n      logs: 'logs',\n      receiverRewards: 'receiver-rewards',\n      senderRewards: 'sender-rewards'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['pool-error'] === 'undefined') throw new Error(`Response is missing required field 'pool-error': ${data}`);\n    if (typeof data['txn'] === 'undefined') throw new Error(`Response is missing required field 'txn': ${data}`);\n    return new PendingTransactionResponse({\n      poolError: data['pool-error'],\n      txn: data['txn'],\n      applicationIndex: data['application-index'],\n      assetClosingAmount: data['asset-closing-amount'],\n      assetIndex: data['asset-index'],\n      closeRewards: data['close-rewards'],\n      closingAmount: data['closing-amount'],\n      confirmedRound: data['confirmed-round'],\n      globalStateDelta: typeof data['global-state-delta'] !== 'undefined' ? data['global-state-delta'].map(EvalDeltaKeyValue.from_obj_for_encoding) : undefined,\n      innerTxns: typeof data['inner-txns'] !== 'undefined' ? data['inner-txns'].map(PendingTransactionResponse.from_obj_for_encoding) : undefined,\n      localStateDelta: typeof data['local-state-delta'] !== 'undefined' ? data['local-state-delta'].map(AccountStateDelta.from_obj_for_encoding) : undefined,\n      logs: data['logs'],\n      receiverRewards: data['receiver-rewards'],\n      senderRewards: data['sender-rewards']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * A potentially truncated list of transactions currently in the node's transaction\r\n * pool. You can compute whether or not the list is truncated if the number of\r\n * elements in the **top-transactions** array is fewer than **total-transactions**.\r\n */\nexport class PendingTransactionsResponse extends BaseModel {\n  /**\r\n   * Creates a new `PendingTransactionsResponse` object.\r\n   * @param topTransactions - An array of signed transaction objects.\r\n   * @param totalTransactions - Total number of transactions in the pool.\r\n   */\n  constructor({\n    topTransactions,\n    totalTransactions\n  }) {\n    super();\n    this.topTransactions = topTransactions;\n    this.totalTransactions = totalTransactions;\n    this.attribute_map = {\n      topTransactions: 'top-transactions',\n      totalTransactions: 'total-transactions'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['top-transactions'])) throw new Error(`Response is missing required array field 'top-transactions': ${data}`);\n    if (typeof data['total-transactions'] === 'undefined') throw new Error(`Response is missing required field 'total-transactions': ${data}`);\n    return new PendingTransactionsResponse({\n      topTransactions: data['top-transactions'],\n      totalTransactions: data['total-transactions']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Transaction ID of the submission.\r\n */\nexport class PostTransactionsResponse extends BaseModel {\n  /**\r\n   * Creates a new `PostTransactionsResponse` object.\r\n   * @param txid - encoding of the transaction hash.\r\n   */\n  constructor({\n    txid\n  }) {\n    super();\n    this.txid = txid;\n    this.attribute_map = {\n      txid: 'txId'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['txId'] === 'undefined') throw new Error(`Response is missing required field 'txId': ${data}`);\n    return new PostTransactionsResponse({\n      txid: data['txId']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * A write operation into a scratch slot.\r\n */\nexport class ScratchChange extends BaseModel {\n  /**\r\n   * Creates a new `ScratchChange` object.\r\n   * @param newValue - Represents an AVM value.\r\n   * @param slot - The scratch slot written.\r\n   */\n  constructor({\n    newValue,\n    slot\n  }) {\n    super();\n    this.newValue = newValue;\n    this.slot = slot;\n    this.attribute_map = {\n      newValue: 'new-value',\n      slot: 'slot'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['new-value'] === 'undefined') throw new Error(`Response is missing required field 'new-value': ${data}`);\n    if (typeof data['slot'] === 'undefined') throw new Error(`Response is missing required field 'slot': ${data}`);\n    return new ScratchChange({\n      newValue: AvmValue.from_obj_for_encoding(data['new-value']),\n      slot: data['slot']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Initial states of resources that were accessed during simulation.\r\n */\nexport class SimulateInitialStates extends BaseModel {\n  /**\r\n   * Creates a new `SimulateInitialStates` object.\r\n   * @param appInitialStates - The initial states of accessed application before simulation. The order of this\r\n   * array is arbitrary.\r\n   */\n  constructor({\n    appInitialStates\n  }) {\n    super();\n    this.appInitialStates = appInitialStates;\n    this.attribute_map = {\n      appInitialStates: 'app-initial-states'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new SimulateInitialStates({\n      appInitialStates: typeof data['app-initial-states'] !== 'undefined' ? data['app-initial-states'].map(ApplicationInitialStates.from_obj_for_encoding) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Request type for simulation endpoint.\r\n */\nexport class SimulateRequest extends BaseModel {\n  /**\r\n   * Creates a new `SimulateRequest` object.\r\n   * @param txnGroups - The transaction groups to simulate.\r\n   * @param allowEmptySignatures - Allows transactions without signatures to be simulated as if they had correct\r\n   * signatures.\r\n   * @param allowMoreLogging - Lifts limits on log opcode usage during simulation.\r\n   * @param allowUnnamedResources - Allows access to unnamed resources during simulation.\r\n   * @param execTraceConfig - An object that configures simulation execution trace.\r\n   * @param extraOpcodeBudget - Applies extra opcode budget during simulation for each transaction group.\r\n   * @param fixSigners - If true, signers for transactions that are missing signatures will be fixed\r\n   * during evaluation.\r\n   * @param round - If provided, specifies the round preceding the simulation. State changes through\r\n   * this round will be used to run this simulation. Usually only the 4 most recent\r\n   * rounds will be available (controlled by the node config value MaxAcctLookback).\r\n   * If not specified, defaults to the latest available round.\r\n   */\n  constructor({\n    txnGroups,\n    allowEmptySignatures,\n    allowMoreLogging,\n    allowUnnamedResources,\n    execTraceConfig,\n    extraOpcodeBudget,\n    fixSigners,\n    round\n  }) {\n    super();\n    this.txnGroups = txnGroups;\n    this.allowEmptySignatures = allowEmptySignatures;\n    this.allowMoreLogging = allowMoreLogging;\n    this.allowUnnamedResources = allowUnnamedResources;\n    this.execTraceConfig = execTraceConfig;\n    this.extraOpcodeBudget = extraOpcodeBudget;\n    this.fixSigners = fixSigners;\n    this.round = round;\n    this.attribute_map = {\n      txnGroups: 'txn-groups',\n      allowEmptySignatures: 'allow-empty-signatures',\n      allowMoreLogging: 'allow-more-logging',\n      allowUnnamedResources: 'allow-unnamed-resources',\n      execTraceConfig: 'exec-trace-config',\n      extraOpcodeBudget: 'extra-opcode-budget',\n      fixSigners: 'fix-signers',\n      round: 'round'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['txn-groups'])) throw new Error(`Response is missing required array field 'txn-groups': ${data}`);\n    return new SimulateRequest({\n      txnGroups: data['txn-groups'].map(SimulateRequestTransactionGroup.from_obj_for_encoding),\n      allowEmptySignatures: data['allow-empty-signatures'],\n      allowMoreLogging: data['allow-more-logging'],\n      allowUnnamedResources: data['allow-unnamed-resources'],\n      execTraceConfig: typeof data['exec-trace-config'] !== 'undefined' ? SimulateTraceConfig.from_obj_for_encoding(data['exec-trace-config']) : undefined,\n      extraOpcodeBudget: data['extra-opcode-budget'],\n      fixSigners: data['fix-signers'],\n      round: data['round']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * A transaction group to simulate.\r\n */\nexport class SimulateRequestTransactionGroup extends BaseModel {\n  /**\r\n   * Creates a new `SimulateRequestTransactionGroup` object.\r\n   * @param txns - An atomic transaction group.\r\n   */\n  constructor({\n    txns\n  }) {\n    super();\n    this.txns = txns;\n    this.attribute_map = {\n      txns: 'txns'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['txns'])) throw new Error(`Response is missing required array field 'txns': ${data}`);\n    return new SimulateRequestTransactionGroup({\n      txns: data['txns']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Result of a transaction group simulation.\r\n */\nexport class SimulateResponse extends BaseModel {\n  /**\r\n   * Creates a new `SimulateResponse` object.\r\n   * @param lastRound - The round immediately preceding this simulation. State changes through this\r\n   * round were used to run this simulation.\r\n   * @param txnGroups - A result object for each transaction group that was simulated.\r\n   * @param version - The version of this response object.\r\n   * @param evalOverrides - The set of parameters and limits override during simulation. If this set of\r\n   * parameters is present, then evaluation parameters may differ from standard\r\n   * evaluation in certain ways.\r\n   * @param execTraceConfig - An object that configures simulation execution trace.\r\n   * @param initialStates - Initial states of resources that were accessed during simulation.\r\n   */\n  constructor({\n    lastRound,\n    txnGroups,\n    version,\n    evalOverrides,\n    execTraceConfig,\n    initialStates\n  }) {\n    super();\n    this.lastRound = lastRound;\n    this.txnGroups = txnGroups;\n    this.version = version;\n    this.evalOverrides = evalOverrides;\n    this.execTraceConfig = execTraceConfig;\n    this.initialStates = initialStates;\n    this.attribute_map = {\n      lastRound: 'last-round',\n      txnGroups: 'txn-groups',\n      version: 'version',\n      evalOverrides: 'eval-overrides',\n      execTraceConfig: 'exec-trace-config',\n      initialStates: 'initial-states'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['last-round'] === 'undefined') throw new Error(`Response is missing required field 'last-round': ${data}`);\n    if (!Array.isArray(data['txn-groups'])) throw new Error(`Response is missing required array field 'txn-groups': ${data}`);\n    if (typeof data['version'] === 'undefined') throw new Error(`Response is missing required field 'version': ${data}`);\n    return new SimulateResponse({\n      lastRound: data['last-round'],\n      txnGroups: data['txn-groups'].map(SimulateTransactionGroupResult.from_obj_for_encoding),\n      version: data['version'],\n      evalOverrides: typeof data['eval-overrides'] !== 'undefined' ? SimulationEvalOverrides.from_obj_for_encoding(data['eval-overrides']) : undefined,\n      execTraceConfig: typeof data['exec-trace-config'] !== 'undefined' ? SimulateTraceConfig.from_obj_for_encoding(data['exec-trace-config']) : undefined,\n      initialStates: typeof data['initial-states'] !== 'undefined' ? SimulateInitialStates.from_obj_for_encoding(data['initial-states']) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * An object that configures simulation execution trace.\r\n */\nexport class SimulateTraceConfig extends BaseModel {\n  /**\r\n   * Creates a new `SimulateTraceConfig` object.\r\n   * @param enable - A boolean option for opting in execution trace features simulation endpoint.\r\n   * @param scratchChange - A boolean option enabling returning scratch slot changes together with execution\r\n   * trace during simulation.\r\n   * @param stackChange - A boolean option enabling returning stack changes together with execution trace\r\n   * during simulation.\r\n   * @param stateChange - A boolean option enabling returning application state changes (global, local,\r\n   * and box changes) with the execution trace during simulation.\r\n   */\n  constructor({\n    enable,\n    scratchChange,\n    stackChange,\n    stateChange\n  }) {\n    super();\n    this.enable = enable;\n    this.scratchChange = scratchChange;\n    this.stackChange = stackChange;\n    this.stateChange = stateChange;\n    this.attribute_map = {\n      enable: 'enable',\n      scratchChange: 'scratch-change',\n      stackChange: 'stack-change',\n      stateChange: 'state-change'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new SimulateTraceConfig({\n      enable: data['enable'],\n      scratchChange: data['scratch-change'],\n      stackChange: data['stack-change'],\n      stateChange: data['state-change']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Simulation result for an atomic transaction group\r\n */\nexport class SimulateTransactionGroupResult extends BaseModel {\n  /**\r\n   * Creates a new `SimulateTransactionGroupResult` object.\r\n   * @param txnResults - Simulation result for individual transactions\r\n   * @param appBudgetAdded - Total budget added during execution of app calls in the transaction group.\r\n   * @param appBudgetConsumed - Total budget consumed during execution of app calls in the transaction group.\r\n   * @param failedAt - If present, indicates which transaction in this group caused the failure. This\r\n   * array represents the path to the failing transaction. Indexes are zero based,\r\n   * the first element indicates the top-level transaction, and successive elements\r\n   * indicate deeper inner transactions.\r\n   * @param failureMessage - If present, indicates that the transaction group failed and specifies why that\r\n   * happened\r\n   * @param unnamedResourcesAccessed - These are resources that were accessed by this group that would normally have\r\n   * caused failure, but were allowed in simulation. Depending on where this object\r\n   * is in the response, the unnamed resources it contains may or may not qualify for\r\n   * group resource sharing. If this is a field in SimulateTransactionGroupResult,\r\n   * the resources do qualify, but if this is a field in SimulateTransactionResult,\r\n   * they do not qualify. In order to make this group valid for actual submission,\r\n   * resources that qualify for group sharing can be made available by any\r\n   * transaction of the group; otherwise, resources must be placed in the same\r\n   * transaction which accessed them.\r\n   */\n  constructor({\n    txnResults,\n    appBudgetAdded,\n    appBudgetConsumed,\n    failedAt,\n    failureMessage,\n    unnamedResourcesAccessed\n  }) {\n    super();\n    this.txnResults = txnResults;\n    this.appBudgetAdded = appBudgetAdded;\n    this.appBudgetConsumed = appBudgetConsumed;\n    this.failedAt = failedAt;\n    this.failureMessage = failureMessage;\n    this.unnamedResourcesAccessed = unnamedResourcesAccessed;\n    this.attribute_map = {\n      txnResults: 'txn-results',\n      appBudgetAdded: 'app-budget-added',\n      appBudgetConsumed: 'app-budget-consumed',\n      failedAt: 'failed-at',\n      failureMessage: 'failure-message',\n      unnamedResourcesAccessed: 'unnamed-resources-accessed'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['txn-results'])) throw new Error(`Response is missing required array field 'txn-results': ${data}`);\n    return new SimulateTransactionGroupResult({\n      txnResults: data['txn-results'].map(SimulateTransactionResult.from_obj_for_encoding),\n      appBudgetAdded: data['app-budget-added'],\n      appBudgetConsumed: data['app-budget-consumed'],\n      failedAt: data['failed-at'],\n      failureMessage: data['failure-message'],\n      unnamedResourcesAccessed: typeof data['unnamed-resources-accessed'] !== 'undefined' ? SimulateUnnamedResourcesAccessed.from_obj_for_encoding(data['unnamed-resources-accessed']) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Simulation result for an individual transaction\r\n */\nexport class SimulateTransactionResult extends BaseModel {\n  /**\r\n   * Creates a new `SimulateTransactionResult` object.\r\n   * @param txnResult - Details about a pending transaction. If the transaction was recently confirmed,\r\n   * includes confirmation details like the round and reward details.\r\n   * @param appBudgetConsumed - Budget used during execution of an app call transaction. This value includes\r\n   * budged used by inner app calls spawned by this transaction.\r\n   * @param execTrace - The execution trace of calling an app or a logic sig, containing the inner app\r\n   * call trace in a recursive way.\r\n   * @param fixedSigner - The account that needed to sign this transaction when no signature was provided\r\n   * and the provided signer was incorrect.\r\n   * @param logicSigBudgetConsumed - Budget used during execution of a logic sig transaction.\r\n   * @param unnamedResourcesAccessed - These are resources that were accessed by this group that would normally have\r\n   * caused failure, but were allowed in simulation. Depending on where this object\r\n   * is in the response, the unnamed resources it contains may or may not qualify for\r\n   * group resource sharing. If this is a field in SimulateTransactionGroupResult,\r\n   * the resources do qualify, but if this is a field in SimulateTransactionResult,\r\n   * they do not qualify. In order to make this group valid for actual submission,\r\n   * resources that qualify for group sharing can be made available by any\r\n   * transaction of the group; otherwise, resources must be placed in the same\r\n   * transaction which accessed them.\r\n   */\n  constructor({\n    txnResult,\n    appBudgetConsumed,\n    execTrace,\n    fixedSigner,\n    logicSigBudgetConsumed,\n    unnamedResourcesAccessed\n  }) {\n    super();\n    this.txnResult = txnResult;\n    this.appBudgetConsumed = appBudgetConsumed;\n    this.execTrace = execTrace;\n    this.fixedSigner = fixedSigner;\n    this.logicSigBudgetConsumed = logicSigBudgetConsumed;\n    this.unnamedResourcesAccessed = unnamedResourcesAccessed;\n    this.attribute_map = {\n      txnResult: 'txn-result',\n      appBudgetConsumed: 'app-budget-consumed',\n      execTrace: 'exec-trace',\n      fixedSigner: 'fixed-signer',\n      logicSigBudgetConsumed: 'logic-sig-budget-consumed',\n      unnamedResourcesAccessed: 'unnamed-resources-accessed'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['txn-result'] === 'undefined') throw new Error(`Response is missing required field 'txn-result': ${data}`);\n    return new SimulateTransactionResult({\n      txnResult: PendingTransactionResponse.from_obj_for_encoding(data['txn-result']),\n      appBudgetConsumed: data['app-budget-consumed'],\n      execTrace: typeof data['exec-trace'] !== 'undefined' ? SimulationTransactionExecTrace.from_obj_for_encoding(data['exec-trace']) : undefined,\n      fixedSigner: data['fixed-signer'],\n      logicSigBudgetConsumed: data['logic-sig-budget-consumed'],\n      unnamedResourcesAccessed: typeof data['unnamed-resources-accessed'] !== 'undefined' ? SimulateUnnamedResourcesAccessed.from_obj_for_encoding(data['unnamed-resources-accessed']) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * These are resources that were accessed by this group that would normally have\r\n * caused failure, but were allowed in simulation. Depending on where this object\r\n * is in the response, the unnamed resources it contains may or may not qualify for\r\n * group resource sharing. If this is a field in SimulateTransactionGroupResult,\r\n * the resources do qualify, but if this is a field in SimulateTransactionResult,\r\n * they do not qualify. In order to make this group valid for actual submission,\r\n * resources that qualify for group sharing can be made available by any\r\n * transaction of the group; otherwise, resources must be placed in the same\r\n * transaction which accessed them.\r\n */\nexport class SimulateUnnamedResourcesAccessed extends BaseModel {\n  /**\r\n   * Creates a new `SimulateUnnamedResourcesAccessed` object.\r\n   * @param accounts - The unnamed accounts that were referenced. The order of this array is arbitrary.\r\n   * @param appLocals - The unnamed application local states that were referenced. The order of this\r\n   * array is arbitrary.\r\n   * @param apps - The unnamed applications that were referenced. The order of this array is\r\n   * arbitrary.\r\n   * @param assetHoldings - The unnamed asset holdings that were referenced. The order of this array is\r\n   * arbitrary.\r\n   * @param assets - The unnamed assets that were referenced. The order of this array is arbitrary.\r\n   * @param boxes - The unnamed boxes that were referenced. The order of this array is arbitrary.\r\n   * @param extraBoxRefs - The number of extra box references used to increase the IO budget. This is in\r\n   * addition to the references defined in the input transaction group and any\r\n   * referenced to unnamed boxes.\r\n   */\n  constructor({\n    accounts,\n    appLocals,\n    apps,\n    assetHoldings,\n    assets,\n    boxes,\n    extraBoxRefs\n  }) {\n    super();\n    this.accounts = accounts;\n    this.appLocals = appLocals;\n    this.apps = apps;\n    this.assetHoldings = assetHoldings;\n    this.assets = assets;\n    this.boxes = boxes;\n    this.extraBoxRefs = extraBoxRefs;\n    this.attribute_map = {\n      accounts: 'accounts',\n      appLocals: 'app-locals',\n      apps: 'apps',\n      assetHoldings: 'asset-holdings',\n      assets: 'assets',\n      boxes: 'boxes',\n      extraBoxRefs: 'extra-box-refs'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new SimulateUnnamedResourcesAccessed({\n      accounts: data['accounts'],\n      appLocals: typeof data['app-locals'] !== 'undefined' ? data['app-locals'].map(ApplicationLocalReference.from_obj_for_encoding) : undefined,\n      apps: data['apps'],\n      assetHoldings: typeof data['asset-holdings'] !== 'undefined' ? data['asset-holdings'].map(AssetHoldingReference.from_obj_for_encoding) : undefined,\n      assets: data['assets'],\n      boxes: typeof data['boxes'] !== 'undefined' ? data['boxes'].map(BoxReference.from_obj_for_encoding) : undefined,\n      extraBoxRefs: data['extra-box-refs']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * The set of parameters and limits override during simulation. If this set of\r\n * parameters is present, then evaluation parameters may differ from standard\r\n * evaluation in certain ways.\r\n */\nexport class SimulationEvalOverrides extends BaseModel {\n  /**\r\n   * Creates a new `SimulationEvalOverrides` object.\r\n   * @param allowEmptySignatures - If true, transactions without signatures are allowed and simulated as if they\r\n   * were properly signed.\r\n   * @param allowUnnamedResources - If true, allows access to unnamed resources during simulation.\r\n   * @param extraOpcodeBudget - The extra opcode budget added to each transaction group during simulation\r\n   * @param fixSigners - If true, signers for transactions that are missing signatures will be fixed\r\n   * during evaluation.\r\n   * @param maxLogCalls - The maximum log calls one can make during simulation\r\n   * @param maxLogSize - The maximum byte number to log during simulation\r\n   */\n  constructor({\n    allowEmptySignatures,\n    allowUnnamedResources,\n    extraOpcodeBudget,\n    fixSigners,\n    maxLogCalls,\n    maxLogSize\n  }) {\n    super();\n    this.allowEmptySignatures = allowEmptySignatures;\n    this.allowUnnamedResources = allowUnnamedResources;\n    this.extraOpcodeBudget = extraOpcodeBudget;\n    this.fixSigners = fixSigners;\n    this.maxLogCalls = maxLogCalls;\n    this.maxLogSize = maxLogSize;\n    this.attribute_map = {\n      allowEmptySignatures: 'allow-empty-signatures',\n      allowUnnamedResources: 'allow-unnamed-resources',\n      extraOpcodeBudget: 'extra-opcode-budget',\n      fixSigners: 'fix-signers',\n      maxLogCalls: 'max-log-calls',\n      maxLogSize: 'max-log-size'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new SimulationEvalOverrides({\n      allowEmptySignatures: data['allow-empty-signatures'],\n      allowUnnamedResources: data['allow-unnamed-resources'],\n      extraOpcodeBudget: data['extra-opcode-budget'],\n      fixSigners: data['fix-signers'],\n      maxLogCalls: data['max-log-calls'],\n      maxLogSize: data['max-log-size']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * The set of trace information and effect from evaluating a single opcode.\r\n */\nexport class SimulationOpcodeTraceUnit extends BaseModel {\n  /**\r\n   * Creates a new `SimulationOpcodeTraceUnit` object.\r\n   * @param pc - The program counter of the current opcode being evaluated.\r\n   * @param scratchChanges - The writes into scratch slots.\r\n   * @param spawnedInners - The indexes of the traces for inner transactions spawned by this opcode, if any.\r\n   * @param stackAdditions - The values added by this opcode to the stack.\r\n   * @param stackPopCount - The number of deleted stack values by this opcode.\r\n   * @param stateChanges - The operations against the current application's states.\r\n   */\n  constructor({\n    pc,\n    scratchChanges,\n    spawnedInners,\n    stackAdditions,\n    stackPopCount,\n    stateChanges\n  }) {\n    super();\n    this.pc = pc;\n    this.scratchChanges = scratchChanges;\n    this.spawnedInners = spawnedInners;\n    this.stackAdditions = stackAdditions;\n    this.stackPopCount = stackPopCount;\n    this.stateChanges = stateChanges;\n    this.attribute_map = {\n      pc: 'pc',\n      scratchChanges: 'scratch-changes',\n      spawnedInners: 'spawned-inners',\n      stackAdditions: 'stack-additions',\n      stackPopCount: 'stack-pop-count',\n      stateChanges: 'state-changes'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['pc'] === 'undefined') throw new Error(`Response is missing required field 'pc': ${data}`);\n    return new SimulationOpcodeTraceUnit({\n      pc: data['pc'],\n      scratchChanges: typeof data['scratch-changes'] !== 'undefined' ? data['scratch-changes'].map(ScratchChange.from_obj_for_encoding) : undefined,\n      spawnedInners: data['spawned-inners'],\n      stackAdditions: typeof data['stack-additions'] !== 'undefined' ? data['stack-additions'].map(AvmValue.from_obj_for_encoding) : undefined,\n      stackPopCount: data['stack-pop-count'],\n      stateChanges: typeof data['state-changes'] !== 'undefined' ? data['state-changes'].map(ApplicationStateOperation.from_obj_for_encoding) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * The execution trace of calling an app or a logic sig, containing the inner app\r\n * call trace in a recursive way.\r\n */\nexport class SimulationTransactionExecTrace extends BaseModel {\n  /**\r\n   * Creates a new `SimulationTransactionExecTrace` object.\r\n   * @param approvalProgramHash - SHA512_256 hash digest of the approval program executed in transaction.\r\n   * @param approvalProgramTrace - Program trace that contains a trace of opcode effects in an approval program.\r\n   * @param clearStateProgramHash - SHA512_256 hash digest of the clear state program executed in transaction.\r\n   * @param clearStateProgramTrace - Program trace that contains a trace of opcode effects in a clear state program.\r\n   * @param clearStateRollback - If true, indicates that the clear state program failed and any persistent state\r\n   * changes it produced should be reverted once the program exits.\r\n   * @param clearStateRollbackError - The error message explaining why the clear state program failed. This field will\r\n   * only be populated if clear-state-rollback is true and the failure was due to an\r\n   * execution error.\r\n   * @param innerTrace - An array of SimulationTransactionExecTrace representing the execution trace of\r\n   * any inner transactions executed.\r\n   * @param logicSigHash - SHA512_256 hash digest of the logic sig executed in transaction.\r\n   * @param logicSigTrace - Program trace that contains a trace of opcode effects in a logic sig.\r\n   */\n  constructor({\n    approvalProgramHash,\n    approvalProgramTrace,\n    clearStateProgramHash,\n    clearStateProgramTrace,\n    clearStateRollback,\n    clearStateRollbackError,\n    innerTrace,\n    logicSigHash,\n    logicSigTrace\n  }) {\n    super();\n    this.approvalProgramHash = typeof approvalProgramHash === 'string' ? new Uint8Array(Buffer.from(approvalProgramHash, 'base64')) : approvalProgramHash;\n    this.approvalProgramTrace = approvalProgramTrace;\n    this.clearStateProgramHash = typeof clearStateProgramHash === 'string' ? new Uint8Array(Buffer.from(clearStateProgramHash, 'base64')) : clearStateProgramHash;\n    this.clearStateProgramTrace = clearStateProgramTrace;\n    this.clearStateRollback = clearStateRollback;\n    this.clearStateRollbackError = clearStateRollbackError;\n    this.innerTrace = innerTrace;\n    this.logicSigHash = typeof logicSigHash === 'string' ? new Uint8Array(Buffer.from(logicSigHash, 'base64')) : logicSigHash;\n    this.logicSigTrace = logicSigTrace;\n    this.attribute_map = {\n      approvalProgramHash: 'approval-program-hash',\n      approvalProgramTrace: 'approval-program-trace',\n      clearStateProgramHash: 'clear-state-program-hash',\n      clearStateProgramTrace: 'clear-state-program-trace',\n      clearStateRollback: 'clear-state-rollback',\n      clearStateRollbackError: 'clear-state-rollback-error',\n      innerTrace: 'inner-trace',\n      logicSigHash: 'logic-sig-hash',\n      logicSigTrace: 'logic-sig-trace'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new SimulationTransactionExecTrace({\n      approvalProgramHash: data['approval-program-hash'],\n      approvalProgramTrace: typeof data['approval-program-trace'] !== 'undefined' ? data['approval-program-trace'].map(SimulationOpcodeTraceUnit.from_obj_for_encoding) : undefined,\n      clearStateProgramHash: data['clear-state-program-hash'],\n      clearStateProgramTrace: typeof data['clear-state-program-trace'] !== 'undefined' ? data['clear-state-program-trace'].map(SimulationOpcodeTraceUnit.from_obj_for_encoding) : undefined,\n      clearStateRollback: data['clear-state-rollback'],\n      clearStateRollbackError: data['clear-state-rollback-error'],\n      innerTrace: typeof data['inner-trace'] !== 'undefined' ? data['inner-trace'].map(SimulationTransactionExecTrace.from_obj_for_encoding) : undefined,\n      logicSigHash: data['logic-sig-hash'],\n      logicSigTrace: typeof data['logic-sig-trace'] !== 'undefined' ? data['logic-sig-trace'].map(SimulationOpcodeTraceUnit.from_obj_for_encoding) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Represents a state proof and its corresponding message\r\n */\nexport class StateProof extends BaseModel {\n  /**\r\n   * Creates a new `StateProof` object.\r\n   * @param message - Represents the message that the state proofs are attesting to.\r\n   * @param stateproof - The encoded StateProof for the message.\r\n   */\n  constructor({\n    message,\n    stateproof\n  }) {\n    super();\n    this.message = message;\n    this.stateproof = typeof stateproof === 'string' ? new Uint8Array(Buffer.from(stateproof, 'base64')) : stateproof;\n    this.attribute_map = {\n      message: 'Message',\n      stateproof: 'StateProof'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['Message'] === 'undefined') throw new Error(`Response is missing required field 'Message': ${data}`);\n    if (typeof data['StateProof'] === 'undefined') throw new Error(`Response is missing required field 'StateProof': ${data}`);\n    return new StateProof({\n      message: StateProofMessage.from_obj_for_encoding(data['Message']),\n      stateproof: data['StateProof']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Represents the message that the state proofs are attesting to.\r\n */\nexport class StateProofMessage extends BaseModel {\n  /**\r\n   * Creates a new `StateProofMessage` object.\r\n   * @param blockheaderscommitment - The vector commitment root on all light block headers within a state proof\r\n   * interval.\r\n   * @param firstattestedround - The first round the message attests to.\r\n   * @param lastattestedround - The last round the message attests to.\r\n   * @param lnprovenweight - An integer value representing the natural log of the proven weight with 16 bits\r\n   * of precision. This value would be used to verify the next state proof.\r\n   * @param voterscommitment - The vector commitment root of the top N accounts to sign the next StateProof.\r\n   */\n  constructor({\n    blockheaderscommitment,\n    firstattestedround,\n    lastattestedround,\n    lnprovenweight,\n    voterscommitment\n  }) {\n    super();\n    this.blockheaderscommitment = typeof blockheaderscommitment === 'string' ? new Uint8Array(Buffer.from(blockheaderscommitment, 'base64')) : blockheaderscommitment;\n    this.firstattestedround = firstattestedround;\n    this.lastattestedround = lastattestedround;\n    this.lnprovenweight = lnprovenweight;\n    this.voterscommitment = typeof voterscommitment === 'string' ? new Uint8Array(Buffer.from(voterscommitment, 'base64')) : voterscommitment;\n    this.attribute_map = {\n      blockheaderscommitment: 'BlockHeadersCommitment',\n      firstattestedround: 'FirstAttestedRound',\n      lastattestedround: 'LastAttestedRound',\n      lnprovenweight: 'LnProvenWeight',\n      voterscommitment: 'VotersCommitment'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['BlockHeadersCommitment'] === 'undefined') throw new Error(`Response is missing required field 'BlockHeadersCommitment': ${data}`);\n    if (typeof data['FirstAttestedRound'] === 'undefined') throw new Error(`Response is missing required field 'FirstAttestedRound': ${data}`);\n    if (typeof data['LastAttestedRound'] === 'undefined') throw new Error(`Response is missing required field 'LastAttestedRound': ${data}`);\n    if (typeof data['LnProvenWeight'] === 'undefined') throw new Error(`Response is missing required field 'LnProvenWeight': ${data}`);\n    if (typeof data['VotersCommitment'] === 'undefined') throw new Error(`Response is missing required field 'VotersCommitment': ${data}`);\n    return new StateProofMessage({\n      blockheaderscommitment: data['BlockHeadersCommitment'],\n      firstattestedround: data['FirstAttestedRound'],\n      lastattestedround: data['LastAttestedRound'],\n      lnprovenweight: data['LnProvenWeight'],\n      voterscommitment: data['VotersCommitment']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Supply represents the current supply of MicroAlgos in the system.\r\n */\nexport class SupplyResponse extends BaseModel {\n  /**\r\n   * Creates a new `SupplyResponse` object.\r\n   * @param currentRound - Round\r\n   * @param onlineMoney - OnlineMoney\r\n   * @param totalMoney - TotalMoney\r\n   */\n  constructor({\n    currentRound,\n    onlineMoney,\n    totalMoney\n  }) {\n    super();\n    this.currentRound = currentRound;\n    this.onlineMoney = onlineMoney;\n    this.totalMoney = totalMoney;\n    this.attribute_map = {\n      currentRound: 'current_round',\n      onlineMoney: 'online-money',\n      totalMoney: 'total-money'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['current_round'] === 'undefined') throw new Error(`Response is missing required field 'current_round': ${data}`);\n    if (typeof data['online-money'] === 'undefined') throw new Error(`Response is missing required field 'online-money': ${data}`);\n    if (typeof data['total-money'] === 'undefined') throw new Error(`Response is missing required field 'total-money': ${data}`);\n    return new SupplyResponse({\n      currentRound: data['current_round'],\n      onlineMoney: data['online-money'],\n      totalMoney: data['total-money']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Represents a key-value pair in an application store.\r\n */\nexport class TealKeyValue extends BaseModel {\n  /**\r\n   * Creates a new `TealKeyValue` object.\r\n   * @param key -\r\n   * @param value - Represents a TEAL value.\r\n   */\n  constructor({\n    key,\n    value\n  }) {\n    super();\n    this.key = key;\n    this.value = value;\n    this.attribute_map = {\n      key: 'key',\n      value: 'value'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['key'] === 'undefined') throw new Error(`Response is missing required field 'key': ${data}`);\n    if (typeof data['value'] === 'undefined') throw new Error(`Response is missing required field 'value': ${data}`);\n    return new TealKeyValue({\n      key: data['key'],\n      value: TealValue.from_obj_for_encoding(data['value'])\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Represents a TEAL value.\r\n */\nexport class TealValue extends BaseModel {\n  /**\r\n   * Creates a new `TealValue` object.\r\n   * @param type - (tt) value type. Value `1` refers to **bytes**, value `2` refers to **uint**\r\n   * @param bytes - (tb) bytes value.\r\n   * @param uint - (ui) uint value.\r\n   */\n  constructor({\n    type,\n    bytes,\n    uint\n  }) {\n    super();\n    this.type = type;\n    this.bytes = bytes;\n    this.uint = uint;\n    this.attribute_map = {\n      type: 'type',\n      bytes: 'bytes',\n      uint: 'uint'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['type'] === 'undefined') throw new Error(`Response is missing required field 'type': ${data}`);\n    if (typeof data['bytes'] === 'undefined') throw new Error(`Response is missing required field 'bytes': ${data}`);\n    if (typeof data['uint'] === 'undefined') throw new Error(`Response is missing required field 'uint': ${data}`);\n    return new TealValue({\n      type: data['type'],\n      bytes: data['bytes'],\n      uint: data['uint']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Response containing all ledger state deltas for transaction groups, with their\r\n * associated Ids, in a single round.\r\n */\nexport class TransactionGroupLedgerStateDeltasForRoundResponse extends BaseModel {\n  /**\r\n   * Creates a new `TransactionGroupLedgerStateDeltasForRoundResponse` object.\r\n   * @param deltas -\r\n   */\n  constructor({\n    deltas\n  }) {\n    super();\n    this.deltas = deltas;\n    this.attribute_map = {\n      deltas: 'Deltas'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['Deltas'])) throw new Error(`Response is missing required array field 'Deltas': ${data}`);\n    return new TransactionGroupLedgerStateDeltasForRoundResponse({\n      deltas: data['Deltas'].map(LedgerStateDeltaForTransactionGroup.from_obj_for_encoding)\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * TransactionParams contains the parameters that help a client construct a new\r\n * transaction.\r\n */\nexport class TransactionParametersResponse extends BaseModel {\n  /**\r\n   * Creates a new `TransactionParametersResponse` object.\r\n   * @param consensusVersion - ConsensusVersion indicates the consensus protocol version\r\n   * as of LastRound.\r\n   * @param fee - Fee is the suggested transaction fee\r\n   * Fee is in units of micro-Algos per byte.\r\n   * Fee may fall to zero but transactions must still have a fee of\r\n   * at least MinTxnFee for the current network protocol.\r\n   * @param genesisHash - GenesisHash is the hash of the genesis block.\r\n   * @param genesisId - GenesisID is an ID listed in the genesis block.\r\n   * @param lastRound - LastRound indicates the last round seen\r\n   * @param minFee - The minimum transaction fee (not per byte) required for the\r\n   * txn to validate for the current network protocol.\r\n   */\n  constructor({\n    consensusVersion,\n    fee,\n    genesisHash,\n    genesisId,\n    lastRound,\n    minFee\n  }) {\n    super();\n    this.consensusVersion = consensusVersion;\n    this.fee = fee;\n    this.genesisHash = typeof genesisHash === 'string' ? new Uint8Array(Buffer.from(genesisHash, 'base64')) : genesisHash;\n    this.genesisId = genesisId;\n    this.lastRound = lastRound;\n    this.minFee = minFee;\n    this.attribute_map = {\n      consensusVersion: 'consensus-version',\n      fee: 'fee',\n      genesisHash: 'genesis-hash',\n      genesisId: 'genesis-id',\n      lastRound: 'last-round',\n      minFee: 'min-fee'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['consensus-version'] === 'undefined') throw new Error(`Response is missing required field 'consensus-version': ${data}`);\n    if (typeof data['fee'] === 'undefined') throw new Error(`Response is missing required field 'fee': ${data}`);\n    if (typeof data['genesis-hash'] === 'undefined') throw new Error(`Response is missing required field 'genesis-hash': ${data}`);\n    if (typeof data['genesis-id'] === 'undefined') throw new Error(`Response is missing required field 'genesis-id': ${data}`);\n    if (typeof data['last-round'] === 'undefined') throw new Error(`Response is missing required field 'last-round': ${data}`);\n    if (typeof data['min-fee'] === 'undefined') throw new Error(`Response is missing required field 'min-fee': ${data}`);\n    return new TransactionParametersResponse({\n      consensusVersion: data['consensus-version'],\n      fee: data['fee'],\n      genesisHash: data['genesis-hash'],\n      genesisId: data['genesis-id'],\n      lastRound: data['last-round'],\n      minFee: data['min-fee']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Proof of transaction in a block.\r\n */\nexport class TransactionProofResponse extends BaseModel {\n  /**\r\n   * Creates a new `TransactionProofResponse` object.\r\n   * @param idx - Index of the transaction in the block's payset.\r\n   * @param proof - Proof of transaction membership.\r\n   * @param stibhash - Hash of SignedTxnInBlock for verifying proof.\r\n   * @param treedepth - Represents the depth of the tree that is being proven, i.e. the number of edges\r\n   * from a leaf to the root.\r\n   * @param hashtype - The type of hash function used to create the proof, must be one of:\r\n   * * sha512_256\r\n   * * sha256\r\n   */\n  constructor({\n    idx,\n    proof,\n    stibhash,\n    treedepth,\n    hashtype\n  }) {\n    super();\n    this.idx = idx;\n    this.proof = typeof proof === 'string' ? new Uint8Array(Buffer.from(proof, 'base64')) : proof;\n    this.stibhash = typeof stibhash === 'string' ? new Uint8Array(Buffer.from(stibhash, 'base64')) : stibhash;\n    this.treedepth = treedepth;\n    this.hashtype = hashtype;\n    this.attribute_map = {\n      idx: 'idx',\n      proof: 'proof',\n      stibhash: 'stibhash',\n      treedepth: 'treedepth',\n      hashtype: 'hashtype'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['idx'] === 'undefined') throw new Error(`Response is missing required field 'idx': ${data}`);\n    if (typeof data['proof'] === 'undefined') throw new Error(`Response is missing required field 'proof': ${data}`);\n    if (typeof data['stibhash'] === 'undefined') throw new Error(`Response is missing required field 'stibhash': ${data}`);\n    if (typeof data['treedepth'] === 'undefined') throw new Error(`Response is missing required field 'treedepth': ${data}`);\n    return new TransactionProofResponse({\n      idx: data['idx'],\n      proof: data['proof'],\n      stibhash: data['stibhash'],\n      treedepth: data['treedepth'],\n      hashtype: data['hashtype']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * algod version information.\r\n */\nexport class Version extends BaseModel {\n  /**\r\n   * Creates a new `Version` object.\r\n   * @param build -\r\n   * @param genesisHashB64 -\r\n   * @param genesisId -\r\n   * @param versions -\r\n   */\n  constructor({\n    build,\n    genesisHashB64,\n    genesisId,\n    versions\n  }) {\n    super();\n    this.build = build;\n    this.genesisHashB64 = typeof genesisHashB64 === 'string' ? new Uint8Array(Buffer.from(genesisHashB64, 'base64')) : genesisHashB64;\n    this.genesisId = genesisId;\n    this.versions = versions;\n    this.attribute_map = {\n      build: 'build',\n      genesisHashB64: 'genesis_hash_b64',\n      genesisId: 'genesis_id',\n      versions: 'versions'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['build'] === 'undefined') throw new Error(`Response is missing required field 'build': ${data}`);\n    if (typeof data['genesis_hash_b64'] === 'undefined') throw new Error(`Response is missing required field 'genesis_hash_b64': ${data}`);\n    if (typeof data['genesis_id'] === 'undefined') throw new Error(`Response is missing required field 'genesis_id': ${data}`);\n    if (!Array.isArray(data['versions'])) throw new Error(`Response is missing required array field 'versions': ${data}`);\n    return new Version({\n      build: BuildVersion.from_obj_for_encoding(data['build']),\n      genesisHashB64: data['genesis_hash_b64'],\n      genesisId: data['genesis_id'],\n      versions: data['versions']\n    });\n    /* eslint-enable dot-notation */\n  }\n}","map":{"version":3,"names":["Buffer","BaseModel","Account","constructor","address","amount","amountWithoutPendingRewards","minBalance","pendingRewards","rewards","round","status","totalAppsOptedIn","totalAssetsOptedIn","totalCreatedApps","totalCreatedAssets","appsLocalState","appsTotalExtraPages","appsTotalSchema","assets","authAddr","createdApps","createdAssets","incentiveEligible","lastHeartbeat","lastProposed","participation","rewardBase","sigType","totalBoxBytes","totalBoxes","attribute_map","from_obj_for_encoding","data","Error","map","ApplicationLocalState","undefined","ApplicationStateSchema","AssetHolding","Application","Asset","AccountParticipation","AccountApplicationResponse","appLocalState","createdApp","ApplicationParams","AccountAssetHolding","assetHolding","assetParams","AssetParams","AccountAssetResponse","createdAsset","AccountAssetsInformationResponse","assetHoldings","nextToken","selectionParticipationKey","voteFirstValid","voteKeyDilution","voteLastValid","voteParticipationKey","stateProofKey","Uint8Array","from","AccountStateDelta","delta","Array","isArray","EvalDeltaKeyValue","AppCallLogs","applicationIndex","logs","txid","id","params","ApplicationInitialStates","appBoxes","appGlobals","appLocals","ApplicationKVStorage","kvs","account","AvmKeyValue","ApplicationLocalReference","app","schema","keyValue","TealKeyValue","approvalProgram","clearStateProgram","creator","extraProgramPages","globalState","globalStateSchema","localStateSchema","ApplicationStateOperation","appStateType","key","operation","newValue","AvmValue","numUint","numByteSlice","index","assetId","isFrozen","AssetHoldingReference","asset","decimals","total","clawback","defaultFrozen","freeze","manager","metadataHash","name","nameB64","reserve","unitName","unitNameB64","url","urlB64","value","type","bytes","uint","BlockHashResponse","blockhash","BlockLogsResponse","BlockResponse","block","cert","BlockTxidsResponse","blocktxids","Box","BoxDescriptor","BoxReference","BoxesResponse","boxes","BuildVersion","branch","buildNumber","channel","commitHash","major","minor","CompileResponse","hash","result","sourcemap","DisassembleResponse","DryrunRequest","accounts","apps","latestTimestamp","protocolVersion","sources","txns","DryrunSource","DryrunResponse","error","DryrunTxnResult","fieldName","source","txnIndex","appIndex","DryrunState","line","pc","stack","scratch","TealValue","disassembly","appCallMessages","appCallTrace","budgetAdded","budgetConsumed","globalDelta","localDeltas","logicSigDisassembly","logicSigMessages","logicSigTrace","ErrorResponse","message","EvalDelta","action","GetBlockTimeStampOffsetResponse","offset","GetSyncRoundResponse","KvDelta","LedgerStateDeltaForTransactionGroup","ids","LightBlockHeaderProof","proof","treedepth","NodeStatusResponse","catchupTime","lastRound","lastVersion","nextVersion","nextVersionRound","nextVersionSupported","stoppedAtUnsupportedRound","timeSinceLastRound","catchpoint","catchpointAcquiredBlocks","catchpointProcessedAccounts","catchpointProcessedKvs","catchpointTotalAccounts","catchpointTotalBlocks","catchpointTotalKvs","catchpointVerifiedAccounts","catchpointVerifiedKvs","lastCatchpoint","upgradeDelay","upgradeNextProtocolVoteBefore","upgradeNoVotes","upgradeNodeVote","upgradeVoteRounds","upgradeVotes","upgradeVotesRequired","upgradeYesVotes","PendingTransactionResponse","poolError","txn","assetClosingAmount","assetIndex","closeRewards","closingAmount","confirmedRound","globalStateDelta","innerTxns","localStateDelta","receiverRewards","senderRewards","PendingTransactionsResponse","topTransactions","totalTransactions","PostTransactionsResponse","ScratchChange","slot","SimulateInitialStates","appInitialStates","SimulateRequest","txnGroups","allowEmptySignatures","allowMoreLogging","allowUnnamedResources","execTraceConfig","extraOpcodeBudget","fixSigners","SimulateRequestTransactionGroup","SimulateTraceConfig","SimulateResponse","version","evalOverrides","initialStates","SimulateTransactionGroupResult","SimulationEvalOverrides","enable","scratchChange","stackChange","stateChange","txnResults","appBudgetAdded","appBudgetConsumed","failedAt","failureMessage","unnamedResourcesAccessed","SimulateTransactionResult","SimulateUnnamedResourcesAccessed","txnResult","execTrace","fixedSigner","logicSigBudgetConsumed","SimulationTransactionExecTrace","extraBoxRefs","maxLogCalls","maxLogSize","SimulationOpcodeTraceUnit","scratchChanges","spawnedInners","stackAdditions","stackPopCount","stateChanges","approvalProgramHash","approvalProgramTrace","clearStateProgramHash","clearStateProgramTrace","clearStateRollback","clearStateRollbackError","innerTrace","logicSigHash","StateProof","stateproof","StateProofMessage","blockheaderscommitment","firstattestedround","lastattestedround","lnprovenweight","voterscommitment","SupplyResponse","currentRound","onlineMoney","totalMoney","TransactionGroupLedgerStateDeltasForRoundResponse","deltas","TransactionParametersResponse","consensusVersion","fee","genesisHash","genesisId","minFee","TransactionProofResponse","idx","stibhash","hashtype","Version","build","genesisHashB64","versions"],"sources":["C:\\Users\\Aditya singh\\AlgoEase\\frontend\\node_modules\\algosdk\\src\\client\\v2\\algod\\models\\types.ts"],"sourcesContent":["/**\r\n * NOTICE: This file was generated. Editing this file manually is not recommended.\r\n */\r\n\r\n/* eslint-disable no-use-before-define */\r\nimport { Buffer } from 'buffer';\r\nimport BaseModel from '../../basemodel';\r\nimport { EncodedSignedTransaction } from '../../../../types/transactions/encoded';\r\nimport BlockHeader from '../../../../types/blockHeader';\r\n\r\n/**\r\n * Account information at a given round.\r\n * Definition:\r\n * data/basics/userBalance.go : AccountData\r\n */\r\nexport class Account extends BaseModel {\r\n  /**\r\n   * the account public key\r\n   */\r\n  public address: string;\r\n\r\n  /**\r\n   * (algo) total number of MicroAlgos in the account\r\n   */\r\n  public amount: number | bigint;\r\n\r\n  /**\r\n   * specifies the amount of MicroAlgos in the account, without the pending rewards.\r\n   */\r\n  public amountWithoutPendingRewards: number | bigint;\r\n\r\n  /**\r\n   * MicroAlgo balance required by the account.\r\n   * The requirement grows based on asset and application usage.\r\n   */\r\n  public minBalance: number | bigint;\r\n\r\n  /**\r\n   * amount of MicroAlgos of pending rewards in this account.\r\n   */\r\n  public pendingRewards: number | bigint;\r\n\r\n  /**\r\n   * (ern) total rewards of MicroAlgos the account has received, including pending\r\n   * rewards.\r\n   */\r\n  public rewards: number | bigint;\r\n\r\n  /**\r\n   * The round for which this information is relevant.\r\n   */\r\n  public round: number | bigint;\r\n\r\n  /**\r\n   * (onl) delegation status of the account's MicroAlgos\r\n   * * Offline - indicates that the associated account is delegated.\r\n   * * Online - indicates that the associated account used as part of the delegation\r\n   * pool.\r\n   * * NotParticipating - indicates that the associated account is neither a\r\n   * delegator nor a delegate.\r\n   */\r\n  public status: string;\r\n\r\n  /**\r\n   * The count of all applications that have been opted in, equivalent to the count\r\n   * of application local data (AppLocalState objects) stored in this account.\r\n   */\r\n  public totalAppsOptedIn: number | bigint;\r\n\r\n  /**\r\n   * The count of all assets that have been opted in, equivalent to the count of\r\n   * AssetHolding objects held by this account.\r\n   */\r\n  public totalAssetsOptedIn: number | bigint;\r\n\r\n  /**\r\n   * The count of all apps (AppParams objects) created by this account.\r\n   */\r\n  public totalCreatedApps: number | bigint;\r\n\r\n  /**\r\n   * The count of all assets (AssetParams objects) created by this account.\r\n   */\r\n  public totalCreatedAssets: number | bigint;\r\n\r\n  /**\r\n   * (appl) applications local data stored in this account.\r\n   * Note the raw object uses `map[int] -> AppLocalState` for this type.\r\n   */\r\n  public appsLocalState?: ApplicationLocalState[];\r\n\r\n  /**\r\n   * (teap) the sum of all extra application program pages for this account.\r\n   */\r\n  public appsTotalExtraPages?: number | bigint;\r\n\r\n  /**\r\n   * (tsch) stores the sum of all of the local schemas and global schemas in this\r\n   * account.\r\n   * Note: the raw account uses `StateSchema` for this type.\r\n   */\r\n  public appsTotalSchema?: ApplicationStateSchema;\r\n\r\n  /**\r\n   * (asset) assets held by this account.\r\n   * Note the raw object uses `map[int] -> AssetHolding` for this type.\r\n   */\r\n  public assets?: AssetHolding[];\r\n\r\n  /**\r\n   * (spend) the address against which signing should be checked. If empty, the\r\n   * address of the current account is used. This field can be updated in any\r\n   * transaction by setting the RekeyTo field.\r\n   */\r\n  public authAddr?: string;\r\n\r\n  /**\r\n   * (appp) parameters of applications created by this account including app global\r\n   * data.\r\n   * Note: the raw account uses `map[int] -> AppParams` for this type.\r\n   */\r\n  public createdApps?: Application[];\r\n\r\n  /**\r\n   * (apar) parameters of assets created by this account.\r\n   * Note: the raw account uses `map[int] -> Asset` for this type.\r\n   */\r\n  public createdAssets?: Asset[];\r\n\r\n  /**\r\n   * Whether or not the account can receive block incentives if its balance is in\r\n   * range at proposal time.\r\n   */\r\n  public incentiveEligible?: boolean;\r\n\r\n  /**\r\n   * The round in which this account last went online, or explicitly renewed their\r\n   * online status.\r\n   */\r\n  public lastHeartbeat?: number | bigint;\r\n\r\n  /**\r\n   * The round in which this account last proposed the block.\r\n   */\r\n  public lastProposed?: number | bigint;\r\n\r\n  /**\r\n   * AccountParticipation describes the parameters used by this account in consensus\r\n   * protocol.\r\n   */\r\n  public participation?: AccountParticipation;\r\n\r\n  /**\r\n   * (ebase) used as part of the rewards computation. Only applicable to accounts\r\n   * which are participating.\r\n   */\r\n  public rewardBase?: number | bigint;\r\n\r\n  /**\r\n   * Indicates what type of signature is used by this account, must be one of:\r\n   * * sig\r\n   * * msig\r\n   * * lsig\r\n   */\r\n  public sigType?: string;\r\n\r\n  /**\r\n   * (tbxb) The total number of bytes used by this account's app's box keys and\r\n   * values.\r\n   */\r\n  public totalBoxBytes?: number | bigint;\r\n\r\n  /**\r\n   * (tbx) The number of existing boxes created by this account's app.\r\n   */\r\n  public totalBoxes?: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `Account` object.\r\n   * @param address - the account public key\r\n   * @param amount - (algo) total number of MicroAlgos in the account\r\n   * @param amountWithoutPendingRewards - specifies the amount of MicroAlgos in the account, without the pending rewards.\r\n   * @param minBalance - MicroAlgo balance required by the account.\r\n   * The requirement grows based on asset and application usage.\r\n   * @param pendingRewards - amount of MicroAlgos of pending rewards in this account.\r\n   * @param rewards - (ern) total rewards of MicroAlgos the account has received, including pending\r\n   * rewards.\r\n   * @param round - The round for which this information is relevant.\r\n   * @param status - (onl) delegation status of the account's MicroAlgos\r\n   * * Offline - indicates that the associated account is delegated.\r\n   * * Online - indicates that the associated account used as part of the delegation\r\n   * pool.\r\n   * * NotParticipating - indicates that the associated account is neither a\r\n   * delegator nor a delegate.\r\n   * @param totalAppsOptedIn - The count of all applications that have been opted in, equivalent to the count\r\n   * of application local data (AppLocalState objects) stored in this account.\r\n   * @param totalAssetsOptedIn - The count of all assets that have been opted in, equivalent to the count of\r\n   * AssetHolding objects held by this account.\r\n   * @param totalCreatedApps - The count of all apps (AppParams objects) created by this account.\r\n   * @param totalCreatedAssets - The count of all assets (AssetParams objects) created by this account.\r\n   * @param appsLocalState - (appl) applications local data stored in this account.\r\n   * Note the raw object uses `map[int] -> AppLocalState` for this type.\r\n   * @param appsTotalExtraPages - (teap) the sum of all extra application program pages for this account.\r\n   * @param appsTotalSchema - (tsch) stores the sum of all of the local schemas and global schemas in this\r\n   * account.\r\n   * Note: the raw account uses `StateSchema` for this type.\r\n   * @param assets - (asset) assets held by this account.\r\n   * Note the raw object uses `map[int] -> AssetHolding` for this type.\r\n   * @param authAddr - (spend) the address against which signing should be checked. If empty, the\r\n   * address of the current account is used. This field can be updated in any\r\n   * transaction by setting the RekeyTo field.\r\n   * @param createdApps - (appp) parameters of applications created by this account including app global\r\n   * data.\r\n   * Note: the raw account uses `map[int] -> AppParams` for this type.\r\n   * @param createdAssets - (apar) parameters of assets created by this account.\r\n   * Note: the raw account uses `map[int] -> Asset` for this type.\r\n   * @param incentiveEligible - Whether or not the account can receive block incentives if its balance is in\r\n   * range at proposal time.\r\n   * @param lastHeartbeat - The round in which this account last went online, or explicitly renewed their\r\n   * online status.\r\n   * @param lastProposed - The round in which this account last proposed the block.\r\n   * @param participation - AccountParticipation describes the parameters used by this account in consensus\r\n   * protocol.\r\n   * @param rewardBase - (ebase) used as part of the rewards computation. Only applicable to accounts\r\n   * which are participating.\r\n   * @param sigType - Indicates what type of signature is used by this account, must be one of:\r\n   * * sig\r\n   * * msig\r\n   * * lsig\r\n   * @param totalBoxBytes - (tbxb) The total number of bytes used by this account's app's box keys and\r\n   * values.\r\n   * @param totalBoxes - (tbx) The number of existing boxes created by this account's app.\r\n   */\r\n  constructor({\r\n    address,\r\n    amount,\r\n    amountWithoutPendingRewards,\r\n    minBalance,\r\n    pendingRewards,\r\n    rewards,\r\n    round,\r\n    status,\r\n    totalAppsOptedIn,\r\n    totalAssetsOptedIn,\r\n    totalCreatedApps,\r\n    totalCreatedAssets,\r\n    appsLocalState,\r\n    appsTotalExtraPages,\r\n    appsTotalSchema,\r\n    assets,\r\n    authAddr,\r\n    createdApps,\r\n    createdAssets,\r\n    incentiveEligible,\r\n    lastHeartbeat,\r\n    lastProposed,\r\n    participation,\r\n    rewardBase,\r\n    sigType,\r\n    totalBoxBytes,\r\n    totalBoxes,\r\n  }: {\r\n    address: string;\r\n    amount: number | bigint;\r\n    amountWithoutPendingRewards: number | bigint;\r\n    minBalance: number | bigint;\r\n    pendingRewards: number | bigint;\r\n    rewards: number | bigint;\r\n    round: number | bigint;\r\n    status: string;\r\n    totalAppsOptedIn: number | bigint;\r\n    totalAssetsOptedIn: number | bigint;\r\n    totalCreatedApps: number | bigint;\r\n    totalCreatedAssets: number | bigint;\r\n    appsLocalState?: ApplicationLocalState[];\r\n    appsTotalExtraPages?: number | bigint;\r\n    appsTotalSchema?: ApplicationStateSchema;\r\n    assets?: AssetHolding[];\r\n    authAddr?: string;\r\n    createdApps?: Application[];\r\n    createdAssets?: Asset[];\r\n    incentiveEligible?: boolean;\r\n    lastHeartbeat?: number | bigint;\r\n    lastProposed?: number | bigint;\r\n    participation?: AccountParticipation;\r\n    rewardBase?: number | bigint;\r\n    sigType?: string;\r\n    totalBoxBytes?: number | bigint;\r\n    totalBoxes?: number | bigint;\r\n  }) {\r\n    super();\r\n    this.address = address;\r\n    this.amount = amount;\r\n    this.amountWithoutPendingRewards = amountWithoutPendingRewards;\r\n    this.minBalance = minBalance;\r\n    this.pendingRewards = pendingRewards;\r\n    this.rewards = rewards;\r\n    this.round = round;\r\n    this.status = status;\r\n    this.totalAppsOptedIn = totalAppsOptedIn;\r\n    this.totalAssetsOptedIn = totalAssetsOptedIn;\r\n    this.totalCreatedApps = totalCreatedApps;\r\n    this.totalCreatedAssets = totalCreatedAssets;\r\n    this.appsLocalState = appsLocalState;\r\n    this.appsTotalExtraPages = appsTotalExtraPages;\r\n    this.appsTotalSchema = appsTotalSchema;\r\n    this.assets = assets;\r\n    this.authAddr = authAddr;\r\n    this.createdApps = createdApps;\r\n    this.createdAssets = createdAssets;\r\n    this.incentiveEligible = incentiveEligible;\r\n    this.lastHeartbeat = lastHeartbeat;\r\n    this.lastProposed = lastProposed;\r\n    this.participation = participation;\r\n    this.rewardBase = rewardBase;\r\n    this.sigType = sigType;\r\n    this.totalBoxBytes = totalBoxBytes;\r\n    this.totalBoxes = totalBoxes;\r\n\r\n    this.attribute_map = {\r\n      address: 'address',\r\n      amount: 'amount',\r\n      amountWithoutPendingRewards: 'amount-without-pending-rewards',\r\n      minBalance: 'min-balance',\r\n      pendingRewards: 'pending-rewards',\r\n      rewards: 'rewards',\r\n      round: 'round',\r\n      status: 'status',\r\n      totalAppsOptedIn: 'total-apps-opted-in',\r\n      totalAssetsOptedIn: 'total-assets-opted-in',\r\n      totalCreatedApps: 'total-created-apps',\r\n      totalCreatedAssets: 'total-created-assets',\r\n      appsLocalState: 'apps-local-state',\r\n      appsTotalExtraPages: 'apps-total-extra-pages',\r\n      appsTotalSchema: 'apps-total-schema',\r\n      assets: 'assets',\r\n      authAddr: 'auth-addr',\r\n      createdApps: 'created-apps',\r\n      createdAssets: 'created-assets',\r\n      incentiveEligible: 'incentive-eligible',\r\n      lastHeartbeat: 'last-heartbeat',\r\n      lastProposed: 'last-proposed',\r\n      participation: 'participation',\r\n      rewardBase: 'reward-base',\r\n      sigType: 'sig-type',\r\n      totalBoxBytes: 'total-box-bytes',\r\n      totalBoxes: 'total-boxes',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): Account {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['address'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'address': ${data}`);\r\n    if (typeof data['amount'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'amount': ${data}`);\r\n    if (typeof data['amount-without-pending-rewards'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'amount-without-pending-rewards': ${data}`\r\n      );\r\n    if (typeof data['min-balance'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'min-balance': ${data}`\r\n      );\r\n    if (typeof data['pending-rewards'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'pending-rewards': ${data}`\r\n      );\r\n    if (typeof data['rewards'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'rewards': ${data}`);\r\n    if (typeof data['round'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'round': ${data}`);\r\n    if (typeof data['status'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'status': ${data}`);\r\n    if (typeof data['total-apps-opted-in'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'total-apps-opted-in': ${data}`\r\n      );\r\n    if (typeof data['total-assets-opted-in'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'total-assets-opted-in': ${data}`\r\n      );\r\n    if (typeof data['total-created-apps'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'total-created-apps': ${data}`\r\n      );\r\n    if (typeof data['total-created-assets'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'total-created-assets': ${data}`\r\n      );\r\n    return new Account({\r\n      address: data['address'],\r\n      amount: data['amount'],\r\n      amountWithoutPendingRewards: data['amount-without-pending-rewards'],\r\n      minBalance: data['min-balance'],\r\n      pendingRewards: data['pending-rewards'],\r\n      rewards: data['rewards'],\r\n      round: data['round'],\r\n      status: data['status'],\r\n      totalAppsOptedIn: data['total-apps-opted-in'],\r\n      totalAssetsOptedIn: data['total-assets-opted-in'],\r\n      totalCreatedApps: data['total-created-apps'],\r\n      totalCreatedAssets: data['total-created-assets'],\r\n      appsLocalState:\r\n        typeof data['apps-local-state'] !== 'undefined'\r\n          ? data['apps-local-state'].map(\r\n              ApplicationLocalState.from_obj_for_encoding\r\n            )\r\n          : undefined,\r\n      appsTotalExtraPages: data['apps-total-extra-pages'],\r\n      appsTotalSchema:\r\n        typeof data['apps-total-schema'] !== 'undefined'\r\n          ? ApplicationStateSchema.from_obj_for_encoding(\r\n              data['apps-total-schema']\r\n            )\r\n          : undefined,\r\n      assets:\r\n        typeof data['assets'] !== 'undefined'\r\n          ? data['assets'].map(AssetHolding.from_obj_for_encoding)\r\n          : undefined,\r\n      authAddr: data['auth-addr'],\r\n      createdApps:\r\n        typeof data['created-apps'] !== 'undefined'\r\n          ? data['created-apps'].map(Application.from_obj_for_encoding)\r\n          : undefined,\r\n      createdAssets:\r\n        typeof data['created-assets'] !== 'undefined'\r\n          ? data['created-assets'].map(Asset.from_obj_for_encoding)\r\n          : undefined,\r\n      incentiveEligible: data['incentive-eligible'],\r\n      lastHeartbeat: data['last-heartbeat'],\r\n      lastProposed: data['last-proposed'],\r\n      participation:\r\n        typeof data['participation'] !== 'undefined'\r\n          ? AccountParticipation.from_obj_for_encoding(data['participation'])\r\n          : undefined,\r\n      rewardBase: data['reward-base'],\r\n      sigType: data['sig-type'],\r\n      totalBoxBytes: data['total-box-bytes'],\r\n      totalBoxes: data['total-boxes'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * AccountApplicationResponse describes the account's application local state and\r\n * global state (AppLocalState and AppParams, if either exists) for a specific\r\n * application ID. Global state will only be returned if the provided address is\r\n * the application's creator.\r\n */\r\nexport class AccountApplicationResponse extends BaseModel {\r\n  /**\r\n   * The round for which this information is relevant.\r\n   */\r\n  public round: number | bigint;\r\n\r\n  /**\r\n   * (appl) the application local data stored in this account.\r\n   * The raw account uses `AppLocalState` for this type.\r\n   */\r\n  public appLocalState?: ApplicationLocalState;\r\n\r\n  /**\r\n   * (appp) parameters of the application created by this account including app\r\n   * global data.\r\n   * The raw account uses `AppParams` for this type.\r\n   */\r\n  public createdApp?: ApplicationParams;\r\n\r\n  /**\r\n   * Creates a new `AccountApplicationResponse` object.\r\n   * @param round - The round for which this information is relevant.\r\n   * @param appLocalState - (appl) the application local data stored in this account.\r\n   * The raw account uses `AppLocalState` for this type.\r\n   * @param createdApp - (appp) parameters of the application created by this account including app\r\n   * global data.\r\n   * The raw account uses `AppParams` for this type.\r\n   */\r\n  constructor({\r\n    round,\r\n    appLocalState,\r\n    createdApp,\r\n  }: {\r\n    round: number | bigint;\r\n    appLocalState?: ApplicationLocalState;\r\n    createdApp?: ApplicationParams;\r\n  }) {\r\n    super();\r\n    this.round = round;\r\n    this.appLocalState = appLocalState;\r\n    this.createdApp = createdApp;\r\n\r\n    this.attribute_map = {\r\n      round: 'round',\r\n      appLocalState: 'app-local-state',\r\n      createdApp: 'created-app',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): AccountApplicationResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['round'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'round': ${data}`);\r\n    return new AccountApplicationResponse({\r\n      round: data['round'],\r\n      appLocalState:\r\n        typeof data['app-local-state'] !== 'undefined'\r\n          ? ApplicationLocalState.from_obj_for_encoding(data['app-local-state'])\r\n          : undefined,\r\n      createdApp:\r\n        typeof data['created-app'] !== 'undefined'\r\n          ? ApplicationParams.from_obj_for_encoding(data['created-app'])\r\n          : undefined,\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * AccountAssetHolding describes the account's asset holding and asset parameters\r\n * (if either exist) for a specific asset ID.\r\n */\r\nexport class AccountAssetHolding extends BaseModel {\r\n  /**\r\n   * (asset) Details about the asset held by this account.\r\n   * The raw account uses `AssetHolding` for this type.\r\n   */\r\n  public assetHolding: AssetHolding;\r\n\r\n  /**\r\n   * (apar) parameters of the asset held by this account.\r\n   * The raw account uses `AssetParams` for this type.\r\n   */\r\n  public assetParams?: AssetParams;\r\n\r\n  /**\r\n   * Creates a new `AccountAssetHolding` object.\r\n   * @param assetHolding - (asset) Details about the asset held by this account.\r\n   * The raw account uses `AssetHolding` for this type.\r\n   * @param assetParams - (apar) parameters of the asset held by this account.\r\n   * The raw account uses `AssetParams` for this type.\r\n   */\r\n  constructor({\r\n    assetHolding,\r\n    assetParams,\r\n  }: {\r\n    assetHolding: AssetHolding;\r\n    assetParams?: AssetParams;\r\n  }) {\r\n    super();\r\n    this.assetHolding = assetHolding;\r\n    this.assetParams = assetParams;\r\n\r\n    this.attribute_map = {\r\n      assetHolding: 'asset-holding',\r\n      assetParams: 'asset-params',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): AccountAssetHolding {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['asset-holding'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'asset-holding': ${data}`\r\n      );\r\n    return new AccountAssetHolding({\r\n      assetHolding: AssetHolding.from_obj_for_encoding(data['asset-holding']),\r\n      assetParams:\r\n        typeof data['asset-params'] !== 'undefined'\r\n          ? AssetParams.from_obj_for_encoding(data['asset-params'])\r\n          : undefined,\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * AccountAssetResponse describes the account's asset holding and asset parameters\r\n * (if either exist) for a specific asset ID. Asset parameters will only be\r\n * returned if the provided address is the asset's creator.\r\n */\r\nexport class AccountAssetResponse extends BaseModel {\r\n  /**\r\n   * The round for which this information is relevant.\r\n   */\r\n  public round: number | bigint;\r\n\r\n  /**\r\n   * (asset) Details about the asset held by this account.\r\n   * The raw account uses `AssetHolding` for this type.\r\n   */\r\n  public assetHolding?: AssetHolding;\r\n\r\n  /**\r\n   * (apar) parameters of the asset created by this account.\r\n   * The raw account uses `AssetParams` for this type.\r\n   */\r\n  public createdAsset?: AssetParams;\r\n\r\n  /**\r\n   * Creates a new `AccountAssetResponse` object.\r\n   * @param round - The round for which this information is relevant.\r\n   * @param assetHolding - (asset) Details about the asset held by this account.\r\n   * The raw account uses `AssetHolding` for this type.\r\n   * @param createdAsset - (apar) parameters of the asset created by this account.\r\n   * The raw account uses `AssetParams` for this type.\r\n   */\r\n  constructor({\r\n    round,\r\n    assetHolding,\r\n    createdAsset,\r\n  }: {\r\n    round: number | bigint;\r\n    assetHolding?: AssetHolding;\r\n    createdAsset?: AssetParams;\r\n  }) {\r\n    super();\r\n    this.round = round;\r\n    this.assetHolding = assetHolding;\r\n    this.createdAsset = createdAsset;\r\n\r\n    this.attribute_map = {\r\n      round: 'round',\r\n      assetHolding: 'asset-holding',\r\n      createdAsset: 'created-asset',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): AccountAssetResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['round'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'round': ${data}`);\r\n    return new AccountAssetResponse({\r\n      round: data['round'],\r\n      assetHolding:\r\n        typeof data['asset-holding'] !== 'undefined'\r\n          ? AssetHolding.from_obj_for_encoding(data['asset-holding'])\r\n          : undefined,\r\n      createdAsset:\r\n        typeof data['created-asset'] !== 'undefined'\r\n          ? AssetParams.from_obj_for_encoding(data['created-asset'])\r\n          : undefined,\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * AccountAssetsInformationResponse contains a list of assets held by an account.\r\n */\r\nexport class AccountAssetsInformationResponse extends BaseModel {\r\n  /**\r\n   * The round for which this information is relevant.\r\n   */\r\n  public round: number | bigint;\r\n\r\n  public assetHoldings?: AccountAssetHolding[];\r\n\r\n  /**\r\n   * Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\r\n  public nextToken?: string;\r\n\r\n  /**\r\n   * Creates a new `AccountAssetsInformationResponse` object.\r\n   * @param round - The round for which this information is relevant.\r\n   * @param assetHoldings -\r\n   * @param nextToken - Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\r\n  constructor({\r\n    round,\r\n    assetHoldings,\r\n    nextToken,\r\n  }: {\r\n    round: number | bigint;\r\n    assetHoldings?: AccountAssetHolding[];\r\n    nextToken?: string;\r\n  }) {\r\n    super();\r\n    this.round = round;\r\n    this.assetHoldings = assetHoldings;\r\n    this.nextToken = nextToken;\r\n\r\n    this.attribute_map = {\r\n      round: 'round',\r\n      assetHoldings: 'asset-holdings',\r\n      nextToken: 'next-token',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): AccountAssetsInformationResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['round'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'round': ${data}`);\r\n    return new AccountAssetsInformationResponse({\r\n      round: data['round'],\r\n      assetHoldings:\r\n        typeof data['asset-holdings'] !== 'undefined'\r\n          ? data['asset-holdings'].map(\r\n              AccountAssetHolding.from_obj_for_encoding\r\n            )\r\n          : undefined,\r\n      nextToken: data['next-token'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * AccountParticipation describes the parameters used by this account in consensus\r\n * protocol.\r\n */\r\nexport class AccountParticipation extends BaseModel {\r\n  /**\r\n   * (sel) Selection public key (if any) currently registered for this round.\r\n   */\r\n  public selectionParticipationKey: Uint8Array;\r\n\r\n  /**\r\n   * (voteFst) First round for which this participation is valid.\r\n   */\r\n  public voteFirstValid: number | bigint;\r\n\r\n  /**\r\n   * (voteKD) Number of subkeys in each batch of participation keys.\r\n   */\r\n  public voteKeyDilution: number | bigint;\r\n\r\n  /**\r\n   * (voteLst) Last round for which this participation is valid.\r\n   */\r\n  public voteLastValid: number | bigint;\r\n\r\n  /**\r\n   * (vote) root participation public key (if any) currently registered for this\r\n   * round.\r\n   */\r\n  public voteParticipationKey: Uint8Array;\r\n\r\n  /**\r\n   * (stprf) Root of the state proof key (if any)\r\n   */\r\n  public stateProofKey?: Uint8Array;\r\n\r\n  /**\r\n   * Creates a new `AccountParticipation` object.\r\n   * @param selectionParticipationKey - (sel) Selection public key (if any) currently registered for this round.\r\n   * @param voteFirstValid - (voteFst) First round for which this participation is valid.\r\n   * @param voteKeyDilution - (voteKD) Number of subkeys in each batch of participation keys.\r\n   * @param voteLastValid - (voteLst) Last round for which this participation is valid.\r\n   * @param voteParticipationKey - (vote) root participation public key (if any) currently registered for this\r\n   * round.\r\n   * @param stateProofKey - (stprf) Root of the state proof key (if any)\r\n   */\r\n  constructor({\r\n    selectionParticipationKey,\r\n    voteFirstValid,\r\n    voteKeyDilution,\r\n    voteLastValid,\r\n    voteParticipationKey,\r\n    stateProofKey,\r\n  }: {\r\n    selectionParticipationKey: string | Uint8Array;\r\n    voteFirstValid: number | bigint;\r\n    voteKeyDilution: number | bigint;\r\n    voteLastValid: number | bigint;\r\n    voteParticipationKey: string | Uint8Array;\r\n    stateProofKey?: string | Uint8Array;\r\n  }) {\r\n    super();\r\n    this.selectionParticipationKey =\r\n      typeof selectionParticipationKey === 'string'\r\n        ? new Uint8Array(Buffer.from(selectionParticipationKey, 'base64'))\r\n        : selectionParticipationKey;\r\n    this.voteFirstValid = voteFirstValid;\r\n    this.voteKeyDilution = voteKeyDilution;\r\n    this.voteLastValid = voteLastValid;\r\n    this.voteParticipationKey =\r\n      typeof voteParticipationKey === 'string'\r\n        ? new Uint8Array(Buffer.from(voteParticipationKey, 'base64'))\r\n        : voteParticipationKey;\r\n    this.stateProofKey =\r\n      typeof stateProofKey === 'string'\r\n        ? new Uint8Array(Buffer.from(stateProofKey, 'base64'))\r\n        : stateProofKey;\r\n\r\n    this.attribute_map = {\r\n      selectionParticipationKey: 'selection-participation-key',\r\n      voteFirstValid: 'vote-first-valid',\r\n      voteKeyDilution: 'vote-key-dilution',\r\n      voteLastValid: 'vote-last-valid',\r\n      voteParticipationKey: 'vote-participation-key',\r\n      stateProofKey: 'state-proof-key',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): AccountParticipation {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['selection-participation-key'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'selection-participation-key': ${data}`\r\n      );\r\n    if (typeof data['vote-first-valid'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'vote-first-valid': ${data}`\r\n      );\r\n    if (typeof data['vote-key-dilution'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'vote-key-dilution': ${data}`\r\n      );\r\n    if (typeof data['vote-last-valid'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'vote-last-valid': ${data}`\r\n      );\r\n    if (typeof data['vote-participation-key'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'vote-participation-key': ${data}`\r\n      );\r\n    return new AccountParticipation({\r\n      selectionParticipationKey: data['selection-participation-key'],\r\n      voteFirstValid: data['vote-first-valid'],\r\n      voteKeyDilution: data['vote-key-dilution'],\r\n      voteLastValid: data['vote-last-valid'],\r\n      voteParticipationKey: data['vote-participation-key'],\r\n      stateProofKey: data['state-proof-key'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Application state delta.\r\n */\r\nexport class AccountStateDelta extends BaseModel {\r\n  public address: string;\r\n\r\n  /**\r\n   * Application state delta.\r\n   */\r\n  public delta: EvalDeltaKeyValue[];\r\n\r\n  /**\r\n   * Creates a new `AccountStateDelta` object.\r\n   * @param address -\r\n   * @param delta - Application state delta.\r\n   */\r\n  constructor({\r\n    address,\r\n    delta,\r\n  }: {\r\n    address: string;\r\n    delta: EvalDeltaKeyValue[];\r\n  }) {\r\n    super();\r\n    this.address = address;\r\n    this.delta = delta;\r\n\r\n    this.attribute_map = {\r\n      address: 'address',\r\n      delta: 'delta',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): AccountStateDelta {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['address'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'address': ${data}`);\r\n    if (!Array.isArray(data['delta']))\r\n      throw new Error(\r\n        `Response is missing required array field 'delta': ${data}`\r\n      );\r\n    return new AccountStateDelta({\r\n      address: data['address'],\r\n      delta: data['delta'].map(EvalDeltaKeyValue.from_obj_for_encoding),\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * The logged messages from an app call along with the app ID and outer transaction\r\n * ID. Logs appear in the same order that they were emitted.\r\n */\r\nexport class AppCallLogs extends BaseModel {\r\n  /**\r\n   * The application from which the logs were generated\r\n   */\r\n  public applicationIndex: number | bigint;\r\n\r\n  /**\r\n   * An array of logs\r\n   */\r\n  public logs: Uint8Array[];\r\n\r\n  /**\r\n   * The transaction ID of the outer app call that lead to these logs\r\n   */\r\n  public txid: string;\r\n\r\n  /**\r\n   * Creates a new `AppCallLogs` object.\r\n   * @param applicationIndex - The application from which the logs were generated\r\n   * @param logs - An array of logs\r\n   * @param txid - The transaction ID of the outer app call that lead to these logs\r\n   */\r\n  constructor({\r\n    applicationIndex,\r\n    logs,\r\n    txid,\r\n  }: {\r\n    applicationIndex: number | bigint;\r\n    logs: Uint8Array[];\r\n    txid: string;\r\n  }) {\r\n    super();\r\n    this.applicationIndex = applicationIndex;\r\n    this.logs = logs;\r\n    this.txid = txid;\r\n\r\n    this.attribute_map = {\r\n      applicationIndex: 'application-index',\r\n      logs: 'logs',\r\n      txid: 'txId',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): AppCallLogs {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['application-index'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'application-index': ${data}`\r\n      );\r\n    if (!Array.isArray(data['logs']))\r\n      throw new Error(\r\n        `Response is missing required array field 'logs': ${data}`\r\n      );\r\n    if (typeof data['txId'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'txId': ${data}`);\r\n    return new AppCallLogs({\r\n      applicationIndex: data['application-index'],\r\n      logs: data['logs'],\r\n      txid: data['txId'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Application index and its parameters\r\n */\r\nexport class Application extends BaseModel {\r\n  /**\r\n   * (appidx) application index.\r\n   */\r\n  public id: number | bigint;\r\n\r\n  /**\r\n   * (appparams) application parameters.\r\n   */\r\n  public params: ApplicationParams;\r\n\r\n  /**\r\n   * Creates a new `Application` object.\r\n   * @param id - (appidx) application index.\r\n   * @param params - (appparams) application parameters.\r\n   */\r\n  constructor({\r\n    id,\r\n    params,\r\n  }: {\r\n    id: number | bigint;\r\n    params: ApplicationParams;\r\n  }) {\r\n    super();\r\n    this.id = id;\r\n    this.params = params;\r\n\r\n    this.attribute_map = {\r\n      id: 'id',\r\n      params: 'params',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): Application {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['id'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'id': ${data}`);\r\n    if (typeof data['params'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'params': ${data}`);\r\n    return new Application({\r\n      id: data['id'],\r\n      params: ApplicationParams.from_obj_for_encoding(data['params']),\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * An application's initial global/local/box states that were accessed during\r\n * simulation.\r\n */\r\nexport class ApplicationInitialStates extends BaseModel {\r\n  /**\r\n   * Application index.\r\n   */\r\n  public id: number | bigint;\r\n\r\n  /**\r\n   * An application's global/local/box state.\r\n   */\r\n  public appBoxes?: ApplicationKVStorage;\r\n\r\n  /**\r\n   * An application's global/local/box state.\r\n   */\r\n  public appGlobals?: ApplicationKVStorage;\r\n\r\n  /**\r\n   * An application's initial local states tied to different accounts.\r\n   */\r\n  public appLocals?: ApplicationKVStorage[];\r\n\r\n  /**\r\n   * Creates a new `ApplicationInitialStates` object.\r\n   * @param id - Application index.\r\n   * @param appBoxes - An application's global/local/box state.\r\n   * @param appGlobals - An application's global/local/box state.\r\n   * @param appLocals - An application's initial local states tied to different accounts.\r\n   */\r\n  constructor({\r\n    id,\r\n    appBoxes,\r\n    appGlobals,\r\n    appLocals,\r\n  }: {\r\n    id: number | bigint;\r\n    appBoxes?: ApplicationKVStorage;\r\n    appGlobals?: ApplicationKVStorage;\r\n    appLocals?: ApplicationKVStorage[];\r\n  }) {\r\n    super();\r\n    this.id = id;\r\n    this.appBoxes = appBoxes;\r\n    this.appGlobals = appGlobals;\r\n    this.appLocals = appLocals;\r\n\r\n    this.attribute_map = {\r\n      id: 'id',\r\n      appBoxes: 'app-boxes',\r\n      appGlobals: 'app-globals',\r\n      appLocals: 'app-locals',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): ApplicationInitialStates {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['id'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'id': ${data}`);\r\n    return new ApplicationInitialStates({\r\n      id: data['id'],\r\n      appBoxes:\r\n        typeof data['app-boxes'] !== 'undefined'\r\n          ? ApplicationKVStorage.from_obj_for_encoding(data['app-boxes'])\r\n          : undefined,\r\n      appGlobals:\r\n        typeof data['app-globals'] !== 'undefined'\r\n          ? ApplicationKVStorage.from_obj_for_encoding(data['app-globals'])\r\n          : undefined,\r\n      appLocals:\r\n        typeof data['app-locals'] !== 'undefined'\r\n          ? data['app-locals'].map(ApplicationKVStorage.from_obj_for_encoding)\r\n          : undefined,\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * An application's global/local/box state.\r\n */\r\nexport class ApplicationKVStorage extends BaseModel {\r\n  /**\r\n   * Key-Value pairs representing application states.\r\n   */\r\n  public kvs: AvmKeyValue[];\r\n\r\n  /**\r\n   * The address of the account associated with the local state.\r\n   */\r\n  public account?: string;\r\n\r\n  /**\r\n   * Creates a new `ApplicationKVStorage` object.\r\n   * @param kvs - Key-Value pairs representing application states.\r\n   * @param account - The address of the account associated with the local state.\r\n   */\r\n  constructor({ kvs, account }: { kvs: AvmKeyValue[]; account?: string }) {\r\n    super();\r\n    this.kvs = kvs;\r\n    this.account = account;\r\n\r\n    this.attribute_map = {\r\n      kvs: 'kvs',\r\n      account: 'account',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): ApplicationKVStorage {\r\n    /* eslint-disable dot-notation */\r\n    if (!Array.isArray(data['kvs']))\r\n      throw new Error(\r\n        `Response is missing required array field 'kvs': ${data}`\r\n      );\r\n    return new ApplicationKVStorage({\r\n      kvs: data['kvs'].map(AvmKeyValue.from_obj_for_encoding),\r\n      account: data['account'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * References an account's local state for an application.\r\n */\r\nexport class ApplicationLocalReference extends BaseModel {\r\n  /**\r\n   * Address of the account with the local state.\r\n   */\r\n  public account: string;\r\n\r\n  /**\r\n   * Application ID of the local state application.\r\n   */\r\n  public app: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `ApplicationLocalReference` object.\r\n   * @param account - Address of the account with the local state.\r\n   * @param app - Application ID of the local state application.\r\n   */\r\n  constructor({ account, app }: { account: string; app: number | bigint }) {\r\n    super();\r\n    this.account = account;\r\n    this.app = app;\r\n\r\n    this.attribute_map = {\r\n      account: 'account',\r\n      app: 'app',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): ApplicationLocalReference {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['account'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'account': ${data}`);\r\n    if (typeof data['app'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'app': ${data}`);\r\n    return new ApplicationLocalReference({\r\n      account: data['account'],\r\n      app: data['app'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Stores local state associated with an application.\r\n */\r\nexport class ApplicationLocalState extends BaseModel {\r\n  /**\r\n   * The application which this local state is for.\r\n   */\r\n  public id: number | bigint;\r\n\r\n  /**\r\n   * (hsch) schema.\r\n   */\r\n  public schema: ApplicationStateSchema;\r\n\r\n  /**\r\n   * (tkv) storage.\r\n   */\r\n  public keyValue?: TealKeyValue[];\r\n\r\n  /**\r\n   * Creates a new `ApplicationLocalState` object.\r\n   * @param id - The application which this local state is for.\r\n   * @param schema - (hsch) schema.\r\n   * @param keyValue - (tkv) storage.\r\n   */\r\n  constructor({\r\n    id,\r\n    schema,\r\n    keyValue,\r\n  }: {\r\n    id: number | bigint;\r\n    schema: ApplicationStateSchema;\r\n    keyValue?: TealKeyValue[];\r\n  }) {\r\n    super();\r\n    this.id = id;\r\n    this.schema = schema;\r\n    this.keyValue = keyValue;\r\n\r\n    this.attribute_map = {\r\n      id: 'id',\r\n      schema: 'schema',\r\n      keyValue: 'key-value',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): ApplicationLocalState {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['id'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'id': ${data}`);\r\n    if (typeof data['schema'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'schema': ${data}`);\r\n    return new ApplicationLocalState({\r\n      id: data['id'],\r\n      schema: ApplicationStateSchema.from_obj_for_encoding(data['schema']),\r\n      keyValue:\r\n        typeof data['key-value'] !== 'undefined'\r\n          ? data['key-value'].map(TealKeyValue.from_obj_for_encoding)\r\n          : undefined,\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Stores the global information associated with an application.\r\n */\r\nexport class ApplicationParams extends BaseModel {\r\n  /**\r\n   * (approv) approval program.\r\n   */\r\n  public approvalProgram: Uint8Array;\r\n\r\n  /**\r\n   * (clearp) approval program.\r\n   */\r\n  public clearStateProgram: Uint8Array;\r\n\r\n  /**\r\n   * The address that created this application. This is the address where the\r\n   * parameters and global state for this application can be found.\r\n   */\r\n  public creator: string;\r\n\r\n  /**\r\n   * (epp) the amount of extra program pages available to this app.\r\n   */\r\n  public extraProgramPages?: number | bigint;\r\n\r\n  /**\r\n   * (gs) global state\r\n   */\r\n  public globalState?: TealKeyValue[];\r\n\r\n  /**\r\n   * (gsch) global schema\r\n   */\r\n  public globalStateSchema?: ApplicationStateSchema;\r\n\r\n  /**\r\n   * (lsch) local schema\r\n   */\r\n  public localStateSchema?: ApplicationStateSchema;\r\n\r\n  /**\r\n   * Creates a new `ApplicationParams` object.\r\n   * @param approvalProgram - (approv) approval program.\r\n   * @param clearStateProgram - (clearp) approval program.\r\n   * @param creator - The address that created this application. This is the address where the\r\n   * parameters and global state for this application can be found.\r\n   * @param extraProgramPages - (epp) the amount of extra program pages available to this app.\r\n   * @param globalState - (gs) global state\r\n   * @param globalStateSchema - (gsch) global schema\r\n   * @param localStateSchema - (lsch) local schema\r\n   */\r\n  constructor({\r\n    approvalProgram,\r\n    clearStateProgram,\r\n    creator,\r\n    extraProgramPages,\r\n    globalState,\r\n    globalStateSchema,\r\n    localStateSchema,\r\n  }: {\r\n    approvalProgram: string | Uint8Array;\r\n    clearStateProgram: string | Uint8Array;\r\n    creator: string;\r\n    extraProgramPages?: number | bigint;\r\n    globalState?: TealKeyValue[];\r\n    globalStateSchema?: ApplicationStateSchema;\r\n    localStateSchema?: ApplicationStateSchema;\r\n  }) {\r\n    super();\r\n    this.approvalProgram =\r\n      typeof approvalProgram === 'string'\r\n        ? new Uint8Array(Buffer.from(approvalProgram, 'base64'))\r\n        : approvalProgram;\r\n    this.clearStateProgram =\r\n      typeof clearStateProgram === 'string'\r\n        ? new Uint8Array(Buffer.from(clearStateProgram, 'base64'))\r\n        : clearStateProgram;\r\n    this.creator = creator;\r\n    this.extraProgramPages = extraProgramPages;\r\n    this.globalState = globalState;\r\n    this.globalStateSchema = globalStateSchema;\r\n    this.localStateSchema = localStateSchema;\r\n\r\n    this.attribute_map = {\r\n      approvalProgram: 'approval-program',\r\n      clearStateProgram: 'clear-state-program',\r\n      creator: 'creator',\r\n      extraProgramPages: 'extra-program-pages',\r\n      globalState: 'global-state',\r\n      globalStateSchema: 'global-state-schema',\r\n      localStateSchema: 'local-state-schema',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): ApplicationParams {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['approval-program'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'approval-program': ${data}`\r\n      );\r\n    if (typeof data['clear-state-program'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'clear-state-program': ${data}`\r\n      );\r\n    if (typeof data['creator'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'creator': ${data}`);\r\n    return new ApplicationParams({\r\n      approvalProgram: data['approval-program'],\r\n      clearStateProgram: data['clear-state-program'],\r\n      creator: data['creator'],\r\n      extraProgramPages: data['extra-program-pages'],\r\n      globalState:\r\n        typeof data['global-state'] !== 'undefined'\r\n          ? data['global-state'].map(TealKeyValue.from_obj_for_encoding)\r\n          : undefined,\r\n      globalStateSchema:\r\n        typeof data['global-state-schema'] !== 'undefined'\r\n          ? ApplicationStateSchema.from_obj_for_encoding(\r\n              data['global-state-schema']\r\n            )\r\n          : undefined,\r\n      localStateSchema:\r\n        typeof data['local-state-schema'] !== 'undefined'\r\n          ? ApplicationStateSchema.from_obj_for_encoding(\r\n              data['local-state-schema']\r\n            )\r\n          : undefined,\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * An operation against an application's global/local/box state.\r\n */\r\nexport class ApplicationStateOperation extends BaseModel {\r\n  /**\r\n   * Type of application state. Value `g` is **global state**, `l` is **local\r\n   * state**, `b` is **boxes**.\r\n   */\r\n  public appStateType: string;\r\n\r\n  /**\r\n   * The key (name) of the global/local/box state.\r\n   */\r\n  public key: Uint8Array;\r\n\r\n  /**\r\n   * Operation type. Value `w` is **write**, `d` is **delete**.\r\n   */\r\n  public operation: string;\r\n\r\n  /**\r\n   * For local state changes, the address of the account associated with the local\r\n   * state.\r\n   */\r\n  public account?: string;\r\n\r\n  /**\r\n   * Represents an AVM value.\r\n   */\r\n  public newValue?: AvmValue;\r\n\r\n  /**\r\n   * Creates a new `ApplicationStateOperation` object.\r\n   * @param appStateType - Type of application state. Value `g` is **global state**, `l` is **local\r\n   * state**, `b` is **boxes**.\r\n   * @param key - The key (name) of the global/local/box state.\r\n   * @param operation - Operation type. Value `w` is **write**, `d` is **delete**.\r\n   * @param account - For local state changes, the address of the account associated with the local\r\n   * state.\r\n   * @param newValue - Represents an AVM value.\r\n   */\r\n  constructor({\r\n    appStateType,\r\n    key,\r\n    operation,\r\n    account,\r\n    newValue,\r\n  }: {\r\n    appStateType: string;\r\n    key: string | Uint8Array;\r\n    operation: string;\r\n    account?: string;\r\n    newValue?: AvmValue;\r\n  }) {\r\n    super();\r\n    this.appStateType = appStateType;\r\n    this.key =\r\n      typeof key === 'string'\r\n        ? new Uint8Array(Buffer.from(key, 'base64'))\r\n        : key;\r\n    this.operation = operation;\r\n    this.account = account;\r\n    this.newValue = newValue;\r\n\r\n    this.attribute_map = {\r\n      appStateType: 'app-state-type',\r\n      key: 'key',\r\n      operation: 'operation',\r\n      account: 'account',\r\n      newValue: 'new-value',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): ApplicationStateOperation {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['app-state-type'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'app-state-type': ${data}`\r\n      );\r\n    if (typeof data['key'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'key': ${data}`);\r\n    if (typeof data['operation'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'operation': ${data}`\r\n      );\r\n    return new ApplicationStateOperation({\r\n      appStateType: data['app-state-type'],\r\n      key: data['key'],\r\n      operation: data['operation'],\r\n      account: data['account'],\r\n      newValue:\r\n        typeof data['new-value'] !== 'undefined'\r\n          ? AvmValue.from_obj_for_encoding(data['new-value'])\r\n          : undefined,\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Specifies maximums on the number of each type that may be stored.\r\n */\r\nexport class ApplicationStateSchema extends BaseModel {\r\n  /**\r\n   * (nui) num of uints.\r\n   */\r\n  public numUint: number | bigint;\r\n\r\n  /**\r\n   * (nbs) num of byte slices.\r\n   */\r\n  public numByteSlice: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `ApplicationStateSchema` object.\r\n   * @param numUint - (nui) num of uints.\r\n   * @param numByteSlice - (nbs) num of byte slices.\r\n   */\r\n  constructor({\r\n    numUint,\r\n    numByteSlice,\r\n  }: {\r\n    numUint: number | bigint;\r\n    numByteSlice: number | bigint;\r\n  }) {\r\n    super();\r\n    this.numUint = numUint;\r\n    this.numByteSlice = numByteSlice;\r\n\r\n    this.attribute_map = {\r\n      numUint: 'num-uint',\r\n      numByteSlice: 'num-byte-slice',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): ApplicationStateSchema {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['num-uint'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'num-uint': ${data}`);\r\n    if (typeof data['num-byte-slice'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'num-byte-slice': ${data}`\r\n      );\r\n    return new ApplicationStateSchema({\r\n      numUint: data['num-uint'],\r\n      numByteSlice: data['num-byte-slice'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Specifies both the unique identifier and the parameters for an asset\r\n */\r\nexport class Asset extends BaseModel {\r\n  /**\r\n   * unique asset identifier\r\n   */\r\n  public index: number | bigint;\r\n\r\n  /**\r\n   * AssetParams specifies the parameters for an asset.\r\n   * (apar) when part of an AssetConfig transaction.\r\n   * Definition:\r\n   * data/transactions/asset.go : AssetParams\r\n   */\r\n  public params: AssetParams;\r\n\r\n  /**\r\n   * Creates a new `Asset` object.\r\n   * @param index - unique asset identifier\r\n   * @param params - AssetParams specifies the parameters for an asset.\r\n   * (apar) when part of an AssetConfig transaction.\r\n   * Definition:\r\n   * data/transactions/asset.go : AssetParams\r\n   */\r\n  constructor({\r\n    index,\r\n    params,\r\n  }: {\r\n    index: number | bigint;\r\n    params: AssetParams;\r\n  }) {\r\n    super();\r\n    this.index = index;\r\n    this.params = params;\r\n\r\n    this.attribute_map = {\r\n      index: 'index',\r\n      params: 'params',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): Asset {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['index'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'index': ${data}`);\r\n    if (typeof data['params'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'params': ${data}`);\r\n    return new Asset({\r\n      index: data['index'],\r\n      params: AssetParams.from_obj_for_encoding(data['params']),\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Describes an asset held by an account.\r\n * Definition:\r\n * data/basics/userBalance.go : AssetHolding\r\n */\r\nexport class AssetHolding extends BaseModel {\r\n  /**\r\n   * (a) number of units held.\r\n   */\r\n  public amount: number | bigint;\r\n\r\n  /**\r\n   * Asset ID of the holding.\r\n   */\r\n  public assetId: number | bigint;\r\n\r\n  /**\r\n   * (f) whether or not the holding is frozen.\r\n   */\r\n  public isFrozen: boolean;\r\n\r\n  /**\r\n   * Creates a new `AssetHolding` object.\r\n   * @param amount - (a) number of units held.\r\n   * @param assetId - Asset ID of the holding.\r\n   * @param isFrozen - (f) whether or not the holding is frozen.\r\n   */\r\n  constructor({\r\n    amount,\r\n    assetId,\r\n    isFrozen,\r\n  }: {\r\n    amount: number | bigint;\r\n    assetId: number | bigint;\r\n    isFrozen: boolean;\r\n  }) {\r\n    super();\r\n    this.amount = amount;\r\n    this.assetId = assetId;\r\n    this.isFrozen = isFrozen;\r\n\r\n    this.attribute_map = {\r\n      amount: 'amount',\r\n      assetId: 'asset-id',\r\n      isFrozen: 'is-frozen',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): AssetHolding {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['amount'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'amount': ${data}`);\r\n    if (typeof data['asset-id'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'asset-id': ${data}`);\r\n    if (typeof data['is-frozen'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'is-frozen': ${data}`\r\n      );\r\n    return new AssetHolding({\r\n      amount: data['amount'],\r\n      assetId: data['asset-id'],\r\n      isFrozen: data['is-frozen'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * References an asset held by an account.\r\n */\r\nexport class AssetHoldingReference extends BaseModel {\r\n  /**\r\n   * Address of the account holding the asset.\r\n   */\r\n  public account: string;\r\n\r\n  /**\r\n   * Asset ID of the holding.\r\n   */\r\n  public asset: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `AssetHoldingReference` object.\r\n   * @param account - Address of the account holding the asset.\r\n   * @param asset - Asset ID of the holding.\r\n   */\r\n  constructor({ account, asset }: { account: string; asset: number | bigint }) {\r\n    super();\r\n    this.account = account;\r\n    this.asset = asset;\r\n\r\n    this.attribute_map = {\r\n      account: 'account',\r\n      asset: 'asset',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): AssetHoldingReference {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['account'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'account': ${data}`);\r\n    if (typeof data['asset'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'asset': ${data}`);\r\n    return new AssetHoldingReference({\r\n      account: data['account'],\r\n      asset: data['asset'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * AssetParams specifies the parameters for an asset.\r\n * (apar) when part of an AssetConfig transaction.\r\n * Definition:\r\n * data/transactions/asset.go : AssetParams\r\n */\r\nexport class AssetParams extends BaseModel {\r\n  /**\r\n   * The address that created this asset. This is the address where the parameters\r\n   * for this asset can be found, and also the address where unwanted asset units can\r\n   * be sent in the worst case.\r\n   */\r\n  public creator: string;\r\n\r\n  /**\r\n   * (dc) The number of digits to use after the decimal point when displaying this\r\n   * asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in\r\n   * tenths. If 2, the base unit of the asset is in hundredths, and so on. This value\r\n   * must be between 0 and 19 (inclusive).\r\n   */\r\n  public decimals: number | bigint;\r\n\r\n  /**\r\n   * (t) The total number of units of this asset.\r\n   */\r\n  public total: number | bigint;\r\n\r\n  /**\r\n   * (c) Address of account used to clawback holdings of this asset. If empty,\r\n   * clawback is not permitted.\r\n   */\r\n  public clawback?: string;\r\n\r\n  /**\r\n   * (df) Whether holdings of this asset are frozen by default.\r\n   */\r\n  public defaultFrozen?: boolean;\r\n\r\n  /**\r\n   * (f) Address of account used to freeze holdings of this asset. If empty, freezing\r\n   * is not permitted.\r\n   */\r\n  public freeze?: string;\r\n\r\n  /**\r\n   * (m) Address of account used to manage the keys of this asset and to destroy it.\r\n   */\r\n  public manager?: string;\r\n\r\n  /**\r\n   * (am) A commitment to some unspecified asset metadata. The format of this\r\n   * metadata is up to the application.\r\n   */\r\n  public metadataHash?: Uint8Array;\r\n\r\n  /**\r\n   * (an) Name of this asset, as supplied by the creator. Included only when the\r\n   * asset name is composed of printable utf-8 characters.\r\n   */\r\n  public name?: string;\r\n\r\n  /**\r\n   * Base64 encoded name of this asset, as supplied by the creator.\r\n   */\r\n  public nameB64?: Uint8Array;\r\n\r\n  /**\r\n   * (r) Address of account holding reserve (non-minted) units of this asset.\r\n   */\r\n  public reserve?: string;\r\n\r\n  /**\r\n   * (un) Name of a unit of this asset, as supplied by the creator. Included only\r\n   * when the name of a unit of this asset is composed of printable utf-8 characters.\r\n   */\r\n  public unitName?: string;\r\n\r\n  /**\r\n   * Base64 encoded name of a unit of this asset, as supplied by the creator.\r\n   */\r\n  public unitNameB64?: Uint8Array;\r\n\r\n  /**\r\n   * (au) URL where more information about the asset can be retrieved. Included only\r\n   * when the URL is composed of printable utf-8 characters.\r\n   */\r\n  public url?: string;\r\n\r\n  /**\r\n   * Base64 encoded URL where more information about the asset can be retrieved.\r\n   */\r\n  public urlB64?: Uint8Array;\r\n\r\n  /**\r\n   * Creates a new `AssetParams` object.\r\n   * @param creator - The address that created this asset. This is the address where the parameters\r\n   * for this asset can be found, and also the address where unwanted asset units can\r\n   * be sent in the worst case.\r\n   * @param decimals - (dc) The number of digits to use after the decimal point when displaying this\r\n   * asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in\r\n   * tenths. If 2, the base unit of the asset is in hundredths, and so on. This value\r\n   * must be between 0 and 19 (inclusive).\r\n   * @param total - (t) The total number of units of this asset.\r\n   * @param clawback - (c) Address of account used to clawback holdings of this asset. If empty,\r\n   * clawback is not permitted.\r\n   * @param defaultFrozen - (df) Whether holdings of this asset are frozen by default.\r\n   * @param freeze - (f) Address of account used to freeze holdings of this asset. If empty, freezing\r\n   * is not permitted.\r\n   * @param manager - (m) Address of account used to manage the keys of this asset and to destroy it.\r\n   * @param metadataHash - (am) A commitment to some unspecified asset metadata. The format of this\r\n   * metadata is up to the application.\r\n   * @param name - (an) Name of this asset, as supplied by the creator. Included only when the\r\n   * asset name is composed of printable utf-8 characters.\r\n   * @param nameB64 - Base64 encoded name of this asset, as supplied by the creator.\r\n   * @param reserve - (r) Address of account holding reserve (non-minted) units of this asset.\r\n   * @param unitName - (un) Name of a unit of this asset, as supplied by the creator. Included only\r\n   * when the name of a unit of this asset is composed of printable utf-8 characters.\r\n   * @param unitNameB64 - Base64 encoded name of a unit of this asset, as supplied by the creator.\r\n   * @param url - (au) URL where more information about the asset can be retrieved. Included only\r\n   * when the URL is composed of printable utf-8 characters.\r\n   * @param urlB64 - Base64 encoded URL where more information about the asset can be retrieved.\r\n   */\r\n  constructor({\r\n    creator,\r\n    decimals,\r\n    total,\r\n    clawback,\r\n    defaultFrozen,\r\n    freeze,\r\n    manager,\r\n    metadataHash,\r\n    name,\r\n    nameB64,\r\n    reserve,\r\n    unitName,\r\n    unitNameB64,\r\n    url,\r\n    urlB64,\r\n  }: {\r\n    creator: string;\r\n    decimals: number | bigint;\r\n    total: number | bigint;\r\n    clawback?: string;\r\n    defaultFrozen?: boolean;\r\n    freeze?: string;\r\n    manager?: string;\r\n    metadataHash?: string | Uint8Array;\r\n    name?: string;\r\n    nameB64?: string | Uint8Array;\r\n    reserve?: string;\r\n    unitName?: string;\r\n    unitNameB64?: string | Uint8Array;\r\n    url?: string;\r\n    urlB64?: string | Uint8Array;\r\n  }) {\r\n    super();\r\n    this.creator = creator;\r\n    this.decimals = decimals;\r\n    this.total = total;\r\n    this.clawback = clawback;\r\n    this.defaultFrozen = defaultFrozen;\r\n    this.freeze = freeze;\r\n    this.manager = manager;\r\n    this.metadataHash =\r\n      typeof metadataHash === 'string'\r\n        ? new Uint8Array(Buffer.from(metadataHash, 'base64'))\r\n        : metadataHash;\r\n    this.name = name;\r\n    this.nameB64 =\r\n      typeof nameB64 === 'string'\r\n        ? new Uint8Array(Buffer.from(nameB64, 'base64'))\r\n        : nameB64;\r\n    this.reserve = reserve;\r\n    this.unitName = unitName;\r\n    this.unitNameB64 =\r\n      typeof unitNameB64 === 'string'\r\n        ? new Uint8Array(Buffer.from(unitNameB64, 'base64'))\r\n        : unitNameB64;\r\n    this.url = url;\r\n    this.urlB64 =\r\n      typeof urlB64 === 'string'\r\n        ? new Uint8Array(Buffer.from(urlB64, 'base64'))\r\n        : urlB64;\r\n\r\n    this.attribute_map = {\r\n      creator: 'creator',\r\n      decimals: 'decimals',\r\n      total: 'total',\r\n      clawback: 'clawback',\r\n      defaultFrozen: 'default-frozen',\r\n      freeze: 'freeze',\r\n      manager: 'manager',\r\n      metadataHash: 'metadata-hash',\r\n      name: 'name',\r\n      nameB64: 'name-b64',\r\n      reserve: 'reserve',\r\n      unitName: 'unit-name',\r\n      unitNameB64: 'unit-name-b64',\r\n      url: 'url',\r\n      urlB64: 'url-b64',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): AssetParams {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['creator'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'creator': ${data}`);\r\n    if (typeof data['decimals'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'decimals': ${data}`);\r\n    if (typeof data['total'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'total': ${data}`);\r\n    return new AssetParams({\r\n      creator: data['creator'],\r\n      decimals: data['decimals'],\r\n      total: data['total'],\r\n      clawback: data['clawback'],\r\n      defaultFrozen: data['default-frozen'],\r\n      freeze: data['freeze'],\r\n      manager: data['manager'],\r\n      metadataHash: data['metadata-hash'],\r\n      name: data['name'],\r\n      nameB64: data['name-b64'],\r\n      reserve: data['reserve'],\r\n      unitName: data['unit-name'],\r\n      unitNameB64: data['unit-name-b64'],\r\n      url: data['url'],\r\n      urlB64: data['url-b64'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Represents an AVM key-value pair in an application store.\r\n */\r\nexport class AvmKeyValue extends BaseModel {\r\n  public key: Uint8Array;\r\n\r\n  /**\r\n   * Represents an AVM value.\r\n   */\r\n  public value: AvmValue;\r\n\r\n  /**\r\n   * Creates a new `AvmKeyValue` object.\r\n   * @param key -\r\n   * @param value - Represents an AVM value.\r\n   */\r\n  constructor({ key, value }: { key: string | Uint8Array; value: AvmValue }) {\r\n    super();\r\n    this.key =\r\n      typeof key === 'string'\r\n        ? new Uint8Array(Buffer.from(key, 'base64'))\r\n        : key;\r\n    this.value = value;\r\n\r\n    this.attribute_map = {\r\n      key: 'key',\r\n      value: 'value',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): AvmKeyValue {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['key'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'key': ${data}`);\r\n    if (typeof data['value'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'value': ${data}`);\r\n    return new AvmKeyValue({\r\n      key: data['key'],\r\n      value: AvmValue.from_obj_for_encoding(data['value']),\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Represents an AVM value.\r\n */\r\nexport class AvmValue extends BaseModel {\r\n  /**\r\n   * value type. Value `1` refers to **bytes**, value `2` refers to **uint64**\r\n   */\r\n  public type: number | bigint;\r\n\r\n  /**\r\n   * bytes value.\r\n   */\r\n  public bytes?: Uint8Array;\r\n\r\n  /**\r\n   * uint value.\r\n   */\r\n  public uint?: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `AvmValue` object.\r\n   * @param type - value type. Value `1` refers to **bytes**, value `2` refers to **uint64**\r\n   * @param bytes - bytes value.\r\n   * @param uint - uint value.\r\n   */\r\n  constructor({\r\n    type,\r\n    bytes,\r\n    uint,\r\n  }: {\r\n    type: number | bigint;\r\n    bytes?: string | Uint8Array;\r\n    uint?: number | bigint;\r\n  }) {\r\n    super();\r\n    this.type = type;\r\n    this.bytes =\r\n      typeof bytes === 'string'\r\n        ? new Uint8Array(Buffer.from(bytes, 'base64'))\r\n        : bytes;\r\n    this.uint = uint;\r\n\r\n    this.attribute_map = {\r\n      type: 'type',\r\n      bytes: 'bytes',\r\n      uint: 'uint',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): AvmValue {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['type'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'type': ${data}`);\r\n    return new AvmValue({\r\n      type: data['type'],\r\n      bytes: data['bytes'],\r\n      uint: data['uint'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Hash of a block header.\r\n */\r\nexport class BlockHashResponse extends BaseModel {\r\n  /**\r\n   * Block header hash.\r\n   */\r\n  public blockhash: string;\r\n\r\n  /**\r\n   * Creates a new `BlockHashResponse` object.\r\n   * @param blockhash - Block header hash.\r\n   */\r\n  constructor({ blockhash }: { blockhash: string }) {\r\n    super();\r\n    this.blockhash = blockhash;\r\n\r\n    this.attribute_map = {\r\n      blockhash: 'blockHash',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): BlockHashResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['blockHash'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'blockHash': ${data}`\r\n      );\r\n    return new BlockHashResponse({\r\n      blockhash: data['blockHash'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * All logs emitted in the given round. Each app call, whether top-level or inner,\r\n * that contains logs results in a separate AppCallLogs object. Therefore there may\r\n * be multiple AppCallLogs with the same application ID and outer transaction ID in\r\n * the event of multiple inner app calls to the same app. App calls with no logs\r\n * are not included in the response. AppCallLogs are returned in the same order\r\n * that their corresponding app call appeared in the block (pre-order traversal of\r\n * inner app calls)\r\n */\r\nexport class BlockLogsResponse extends BaseModel {\r\n  public logs: AppCallLogs[];\r\n\r\n  /**\r\n   * Creates a new `BlockLogsResponse` object.\r\n   * @param logs -\r\n   */\r\n  constructor({ logs }: { logs: AppCallLogs[] }) {\r\n    super();\r\n    this.logs = logs;\r\n\r\n    this.attribute_map = {\r\n      logs: 'logs',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): BlockLogsResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (!Array.isArray(data['logs']))\r\n      throw new Error(\r\n        `Response is missing required array field 'logs': ${data}`\r\n      );\r\n    return new BlockLogsResponse({\r\n      logs: data['logs'].map(AppCallLogs.from_obj_for_encoding),\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Encoded block object.\r\n */\r\nexport class BlockResponse extends BaseModel {\r\n  /**\r\n   * Block header data.\r\n   */\r\n  public block: BlockHeader;\r\n\r\n  /**\r\n   * Optional certificate object. This is only included when the format is set to\r\n   * message pack.\r\n   */\r\n  public cert?: Record<string, any>;\r\n\r\n  /**\r\n   * Creates a new `BlockResponse` object.\r\n   * @param block - Block header data.\r\n   * @param cert - Optional certificate object. This is only included when the format is set to\r\n   * message pack.\r\n   */\r\n  constructor({\r\n    block,\r\n    cert,\r\n  }: {\r\n    block: BlockHeader;\r\n    cert?: Record<string, any>;\r\n  }) {\r\n    super();\r\n    this.block = block;\r\n    this.cert = cert;\r\n\r\n    this.attribute_map = {\r\n      block: 'block',\r\n      cert: 'cert',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): BlockResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['block'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'block': ${data}`);\r\n    return new BlockResponse({\r\n      block: data['block'],\r\n      cert: data['cert'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Top level transaction IDs in a block.\r\n */\r\nexport class BlockTxidsResponse extends BaseModel {\r\n  /**\r\n   * Block transaction IDs.\r\n   */\r\n  public blocktxids: string[];\r\n\r\n  /**\r\n   * Creates a new `BlockTxidsResponse` object.\r\n   * @param blocktxids - Block transaction IDs.\r\n   */\r\n  constructor({ blocktxids }: { blocktxids: string[] }) {\r\n    super();\r\n    this.blocktxids = blocktxids;\r\n\r\n    this.attribute_map = {\r\n      blocktxids: 'blockTxids',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): BlockTxidsResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (!Array.isArray(data['blockTxids']))\r\n      throw new Error(\r\n        `Response is missing required array field 'blockTxids': ${data}`\r\n      );\r\n    return new BlockTxidsResponse({\r\n      blocktxids: data['blockTxids'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Box name and its content.\r\n */\r\nexport class Box extends BaseModel {\r\n  /**\r\n   * (name) box name, base64 encoded\r\n   */\r\n  public name: Uint8Array;\r\n\r\n  /**\r\n   * The round for which this information is relevant\r\n   */\r\n  public round: number | bigint;\r\n\r\n  /**\r\n   * (value) box value, base64 encoded.\r\n   */\r\n  public value: Uint8Array;\r\n\r\n  /**\r\n   * Creates a new `Box` object.\r\n   * @param name - (name) box name, base64 encoded\r\n   * @param round - The round for which this information is relevant\r\n   * @param value - (value) box value, base64 encoded.\r\n   */\r\n  constructor({\r\n    name,\r\n    round,\r\n    value,\r\n  }: {\r\n    name: string | Uint8Array;\r\n    round: number | bigint;\r\n    value: string | Uint8Array;\r\n  }) {\r\n    super();\r\n    this.name =\r\n      typeof name === 'string'\r\n        ? new Uint8Array(Buffer.from(name, 'base64'))\r\n        : name;\r\n    this.round = round;\r\n    this.value =\r\n      typeof value === 'string'\r\n        ? new Uint8Array(Buffer.from(value, 'base64'))\r\n        : value;\r\n\r\n    this.attribute_map = {\r\n      name: 'name',\r\n      round: 'round',\r\n      value: 'value',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): Box {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['name'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'name': ${data}`);\r\n    if (typeof data['round'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'round': ${data}`);\r\n    if (typeof data['value'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'value': ${data}`);\r\n    return new Box({\r\n      name: data['name'],\r\n      round: data['round'],\r\n      value: data['value'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Box descriptor describes a Box.\r\n */\r\nexport class BoxDescriptor extends BaseModel {\r\n  /**\r\n   * Base64 encoded box name\r\n   */\r\n  public name: Uint8Array;\r\n\r\n  /**\r\n   * Creates a new `BoxDescriptor` object.\r\n   * @param name - Base64 encoded box name\r\n   */\r\n  constructor({ name }: { name: string | Uint8Array }) {\r\n    super();\r\n    this.name =\r\n      typeof name === 'string'\r\n        ? new Uint8Array(Buffer.from(name, 'base64'))\r\n        : name;\r\n\r\n    this.attribute_map = {\r\n      name: 'name',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): BoxDescriptor {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['name'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'name': ${data}`);\r\n    return new BoxDescriptor({\r\n      name: data['name'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * References a box of an application.\r\n */\r\nexport class BoxReference extends BaseModel {\r\n  /**\r\n   * Application ID which this box belongs to\r\n   */\r\n  public app: number | bigint;\r\n\r\n  /**\r\n   * Base64 encoded box name\r\n   */\r\n  public name: Uint8Array;\r\n\r\n  /**\r\n   * Creates a new `BoxReference` object.\r\n   * @param app - Application ID which this box belongs to\r\n   * @param name - Base64 encoded box name\r\n   */\r\n  constructor({\r\n    app,\r\n    name,\r\n  }: {\r\n    app: number | bigint;\r\n    name: string | Uint8Array;\r\n  }) {\r\n    super();\r\n    this.app = app;\r\n    this.name =\r\n      typeof name === 'string'\r\n        ? new Uint8Array(Buffer.from(name, 'base64'))\r\n        : name;\r\n\r\n    this.attribute_map = {\r\n      app: 'app',\r\n      name: 'name',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): BoxReference {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['app'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'app': ${data}`);\r\n    if (typeof data['name'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'name': ${data}`);\r\n    return new BoxReference({\r\n      app: data['app'],\r\n      name: data['name'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Box names of an application\r\n */\r\nexport class BoxesResponse extends BaseModel {\r\n  public boxes: BoxDescriptor[];\r\n\r\n  /**\r\n   * Creates a new `BoxesResponse` object.\r\n   * @param boxes -\r\n   */\r\n  constructor({ boxes }: { boxes: BoxDescriptor[] }) {\r\n    super();\r\n    this.boxes = boxes;\r\n\r\n    this.attribute_map = {\r\n      boxes: 'boxes',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): BoxesResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (!Array.isArray(data['boxes']))\r\n      throw new Error(\r\n        `Response is missing required array field 'boxes': ${data}`\r\n      );\r\n    return new BoxesResponse({\r\n      boxes: data['boxes'].map(BoxDescriptor.from_obj_for_encoding),\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\nexport class BuildVersion extends BaseModel {\r\n  public branch: string;\r\n\r\n  public buildNumber: number | bigint;\r\n\r\n  public channel: string;\r\n\r\n  public commitHash: string;\r\n\r\n  public major: number | bigint;\r\n\r\n  public minor: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `BuildVersion` object.\r\n   * @param branch -\r\n   * @param buildNumber -\r\n   * @param channel -\r\n   * @param commitHash -\r\n   * @param major -\r\n   * @param minor -\r\n   */\r\n  constructor({\r\n    branch,\r\n    buildNumber,\r\n    channel,\r\n    commitHash,\r\n    major,\r\n    minor,\r\n  }: {\r\n    branch: string;\r\n    buildNumber: number | bigint;\r\n    channel: string;\r\n    commitHash: string;\r\n    major: number | bigint;\r\n    minor: number | bigint;\r\n  }) {\r\n    super();\r\n    this.branch = branch;\r\n    this.buildNumber = buildNumber;\r\n    this.channel = channel;\r\n    this.commitHash = commitHash;\r\n    this.major = major;\r\n    this.minor = minor;\r\n\r\n    this.attribute_map = {\r\n      branch: 'branch',\r\n      buildNumber: 'build_number',\r\n      channel: 'channel',\r\n      commitHash: 'commit_hash',\r\n      major: 'major',\r\n      minor: 'minor',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): BuildVersion {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['branch'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'branch': ${data}`);\r\n    if (typeof data['build_number'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'build_number': ${data}`\r\n      );\r\n    if (typeof data['channel'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'channel': ${data}`);\r\n    if (typeof data['commit_hash'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'commit_hash': ${data}`\r\n      );\r\n    if (typeof data['major'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'major': ${data}`);\r\n    if (typeof data['minor'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'minor': ${data}`);\r\n    return new BuildVersion({\r\n      branch: data['branch'],\r\n      buildNumber: data['build_number'],\r\n      channel: data['channel'],\r\n      commitHash: data['commit_hash'],\r\n      major: data['major'],\r\n      minor: data['minor'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Teal compile Result\r\n */\r\nexport class CompileResponse extends BaseModel {\r\n  /**\r\n   * base32 SHA512_256 of program bytes (Address style)\r\n   */\r\n  public hash: string;\r\n\r\n  /**\r\n   * base64 encoded program bytes\r\n   */\r\n  public result: string;\r\n\r\n  /**\r\n   * JSON of the source map\r\n   */\r\n  public sourcemap?: Record<string, any>;\r\n\r\n  /**\r\n   * Creates a new `CompileResponse` object.\r\n   * @param hash - base32 SHA512_256 of program bytes (Address style)\r\n   * @param result - base64 encoded program bytes\r\n   * @param sourcemap - JSON of the source map\r\n   */\r\n  constructor({\r\n    hash,\r\n    result,\r\n    sourcemap,\r\n  }: {\r\n    hash: string;\r\n    result: string;\r\n    sourcemap?: Record<string, any>;\r\n  }) {\r\n    super();\r\n    this.hash = hash;\r\n    this.result = result;\r\n    this.sourcemap = sourcemap;\r\n\r\n    this.attribute_map = {\r\n      hash: 'hash',\r\n      result: 'result',\r\n      sourcemap: 'sourcemap',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): CompileResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['hash'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'hash': ${data}`);\r\n    if (typeof data['result'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'result': ${data}`);\r\n    return new CompileResponse({\r\n      hash: data['hash'],\r\n      result: data['result'],\r\n      sourcemap: data['sourcemap'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Teal disassembly Result\r\n */\r\nexport class DisassembleResponse extends BaseModel {\r\n  /**\r\n   * disassembled Teal code\r\n   */\r\n  public result: string;\r\n\r\n  /**\r\n   * Creates a new `DisassembleResponse` object.\r\n   * @param result - disassembled Teal code\r\n   */\r\n  constructor({ result }: { result: string }) {\r\n    super();\r\n    this.result = result;\r\n\r\n    this.attribute_map = {\r\n      result: 'result',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): DisassembleResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['result'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'result': ${data}`);\r\n    return new DisassembleResponse({\r\n      result: data['result'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Request data type for dryrun endpoint. Given the Transactions and simulated\r\n * ledger state upload, run TEAL scripts and return debugging information.\r\n */\r\nexport class DryrunRequest extends BaseModel {\r\n  public accounts: Account[];\r\n\r\n  public apps: Application[];\r\n\r\n  /**\r\n   * LatestTimestamp is available to some TEAL scripts. Defaults to the latest\r\n   * confirmed timestamp this algod is attached to.\r\n   */\r\n  public latestTimestamp: number | bigint;\r\n\r\n  /**\r\n   * ProtocolVersion specifies a specific version string to operate under, otherwise\r\n   * whatever the current protocol of the network this algod is running in.\r\n   */\r\n  public protocolVersion: string;\r\n\r\n  /**\r\n   * Round is available to some TEAL scripts. Defaults to the current round on the\r\n   * network this algod is attached to.\r\n   */\r\n  public round: number | bigint;\r\n\r\n  public sources: DryrunSource[];\r\n\r\n  public txns: EncodedSignedTransaction[];\r\n\r\n  /**\r\n   * Creates a new `DryrunRequest` object.\r\n   * @param accounts -\r\n   * @param apps -\r\n   * @param latestTimestamp - LatestTimestamp is available to some TEAL scripts. Defaults to the latest\r\n   * confirmed timestamp this algod is attached to.\r\n   * @param protocolVersion - ProtocolVersion specifies a specific version string to operate under, otherwise\r\n   * whatever the current protocol of the network this algod is running in.\r\n   * @param round - Round is available to some TEAL scripts. Defaults to the current round on the\r\n   * network this algod is attached to.\r\n   * @param sources -\r\n   * @param txns -\r\n   */\r\n  constructor({\r\n    accounts,\r\n    apps,\r\n    latestTimestamp,\r\n    protocolVersion,\r\n    round,\r\n    sources,\r\n    txns,\r\n  }: {\r\n    accounts: Account[];\r\n    apps: Application[];\r\n    latestTimestamp: number | bigint;\r\n    protocolVersion: string;\r\n    round: number | bigint;\r\n    sources: DryrunSource[];\r\n    txns: EncodedSignedTransaction[];\r\n  }) {\r\n    super();\r\n    this.accounts = accounts;\r\n    this.apps = apps;\r\n    this.latestTimestamp = latestTimestamp;\r\n    this.protocolVersion = protocolVersion;\r\n    this.round = round;\r\n    this.sources = sources;\r\n    this.txns = txns;\r\n\r\n    this.attribute_map = {\r\n      accounts: 'accounts',\r\n      apps: 'apps',\r\n      latestTimestamp: 'latest-timestamp',\r\n      protocolVersion: 'protocol-version',\r\n      round: 'round',\r\n      sources: 'sources',\r\n      txns: 'txns',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): DryrunRequest {\r\n    /* eslint-disable dot-notation */\r\n    if (!Array.isArray(data['accounts']))\r\n      throw new Error(\r\n        `Response is missing required array field 'accounts': ${data}`\r\n      );\r\n    if (!Array.isArray(data['apps']))\r\n      throw new Error(\r\n        `Response is missing required array field 'apps': ${data}`\r\n      );\r\n    if (typeof data['latest-timestamp'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'latest-timestamp': ${data}`\r\n      );\r\n    if (typeof data['protocol-version'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'protocol-version': ${data}`\r\n      );\r\n    if (typeof data['round'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'round': ${data}`);\r\n    if (!Array.isArray(data['sources']))\r\n      throw new Error(\r\n        `Response is missing required array field 'sources': ${data}`\r\n      );\r\n    if (!Array.isArray(data['txns']))\r\n      throw new Error(\r\n        `Response is missing required array field 'txns': ${data}`\r\n      );\r\n    return new DryrunRequest({\r\n      accounts: data['accounts'].map(Account.from_obj_for_encoding),\r\n      apps: data['apps'].map(Application.from_obj_for_encoding),\r\n      latestTimestamp: data['latest-timestamp'],\r\n      protocolVersion: data['protocol-version'],\r\n      round: data['round'],\r\n      sources: data['sources'].map(DryrunSource.from_obj_for_encoding),\r\n      txns: data['txns'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * DryrunResponse contains per-txn debug information from a dryrun.\r\n */\r\nexport class DryrunResponse extends BaseModel {\r\n  public error: string;\r\n\r\n  /**\r\n   * Protocol version is the protocol version Dryrun was operated under.\r\n   */\r\n  public protocolVersion: string;\r\n\r\n  public txns: DryrunTxnResult[];\r\n\r\n  /**\r\n   * Creates a new `DryrunResponse` object.\r\n   * @param error -\r\n   * @param protocolVersion - Protocol version is the protocol version Dryrun was operated under.\r\n   * @param txns -\r\n   */\r\n  constructor({\r\n    error,\r\n    protocolVersion,\r\n    txns,\r\n  }: {\r\n    error: string;\r\n    protocolVersion: string;\r\n    txns: DryrunTxnResult[];\r\n  }) {\r\n    super();\r\n    this.error = error;\r\n    this.protocolVersion = protocolVersion;\r\n    this.txns = txns;\r\n\r\n    this.attribute_map = {\r\n      error: 'error',\r\n      protocolVersion: 'protocol-version',\r\n      txns: 'txns',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): DryrunResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['error'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'error': ${data}`);\r\n    if (typeof data['protocol-version'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'protocol-version': ${data}`\r\n      );\r\n    if (!Array.isArray(data['txns']))\r\n      throw new Error(\r\n        `Response is missing required array field 'txns': ${data}`\r\n      );\r\n    return new DryrunResponse({\r\n      error: data['error'],\r\n      protocolVersion: data['protocol-version'],\r\n      txns: data['txns'].map(DryrunTxnResult.from_obj_for_encoding),\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * DryrunSource is TEAL source text that gets uploaded, compiled, and inserted into\r\n * transactions or application state.\r\n */\r\nexport class DryrunSource extends BaseModel {\r\n  /**\r\n   * FieldName is what kind of sources this is. If lsig then it goes into the\r\n   * transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the\r\n   * Approval Program or Clear State Program of application[this.AppIndex].\r\n   */\r\n  public fieldName: string;\r\n\r\n  public source: string;\r\n\r\n  public txnIndex: number | bigint;\r\n\r\n  public appIndex: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `DryrunSource` object.\r\n   * @param fieldName - FieldName is what kind of sources this is. If lsig then it goes into the\r\n   * transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the\r\n   * Approval Program or Clear State Program of application[this.AppIndex].\r\n   * @param source -\r\n   * @param txnIndex -\r\n   * @param appIndex -\r\n   */\r\n  constructor({\r\n    fieldName,\r\n    source,\r\n    txnIndex,\r\n    appIndex,\r\n  }: {\r\n    fieldName: string;\r\n    source: string;\r\n    txnIndex: number | bigint;\r\n    appIndex: number | bigint;\r\n  }) {\r\n    super();\r\n    this.fieldName = fieldName;\r\n    this.source = source;\r\n    this.txnIndex = txnIndex;\r\n    this.appIndex = appIndex;\r\n\r\n    this.attribute_map = {\r\n      fieldName: 'field-name',\r\n      source: 'source',\r\n      txnIndex: 'txn-index',\r\n      appIndex: 'app-index',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): DryrunSource {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['field-name'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'field-name': ${data}`\r\n      );\r\n    if (typeof data['source'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'source': ${data}`);\r\n    if (typeof data['txn-index'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'txn-index': ${data}`\r\n      );\r\n    if (typeof data['app-index'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'app-index': ${data}`\r\n      );\r\n    return new DryrunSource({\r\n      fieldName: data['field-name'],\r\n      source: data['source'],\r\n      txnIndex: data['txn-index'],\r\n      appIndex: data['app-index'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Stores the TEAL eval step data\r\n */\r\nexport class DryrunState extends BaseModel {\r\n  /**\r\n   * Line number\r\n   */\r\n  public line: number | bigint;\r\n\r\n  /**\r\n   * Program counter\r\n   */\r\n  public pc: number | bigint;\r\n\r\n  public stack: TealValue[];\r\n\r\n  /**\r\n   * Evaluation error if any\r\n   */\r\n  public error?: string;\r\n\r\n  public scratch?: TealValue[];\r\n\r\n  /**\r\n   * Creates a new `DryrunState` object.\r\n   * @param line - Line number\r\n   * @param pc - Program counter\r\n   * @param stack -\r\n   * @param error - Evaluation error if any\r\n   * @param scratch -\r\n   */\r\n  constructor({\r\n    line,\r\n    pc,\r\n    stack,\r\n    error,\r\n    scratch,\r\n  }: {\r\n    line: number | bigint;\r\n    pc: number | bigint;\r\n    stack: TealValue[];\r\n    error?: string;\r\n    scratch?: TealValue[];\r\n  }) {\r\n    super();\r\n    this.line = line;\r\n    this.pc = pc;\r\n    this.stack = stack;\r\n    this.error = error;\r\n    this.scratch = scratch;\r\n\r\n    this.attribute_map = {\r\n      line: 'line',\r\n      pc: 'pc',\r\n      stack: 'stack',\r\n      error: 'error',\r\n      scratch: 'scratch',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): DryrunState {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['line'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'line': ${data}`);\r\n    if (typeof data['pc'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'pc': ${data}`);\r\n    if (!Array.isArray(data['stack']))\r\n      throw new Error(\r\n        `Response is missing required array field 'stack': ${data}`\r\n      );\r\n    return new DryrunState({\r\n      line: data['line'],\r\n      pc: data['pc'],\r\n      stack: data['stack'].map(TealValue.from_obj_for_encoding),\r\n      error: data['error'],\r\n      scratch:\r\n        typeof data['scratch'] !== 'undefined'\r\n          ? data['scratch'].map(TealValue.from_obj_for_encoding)\r\n          : undefined,\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * DryrunTxnResult contains any LogicSig or ApplicationCall program debug\r\n * information and state updates from a dryrun.\r\n */\r\nexport class DryrunTxnResult extends BaseModel {\r\n  /**\r\n   * Disassembled program line by line.\r\n   */\r\n  public disassembly: string[];\r\n\r\n  public appCallMessages?: string[];\r\n\r\n  public appCallTrace?: DryrunState[];\r\n\r\n  /**\r\n   * Budget added during execution of app call transaction.\r\n   */\r\n  public budgetAdded?: number | bigint;\r\n\r\n  /**\r\n   * Budget consumed during execution of app call transaction.\r\n   */\r\n  public budgetConsumed?: number | bigint;\r\n\r\n  /**\r\n   * Application state delta.\r\n   */\r\n  public globalDelta?: EvalDeltaKeyValue[];\r\n\r\n  public localDeltas?: AccountStateDelta[];\r\n\r\n  /**\r\n   * Disassembled lsig program line by line.\r\n   */\r\n  public logicSigDisassembly?: string[];\r\n\r\n  public logicSigMessages?: string[];\r\n\r\n  public logicSigTrace?: DryrunState[];\r\n\r\n  public logs?: Uint8Array[];\r\n\r\n  /**\r\n   * Creates a new `DryrunTxnResult` object.\r\n   * @param disassembly - Disassembled program line by line.\r\n   * @param appCallMessages -\r\n   * @param appCallTrace -\r\n   * @param budgetAdded - Budget added during execution of app call transaction.\r\n   * @param budgetConsumed - Budget consumed during execution of app call transaction.\r\n   * @param globalDelta - Application state delta.\r\n   * @param localDeltas -\r\n   * @param logicSigDisassembly - Disassembled lsig program line by line.\r\n   * @param logicSigMessages -\r\n   * @param logicSigTrace -\r\n   * @param logs -\r\n   */\r\n  constructor({\r\n    disassembly,\r\n    appCallMessages,\r\n    appCallTrace,\r\n    budgetAdded,\r\n    budgetConsumed,\r\n    globalDelta,\r\n    localDeltas,\r\n    logicSigDisassembly,\r\n    logicSigMessages,\r\n    logicSigTrace,\r\n    logs,\r\n  }: {\r\n    disassembly: string[];\r\n    appCallMessages?: string[];\r\n    appCallTrace?: DryrunState[];\r\n    budgetAdded?: number | bigint;\r\n    budgetConsumed?: number | bigint;\r\n    globalDelta?: EvalDeltaKeyValue[];\r\n    localDeltas?: AccountStateDelta[];\r\n    logicSigDisassembly?: string[];\r\n    logicSigMessages?: string[];\r\n    logicSigTrace?: DryrunState[];\r\n    logs?: Uint8Array[];\r\n  }) {\r\n    super();\r\n    this.disassembly = disassembly;\r\n    this.appCallMessages = appCallMessages;\r\n    this.appCallTrace = appCallTrace;\r\n    this.budgetAdded = budgetAdded;\r\n    this.budgetConsumed = budgetConsumed;\r\n    this.globalDelta = globalDelta;\r\n    this.localDeltas = localDeltas;\r\n    this.logicSigDisassembly = logicSigDisassembly;\r\n    this.logicSigMessages = logicSigMessages;\r\n    this.logicSigTrace = logicSigTrace;\r\n    this.logs = logs;\r\n\r\n    this.attribute_map = {\r\n      disassembly: 'disassembly',\r\n      appCallMessages: 'app-call-messages',\r\n      appCallTrace: 'app-call-trace',\r\n      budgetAdded: 'budget-added',\r\n      budgetConsumed: 'budget-consumed',\r\n      globalDelta: 'global-delta',\r\n      localDeltas: 'local-deltas',\r\n      logicSigDisassembly: 'logic-sig-disassembly',\r\n      logicSigMessages: 'logic-sig-messages',\r\n      logicSigTrace: 'logic-sig-trace',\r\n      logs: 'logs',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): DryrunTxnResult {\r\n    /* eslint-disable dot-notation */\r\n    if (!Array.isArray(data['disassembly']))\r\n      throw new Error(\r\n        `Response is missing required array field 'disassembly': ${data}`\r\n      );\r\n    return new DryrunTxnResult({\r\n      disassembly: data['disassembly'],\r\n      appCallMessages: data['app-call-messages'],\r\n      appCallTrace:\r\n        typeof data['app-call-trace'] !== 'undefined'\r\n          ? data['app-call-trace'].map(DryrunState.from_obj_for_encoding)\r\n          : undefined,\r\n      budgetAdded: data['budget-added'],\r\n      budgetConsumed: data['budget-consumed'],\r\n      globalDelta:\r\n        typeof data['global-delta'] !== 'undefined'\r\n          ? data['global-delta'].map(EvalDeltaKeyValue.from_obj_for_encoding)\r\n          : undefined,\r\n      localDeltas:\r\n        typeof data['local-deltas'] !== 'undefined'\r\n          ? data['local-deltas'].map(AccountStateDelta.from_obj_for_encoding)\r\n          : undefined,\r\n      logicSigDisassembly: data['logic-sig-disassembly'],\r\n      logicSigMessages: data['logic-sig-messages'],\r\n      logicSigTrace:\r\n        typeof data['logic-sig-trace'] !== 'undefined'\r\n          ? data['logic-sig-trace'].map(DryrunState.from_obj_for_encoding)\r\n          : undefined,\r\n      logs: data['logs'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * An error response with optional data field.\r\n */\r\nexport class ErrorResponse extends BaseModel {\r\n  public message: string;\r\n\r\n  public data?: Record<string, any>;\r\n\r\n  /**\r\n   * Creates a new `ErrorResponse` object.\r\n   * @param message -\r\n   * @param data -\r\n   */\r\n  constructor({\r\n    message,\r\n    data,\r\n  }: {\r\n    message: string;\r\n    data?: Record<string, any>;\r\n  }) {\r\n    super();\r\n    this.message = message;\r\n    this.data = data;\r\n\r\n    this.attribute_map = {\r\n      message: 'message',\r\n      data: 'data',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): ErrorResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['message'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'message': ${data}`);\r\n    return new ErrorResponse({\r\n      message: data['message'],\r\n      data: data['data'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Represents a TEAL value delta.\r\n */\r\nexport class EvalDelta extends BaseModel {\r\n  /**\r\n   * (at) delta action.\r\n   */\r\n  public action: number | bigint;\r\n\r\n  /**\r\n   * (bs) bytes value.\r\n   */\r\n  public bytes?: string;\r\n\r\n  /**\r\n   * (ui) uint value.\r\n   */\r\n  public uint?: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `EvalDelta` object.\r\n   * @param action - (at) delta action.\r\n   * @param bytes - (bs) bytes value.\r\n   * @param uint - (ui) uint value.\r\n   */\r\n  constructor({\r\n    action,\r\n    bytes,\r\n    uint,\r\n  }: {\r\n    action: number | bigint;\r\n    bytes?: string;\r\n    uint?: number | bigint;\r\n  }) {\r\n    super();\r\n    this.action = action;\r\n    this.bytes = bytes;\r\n    this.uint = uint;\r\n\r\n    this.attribute_map = {\r\n      action: 'action',\r\n      bytes: 'bytes',\r\n      uint: 'uint',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): EvalDelta {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['action'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'action': ${data}`);\r\n    return new EvalDelta({\r\n      action: data['action'],\r\n      bytes: data['bytes'],\r\n      uint: data['uint'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Key-value pairs for StateDelta.\r\n */\r\nexport class EvalDeltaKeyValue extends BaseModel {\r\n  public key: string;\r\n\r\n  /**\r\n   * Represents a TEAL value delta.\r\n   */\r\n  public value: EvalDelta;\r\n\r\n  /**\r\n   * Creates a new `EvalDeltaKeyValue` object.\r\n   * @param key -\r\n   * @param value - Represents a TEAL value delta.\r\n   */\r\n  constructor({ key, value }: { key: string; value: EvalDelta }) {\r\n    super();\r\n    this.key = key;\r\n    this.value = value;\r\n\r\n    this.attribute_map = {\r\n      key: 'key',\r\n      value: 'value',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): EvalDeltaKeyValue {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['key'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'key': ${data}`);\r\n    if (typeof data['value'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'value': ${data}`);\r\n    return new EvalDeltaKeyValue({\r\n      key: data['key'],\r\n      value: EvalDelta.from_obj_for_encoding(data['value']),\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Response containing the timestamp offset in seconds\r\n */\r\nexport class GetBlockTimeStampOffsetResponse extends BaseModel {\r\n  /**\r\n   * Timestamp offset in seconds.\r\n   */\r\n  public offset: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `GetBlockTimeStampOffsetResponse` object.\r\n   * @param offset - Timestamp offset in seconds.\r\n   */\r\n  constructor({ offset }: { offset: number | bigint }) {\r\n    super();\r\n    this.offset = offset;\r\n\r\n    this.attribute_map = {\r\n      offset: 'offset',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): GetBlockTimeStampOffsetResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['offset'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'offset': ${data}`);\r\n    return new GetBlockTimeStampOffsetResponse({\r\n      offset: data['offset'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Response containing the ledger's minimum sync round\r\n */\r\nexport class GetSyncRoundResponse extends BaseModel {\r\n  /**\r\n   * The minimum sync round for the ledger.\r\n   */\r\n  public round: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `GetSyncRoundResponse` object.\r\n   * @param round - The minimum sync round for the ledger.\r\n   */\r\n  constructor({ round }: { round: number | bigint }) {\r\n    super();\r\n    this.round = round;\r\n\r\n    this.attribute_map = {\r\n      round: 'round',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): GetSyncRoundResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['round'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'round': ${data}`);\r\n    return new GetSyncRoundResponse({\r\n      round: data['round'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * A single Delta containing the key, the previous value and the current value for\r\n * a single round.\r\n */\r\nexport class KvDelta extends BaseModel {\r\n  /**\r\n   * The key, base64 encoded.\r\n   */\r\n  public key?: Uint8Array;\r\n\r\n  /**\r\n   * The new value of the KV store entry, base64 encoded.\r\n   */\r\n  public value?: Uint8Array;\r\n\r\n  /**\r\n   * Creates a new `KvDelta` object.\r\n   * @param key - The key, base64 encoded.\r\n   * @param value - The new value of the KV store entry, base64 encoded.\r\n   */\r\n  constructor({\r\n    key,\r\n    value,\r\n  }: {\r\n    key?: string | Uint8Array;\r\n    value?: string | Uint8Array;\r\n  }) {\r\n    super();\r\n    this.key =\r\n      typeof key === 'string'\r\n        ? new Uint8Array(Buffer.from(key, 'base64'))\r\n        : key;\r\n    this.value =\r\n      typeof value === 'string'\r\n        ? new Uint8Array(Buffer.from(value, 'base64'))\r\n        : value;\r\n\r\n    this.attribute_map = {\r\n      key: 'key',\r\n      value: 'value',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): KvDelta {\r\n    /* eslint-disable dot-notation */\r\n    return new KvDelta({\r\n      key: data['key'],\r\n      value: data['value'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Contains a ledger delta for a single transaction group\r\n */\r\nexport class LedgerStateDeltaForTransactionGroup extends BaseModel {\r\n  /**\r\n   * Ledger StateDelta object\r\n   */\r\n  public delta: Record<string, any>;\r\n\r\n  public ids: string[];\r\n\r\n  /**\r\n   * Creates a new `LedgerStateDeltaForTransactionGroup` object.\r\n   * @param delta - Ledger StateDelta object\r\n   * @param ids -\r\n   */\r\n  constructor({ delta, ids }: { delta: Record<string, any>; ids: string[] }) {\r\n    super();\r\n    this.delta = delta;\r\n    this.ids = ids;\r\n\r\n    this.attribute_map = {\r\n      delta: 'Delta',\r\n      ids: 'Ids',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): LedgerStateDeltaForTransactionGroup {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['Delta'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'Delta': ${data}`);\r\n    if (!Array.isArray(data['Ids']))\r\n      throw new Error(\r\n        `Response is missing required array field 'Ids': ${data}`\r\n      );\r\n    return new LedgerStateDeltaForTransactionGroup({\r\n      delta: data['Delta'],\r\n      ids: data['Ids'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Proof of membership and position of a light block header.\r\n */\r\nexport class LightBlockHeaderProof extends BaseModel {\r\n  /**\r\n   * The index of the light block header in the vector commitment tree\r\n   */\r\n  public index: number | bigint;\r\n\r\n  /**\r\n   * The encoded proof.\r\n   */\r\n  public proof: Uint8Array;\r\n\r\n  /**\r\n   * Represents the depth of the tree that is being proven, i.e. the number of edges\r\n   * from a leaf to the root.\r\n   */\r\n  public treedepth: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `LightBlockHeaderProof` object.\r\n   * @param index - The index of the light block header in the vector commitment tree\r\n   * @param proof - The encoded proof.\r\n   * @param treedepth - Represents the depth of the tree that is being proven, i.e. the number of edges\r\n   * from a leaf to the root.\r\n   */\r\n  constructor({\r\n    index,\r\n    proof,\r\n    treedepth,\r\n  }: {\r\n    index: number | bigint;\r\n    proof: string | Uint8Array;\r\n    treedepth: number | bigint;\r\n  }) {\r\n    super();\r\n    this.index = index;\r\n    this.proof =\r\n      typeof proof === 'string'\r\n        ? new Uint8Array(Buffer.from(proof, 'base64'))\r\n        : proof;\r\n    this.treedepth = treedepth;\r\n\r\n    this.attribute_map = {\r\n      index: 'index',\r\n      proof: 'proof',\r\n      treedepth: 'treedepth',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): LightBlockHeaderProof {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['index'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'index': ${data}`);\r\n    if (typeof data['proof'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'proof': ${data}`);\r\n    if (typeof data['treedepth'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'treedepth': ${data}`\r\n      );\r\n    return new LightBlockHeaderProof({\r\n      index: data['index'],\r\n      proof: data['proof'],\r\n      treedepth: data['treedepth'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport class NodeStatusResponse extends BaseModel {\r\n  /**\r\n   * CatchupTime in nanoseconds\r\n   */\r\n  public catchupTime: number | bigint;\r\n\r\n  /**\r\n   * LastRound indicates the last round seen\r\n   */\r\n  public lastRound: number | bigint;\r\n\r\n  /**\r\n   * LastVersion indicates the last consensus version supported\r\n   */\r\n  public lastVersion: string;\r\n\r\n  /**\r\n   * NextVersion of consensus protocol to use\r\n   */\r\n  public nextVersion: string;\r\n\r\n  /**\r\n   * NextVersionRound is the round at which the next consensus version will apply\r\n   */\r\n  public nextVersionRound: number | bigint;\r\n\r\n  /**\r\n   * NextVersionSupported indicates whether the next consensus version is supported\r\n   * by this node\r\n   */\r\n  public nextVersionSupported: boolean;\r\n\r\n  /**\r\n   * StoppedAtUnsupportedRound indicates that the node does not support the new\r\n   * rounds and has stopped making progress\r\n   */\r\n  public stoppedAtUnsupportedRound: boolean;\r\n\r\n  /**\r\n   * TimeSinceLastRound in nanoseconds\r\n   */\r\n  public timeSinceLastRound: number | bigint;\r\n\r\n  /**\r\n   * The current catchpoint that is being caught up to\r\n   */\r\n  public catchpoint?: string;\r\n\r\n  /**\r\n   * The number of blocks that have already been obtained by the node as part of the\r\n   * catchup\r\n   */\r\n  public catchpointAcquiredBlocks?: number | bigint;\r\n\r\n  /**\r\n   * The number of accounts from the current catchpoint that have been processed so\r\n   * far as part of the catchup\r\n   */\r\n  public catchpointProcessedAccounts?: number | bigint;\r\n\r\n  /**\r\n   * The number of key-values (KVs) from the current catchpoint that have been\r\n   * processed so far as part of the catchup\r\n   */\r\n  public catchpointProcessedKvs?: number | bigint;\r\n\r\n  /**\r\n   * The total number of accounts included in the current catchpoint\r\n   */\r\n  public catchpointTotalAccounts?: number | bigint;\r\n\r\n  /**\r\n   * The total number of blocks that are required to complete the current catchpoint\r\n   * catchup\r\n   */\r\n  public catchpointTotalBlocks?: number | bigint;\r\n\r\n  /**\r\n   * The total number of key-values (KVs) included in the current catchpoint\r\n   */\r\n  public catchpointTotalKvs?: number | bigint;\r\n\r\n  /**\r\n   * The number of accounts from the current catchpoint that have been verified so\r\n   * far as part of the catchup\r\n   */\r\n  public catchpointVerifiedAccounts?: number | bigint;\r\n\r\n  /**\r\n   * The number of key-values (KVs) from the current catchpoint that have been\r\n   * verified so far as part of the catchup\r\n   */\r\n  public catchpointVerifiedKvs?: number | bigint;\r\n\r\n  /**\r\n   * The last catchpoint seen by the node\r\n   */\r\n  public lastCatchpoint?: string;\r\n\r\n  /**\r\n   * Upgrade delay\r\n   */\r\n  public upgradeDelay?: number | bigint;\r\n\r\n  /**\r\n   * Next protocol round\r\n   */\r\n  public upgradeNextProtocolVoteBefore?: number | bigint;\r\n\r\n  /**\r\n   * No votes cast for consensus upgrade\r\n   */\r\n  public upgradeNoVotes?: number | bigint;\r\n\r\n  /**\r\n   * This node's upgrade vote\r\n   */\r\n  public upgradeNodeVote?: boolean;\r\n\r\n  /**\r\n   * Total voting rounds for current upgrade\r\n   */\r\n  public upgradeVoteRounds?: number | bigint;\r\n\r\n  /**\r\n   * Total votes cast for consensus upgrade\r\n   */\r\n  public upgradeVotes?: number | bigint;\r\n\r\n  /**\r\n   * Yes votes required for consensus upgrade\r\n   */\r\n  public upgradeVotesRequired?: number | bigint;\r\n\r\n  /**\r\n   * Yes votes cast for consensus upgrade\r\n   */\r\n  public upgradeYesVotes?: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `NodeStatusResponse` object.\r\n   * @param catchupTime - CatchupTime in nanoseconds\r\n   * @param lastRound - LastRound indicates the last round seen\r\n   * @param lastVersion - LastVersion indicates the last consensus version supported\r\n   * @param nextVersion - NextVersion of consensus protocol to use\r\n   * @param nextVersionRound - NextVersionRound is the round at which the next consensus version will apply\r\n   * @param nextVersionSupported - NextVersionSupported indicates whether the next consensus version is supported\r\n   * by this node\r\n   * @param stoppedAtUnsupportedRound - StoppedAtUnsupportedRound indicates that the node does not support the new\r\n   * rounds and has stopped making progress\r\n   * @param timeSinceLastRound - TimeSinceLastRound in nanoseconds\r\n   * @param catchpoint - The current catchpoint that is being caught up to\r\n   * @param catchpointAcquiredBlocks - The number of blocks that have already been obtained by the node as part of the\r\n   * catchup\r\n   * @param catchpointProcessedAccounts - The number of accounts from the current catchpoint that have been processed so\r\n   * far as part of the catchup\r\n   * @param catchpointProcessedKvs - The number of key-values (KVs) from the current catchpoint that have been\r\n   * processed so far as part of the catchup\r\n   * @param catchpointTotalAccounts - The total number of accounts included in the current catchpoint\r\n   * @param catchpointTotalBlocks - The total number of blocks that are required to complete the current catchpoint\r\n   * catchup\r\n   * @param catchpointTotalKvs - The total number of key-values (KVs) included in the current catchpoint\r\n   * @param catchpointVerifiedAccounts - The number of accounts from the current catchpoint that have been verified so\r\n   * far as part of the catchup\r\n   * @param catchpointVerifiedKvs - The number of key-values (KVs) from the current catchpoint that have been\r\n   * verified so far as part of the catchup\r\n   * @param lastCatchpoint - The last catchpoint seen by the node\r\n   * @param upgradeDelay - Upgrade delay\r\n   * @param upgradeNextProtocolVoteBefore - Next protocol round\r\n   * @param upgradeNoVotes - No votes cast for consensus upgrade\r\n   * @param upgradeNodeVote - This node's upgrade vote\r\n   * @param upgradeVoteRounds - Total voting rounds for current upgrade\r\n   * @param upgradeVotes - Total votes cast for consensus upgrade\r\n   * @param upgradeVotesRequired - Yes votes required for consensus upgrade\r\n   * @param upgradeYesVotes - Yes votes cast for consensus upgrade\r\n   */\r\n  constructor({\r\n    catchupTime,\r\n    lastRound,\r\n    lastVersion,\r\n    nextVersion,\r\n    nextVersionRound,\r\n    nextVersionSupported,\r\n    stoppedAtUnsupportedRound,\r\n    timeSinceLastRound,\r\n    catchpoint,\r\n    catchpointAcquiredBlocks,\r\n    catchpointProcessedAccounts,\r\n    catchpointProcessedKvs,\r\n    catchpointTotalAccounts,\r\n    catchpointTotalBlocks,\r\n    catchpointTotalKvs,\r\n    catchpointVerifiedAccounts,\r\n    catchpointVerifiedKvs,\r\n    lastCatchpoint,\r\n    upgradeDelay,\r\n    upgradeNextProtocolVoteBefore,\r\n    upgradeNoVotes,\r\n    upgradeNodeVote,\r\n    upgradeVoteRounds,\r\n    upgradeVotes,\r\n    upgradeVotesRequired,\r\n    upgradeYesVotes,\r\n  }: {\r\n    catchupTime: number | bigint;\r\n    lastRound: number | bigint;\r\n    lastVersion: string;\r\n    nextVersion: string;\r\n    nextVersionRound: number | bigint;\r\n    nextVersionSupported: boolean;\r\n    stoppedAtUnsupportedRound: boolean;\r\n    timeSinceLastRound: number | bigint;\r\n    catchpoint?: string;\r\n    catchpointAcquiredBlocks?: number | bigint;\r\n    catchpointProcessedAccounts?: number | bigint;\r\n    catchpointProcessedKvs?: number | bigint;\r\n    catchpointTotalAccounts?: number | bigint;\r\n    catchpointTotalBlocks?: number | bigint;\r\n    catchpointTotalKvs?: number | bigint;\r\n    catchpointVerifiedAccounts?: number | bigint;\r\n    catchpointVerifiedKvs?: number | bigint;\r\n    lastCatchpoint?: string;\r\n    upgradeDelay?: number | bigint;\r\n    upgradeNextProtocolVoteBefore?: number | bigint;\r\n    upgradeNoVotes?: number | bigint;\r\n    upgradeNodeVote?: boolean;\r\n    upgradeVoteRounds?: number | bigint;\r\n    upgradeVotes?: number | bigint;\r\n    upgradeVotesRequired?: number | bigint;\r\n    upgradeYesVotes?: number | bigint;\r\n  }) {\r\n    super();\r\n    this.catchupTime = catchupTime;\r\n    this.lastRound = lastRound;\r\n    this.lastVersion = lastVersion;\r\n    this.nextVersion = nextVersion;\r\n    this.nextVersionRound = nextVersionRound;\r\n    this.nextVersionSupported = nextVersionSupported;\r\n    this.stoppedAtUnsupportedRound = stoppedAtUnsupportedRound;\r\n    this.timeSinceLastRound = timeSinceLastRound;\r\n    this.catchpoint = catchpoint;\r\n    this.catchpointAcquiredBlocks = catchpointAcquiredBlocks;\r\n    this.catchpointProcessedAccounts = catchpointProcessedAccounts;\r\n    this.catchpointProcessedKvs = catchpointProcessedKvs;\r\n    this.catchpointTotalAccounts = catchpointTotalAccounts;\r\n    this.catchpointTotalBlocks = catchpointTotalBlocks;\r\n    this.catchpointTotalKvs = catchpointTotalKvs;\r\n    this.catchpointVerifiedAccounts = catchpointVerifiedAccounts;\r\n    this.catchpointVerifiedKvs = catchpointVerifiedKvs;\r\n    this.lastCatchpoint = lastCatchpoint;\r\n    this.upgradeDelay = upgradeDelay;\r\n    this.upgradeNextProtocolVoteBefore = upgradeNextProtocolVoteBefore;\r\n    this.upgradeNoVotes = upgradeNoVotes;\r\n    this.upgradeNodeVote = upgradeNodeVote;\r\n    this.upgradeVoteRounds = upgradeVoteRounds;\r\n    this.upgradeVotes = upgradeVotes;\r\n    this.upgradeVotesRequired = upgradeVotesRequired;\r\n    this.upgradeYesVotes = upgradeYesVotes;\r\n\r\n    this.attribute_map = {\r\n      catchupTime: 'catchup-time',\r\n      lastRound: 'last-round',\r\n      lastVersion: 'last-version',\r\n      nextVersion: 'next-version',\r\n      nextVersionRound: 'next-version-round',\r\n      nextVersionSupported: 'next-version-supported',\r\n      stoppedAtUnsupportedRound: 'stopped-at-unsupported-round',\r\n      timeSinceLastRound: 'time-since-last-round',\r\n      catchpoint: 'catchpoint',\r\n      catchpointAcquiredBlocks: 'catchpoint-acquired-blocks',\r\n      catchpointProcessedAccounts: 'catchpoint-processed-accounts',\r\n      catchpointProcessedKvs: 'catchpoint-processed-kvs',\r\n      catchpointTotalAccounts: 'catchpoint-total-accounts',\r\n      catchpointTotalBlocks: 'catchpoint-total-blocks',\r\n      catchpointTotalKvs: 'catchpoint-total-kvs',\r\n      catchpointVerifiedAccounts: 'catchpoint-verified-accounts',\r\n      catchpointVerifiedKvs: 'catchpoint-verified-kvs',\r\n      lastCatchpoint: 'last-catchpoint',\r\n      upgradeDelay: 'upgrade-delay',\r\n      upgradeNextProtocolVoteBefore: 'upgrade-next-protocol-vote-before',\r\n      upgradeNoVotes: 'upgrade-no-votes',\r\n      upgradeNodeVote: 'upgrade-node-vote',\r\n      upgradeVoteRounds: 'upgrade-vote-rounds',\r\n      upgradeVotes: 'upgrade-votes',\r\n      upgradeVotesRequired: 'upgrade-votes-required',\r\n      upgradeYesVotes: 'upgrade-yes-votes',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): NodeStatusResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['catchup-time'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'catchup-time': ${data}`\r\n      );\r\n    if (typeof data['last-round'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'last-round': ${data}`\r\n      );\r\n    if (typeof data['last-version'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'last-version': ${data}`\r\n      );\r\n    if (typeof data['next-version'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'next-version': ${data}`\r\n      );\r\n    if (typeof data['next-version-round'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'next-version-round': ${data}`\r\n      );\r\n    if (typeof data['next-version-supported'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'next-version-supported': ${data}`\r\n      );\r\n    if (typeof data['stopped-at-unsupported-round'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'stopped-at-unsupported-round': ${data}`\r\n      );\r\n    if (typeof data['time-since-last-round'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'time-since-last-round': ${data}`\r\n      );\r\n    return new NodeStatusResponse({\r\n      catchupTime: data['catchup-time'],\r\n      lastRound: data['last-round'],\r\n      lastVersion: data['last-version'],\r\n      nextVersion: data['next-version'],\r\n      nextVersionRound: data['next-version-round'],\r\n      nextVersionSupported: data['next-version-supported'],\r\n      stoppedAtUnsupportedRound: data['stopped-at-unsupported-round'],\r\n      timeSinceLastRound: data['time-since-last-round'],\r\n      catchpoint: data['catchpoint'],\r\n      catchpointAcquiredBlocks: data['catchpoint-acquired-blocks'],\r\n      catchpointProcessedAccounts: data['catchpoint-processed-accounts'],\r\n      catchpointProcessedKvs: data['catchpoint-processed-kvs'],\r\n      catchpointTotalAccounts: data['catchpoint-total-accounts'],\r\n      catchpointTotalBlocks: data['catchpoint-total-blocks'],\r\n      catchpointTotalKvs: data['catchpoint-total-kvs'],\r\n      catchpointVerifiedAccounts: data['catchpoint-verified-accounts'],\r\n      catchpointVerifiedKvs: data['catchpoint-verified-kvs'],\r\n      lastCatchpoint: data['last-catchpoint'],\r\n      upgradeDelay: data['upgrade-delay'],\r\n      upgradeNextProtocolVoteBefore: data['upgrade-next-protocol-vote-before'],\r\n      upgradeNoVotes: data['upgrade-no-votes'],\r\n      upgradeNodeVote: data['upgrade-node-vote'],\r\n      upgradeVoteRounds: data['upgrade-vote-rounds'],\r\n      upgradeVotes: data['upgrade-votes'],\r\n      upgradeVotesRequired: data['upgrade-votes-required'],\r\n      upgradeYesVotes: data['upgrade-yes-votes'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Details about a pending transaction. If the transaction was recently confirmed,\r\n * includes confirmation details like the round and reward details.\r\n */\r\nexport class PendingTransactionResponse extends BaseModel {\r\n  /**\r\n   * Indicates that the transaction was kicked out of this node's transaction pool\r\n   * (and specifies why that happened). An empty string indicates the transaction\r\n   * wasn't kicked out of this node's txpool due to an error.\r\n   */\r\n  public poolError: string;\r\n\r\n  /**\r\n   * The raw signed transaction.\r\n   */\r\n  public txn: EncodedSignedTransaction;\r\n\r\n  /**\r\n   * The application index if the transaction was found and it created an\r\n   * application.\r\n   */\r\n  public applicationIndex?: number | bigint;\r\n\r\n  /**\r\n   * The number of the asset's unit that were transferred to the close-to address.\r\n   */\r\n  public assetClosingAmount?: number | bigint;\r\n\r\n  /**\r\n   * The asset index if the transaction was found and it created an asset.\r\n   */\r\n  public assetIndex?: number | bigint;\r\n\r\n  /**\r\n   * Rewards in microalgos applied to the close remainder to account.\r\n   */\r\n  public closeRewards?: number | bigint;\r\n\r\n  /**\r\n   * Closing amount for the transaction.\r\n   */\r\n  public closingAmount?: number | bigint;\r\n\r\n  /**\r\n   * The round where this transaction was confirmed, if present.\r\n   */\r\n  public confirmedRound?: number | bigint;\r\n\r\n  /**\r\n   * Global state key/value changes for the application being executed by this\r\n   * transaction.\r\n   */\r\n  public globalStateDelta?: EvalDeltaKeyValue[];\r\n\r\n  /**\r\n   * Inner transactions produced by application execution.\r\n   */\r\n  public innerTxns?: PendingTransactionResponse[];\r\n\r\n  /**\r\n   * Local state key/value changes for the application being executed by this\r\n   * transaction.\r\n   */\r\n  public localStateDelta?: AccountStateDelta[];\r\n\r\n  /**\r\n   * Logs for the application being executed by this transaction.\r\n   */\r\n  public logs?: Uint8Array[];\r\n\r\n  /**\r\n   * Rewards in microalgos applied to the receiver account.\r\n   */\r\n  public receiverRewards?: number | bigint;\r\n\r\n  /**\r\n   * Rewards in microalgos applied to the sender account.\r\n   */\r\n  public senderRewards?: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `PendingTransactionResponse` object.\r\n   * @param poolError - Indicates that the transaction was kicked out of this node's transaction pool\r\n   * (and specifies why that happened). An empty string indicates the transaction\r\n   * wasn't kicked out of this node's txpool due to an error.\r\n   * @param txn - The raw signed transaction.\r\n   * @param applicationIndex - The application index if the transaction was found and it created an\r\n   * application.\r\n   * @param assetClosingAmount - The number of the asset's unit that were transferred to the close-to address.\r\n   * @param assetIndex - The asset index if the transaction was found and it created an asset.\r\n   * @param closeRewards - Rewards in microalgos applied to the close remainder to account.\r\n   * @param closingAmount - Closing amount for the transaction.\r\n   * @param confirmedRound - The round where this transaction was confirmed, if present.\r\n   * @param globalStateDelta - Global state key/value changes for the application being executed by this\r\n   * transaction.\r\n   * @param innerTxns - Inner transactions produced by application execution.\r\n   * @param localStateDelta - Local state key/value changes for the application being executed by this\r\n   * transaction.\r\n   * @param logs - Logs for the application being executed by this transaction.\r\n   * @param receiverRewards - Rewards in microalgos applied to the receiver account.\r\n   * @param senderRewards - Rewards in microalgos applied to the sender account.\r\n   */\r\n  constructor({\r\n    poolError,\r\n    txn,\r\n    applicationIndex,\r\n    assetClosingAmount,\r\n    assetIndex,\r\n    closeRewards,\r\n    closingAmount,\r\n    confirmedRound,\r\n    globalStateDelta,\r\n    innerTxns,\r\n    localStateDelta,\r\n    logs,\r\n    receiverRewards,\r\n    senderRewards,\r\n  }: {\r\n    poolError: string;\r\n    txn: EncodedSignedTransaction;\r\n    applicationIndex?: number | bigint;\r\n    assetClosingAmount?: number | bigint;\r\n    assetIndex?: number | bigint;\r\n    closeRewards?: number | bigint;\r\n    closingAmount?: number | bigint;\r\n    confirmedRound?: number | bigint;\r\n    globalStateDelta?: EvalDeltaKeyValue[];\r\n    innerTxns?: PendingTransactionResponse[];\r\n    localStateDelta?: AccountStateDelta[];\r\n    logs?: Uint8Array[];\r\n    receiverRewards?: number | bigint;\r\n    senderRewards?: number | bigint;\r\n  }) {\r\n    super();\r\n    this.poolError = poolError;\r\n    this.txn = txn;\r\n    this.applicationIndex = applicationIndex;\r\n    this.assetClosingAmount = assetClosingAmount;\r\n    this.assetIndex = assetIndex;\r\n    this.closeRewards = closeRewards;\r\n    this.closingAmount = closingAmount;\r\n    this.confirmedRound = confirmedRound;\r\n    this.globalStateDelta = globalStateDelta;\r\n    this.innerTxns = innerTxns;\r\n    this.localStateDelta = localStateDelta;\r\n    this.logs = logs;\r\n    this.receiverRewards = receiverRewards;\r\n    this.senderRewards = senderRewards;\r\n\r\n    this.attribute_map = {\r\n      poolError: 'pool-error',\r\n      txn: 'txn',\r\n      applicationIndex: 'application-index',\r\n      assetClosingAmount: 'asset-closing-amount',\r\n      assetIndex: 'asset-index',\r\n      closeRewards: 'close-rewards',\r\n      closingAmount: 'closing-amount',\r\n      confirmedRound: 'confirmed-round',\r\n      globalStateDelta: 'global-state-delta',\r\n      innerTxns: 'inner-txns',\r\n      localStateDelta: 'local-state-delta',\r\n      logs: 'logs',\r\n      receiverRewards: 'receiver-rewards',\r\n      senderRewards: 'sender-rewards',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): PendingTransactionResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['pool-error'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'pool-error': ${data}`\r\n      );\r\n    if (typeof data['txn'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'txn': ${data}`);\r\n    return new PendingTransactionResponse({\r\n      poolError: data['pool-error'],\r\n      txn: data['txn'],\r\n      applicationIndex: data['application-index'],\r\n      assetClosingAmount: data['asset-closing-amount'],\r\n      assetIndex: data['asset-index'],\r\n      closeRewards: data['close-rewards'],\r\n      closingAmount: data['closing-amount'],\r\n      confirmedRound: data['confirmed-round'],\r\n      globalStateDelta:\r\n        typeof data['global-state-delta'] !== 'undefined'\r\n          ? data['global-state-delta'].map(\r\n              EvalDeltaKeyValue.from_obj_for_encoding\r\n            )\r\n          : undefined,\r\n      innerTxns:\r\n        typeof data['inner-txns'] !== 'undefined'\r\n          ? data['inner-txns'].map(\r\n              PendingTransactionResponse.from_obj_for_encoding\r\n            )\r\n          : undefined,\r\n      localStateDelta:\r\n        typeof data['local-state-delta'] !== 'undefined'\r\n          ? data['local-state-delta'].map(\r\n              AccountStateDelta.from_obj_for_encoding\r\n            )\r\n          : undefined,\r\n      logs: data['logs'],\r\n      receiverRewards: data['receiver-rewards'],\r\n      senderRewards: data['sender-rewards'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * A potentially truncated list of transactions currently in the node's transaction\r\n * pool. You can compute whether or not the list is truncated if the number of\r\n * elements in the **top-transactions** array is fewer than **total-transactions**.\r\n */\r\nexport class PendingTransactionsResponse extends BaseModel {\r\n  /**\r\n   * An array of signed transaction objects.\r\n   */\r\n  public topTransactions: EncodedSignedTransaction[];\r\n\r\n  /**\r\n   * Total number of transactions in the pool.\r\n   */\r\n  public totalTransactions: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `PendingTransactionsResponse` object.\r\n   * @param topTransactions - An array of signed transaction objects.\r\n   * @param totalTransactions - Total number of transactions in the pool.\r\n   */\r\n  constructor({\r\n    topTransactions,\r\n    totalTransactions,\r\n  }: {\r\n    topTransactions: EncodedSignedTransaction[];\r\n    totalTransactions: number | bigint;\r\n  }) {\r\n    super();\r\n    this.topTransactions = topTransactions;\r\n    this.totalTransactions = totalTransactions;\r\n\r\n    this.attribute_map = {\r\n      topTransactions: 'top-transactions',\r\n      totalTransactions: 'total-transactions',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): PendingTransactionsResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (!Array.isArray(data['top-transactions']))\r\n      throw new Error(\r\n        `Response is missing required array field 'top-transactions': ${data}`\r\n      );\r\n    if (typeof data['total-transactions'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'total-transactions': ${data}`\r\n      );\r\n    return new PendingTransactionsResponse({\r\n      topTransactions: data['top-transactions'],\r\n      totalTransactions: data['total-transactions'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Transaction ID of the submission.\r\n */\r\nexport class PostTransactionsResponse extends BaseModel {\r\n  /**\r\n   * encoding of the transaction hash.\r\n   */\r\n  public txid: string;\r\n\r\n  /**\r\n   * Creates a new `PostTransactionsResponse` object.\r\n   * @param txid - encoding of the transaction hash.\r\n   */\r\n  constructor({ txid }: { txid: string }) {\r\n    super();\r\n    this.txid = txid;\r\n\r\n    this.attribute_map = {\r\n      txid: 'txId',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): PostTransactionsResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['txId'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'txId': ${data}`);\r\n    return new PostTransactionsResponse({\r\n      txid: data['txId'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * A write operation into a scratch slot.\r\n */\r\nexport class ScratchChange extends BaseModel {\r\n  /**\r\n   * Represents an AVM value.\r\n   */\r\n  public newValue: AvmValue;\r\n\r\n  /**\r\n   * The scratch slot written.\r\n   */\r\n  public slot: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `ScratchChange` object.\r\n   * @param newValue - Represents an AVM value.\r\n   * @param slot - The scratch slot written.\r\n   */\r\n  constructor({\r\n    newValue,\r\n    slot,\r\n  }: {\r\n    newValue: AvmValue;\r\n    slot: number | bigint;\r\n  }) {\r\n    super();\r\n    this.newValue = newValue;\r\n    this.slot = slot;\r\n\r\n    this.attribute_map = {\r\n      newValue: 'new-value',\r\n      slot: 'slot',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): ScratchChange {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['new-value'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'new-value': ${data}`\r\n      );\r\n    if (typeof data['slot'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'slot': ${data}`);\r\n    return new ScratchChange({\r\n      newValue: AvmValue.from_obj_for_encoding(data['new-value']),\r\n      slot: data['slot'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Initial states of resources that were accessed during simulation.\r\n */\r\nexport class SimulateInitialStates extends BaseModel {\r\n  /**\r\n   * The initial states of accessed application before simulation. The order of this\r\n   * array is arbitrary.\r\n   */\r\n  public appInitialStates?: ApplicationInitialStates[];\r\n\r\n  /**\r\n   * Creates a new `SimulateInitialStates` object.\r\n   * @param appInitialStates - The initial states of accessed application before simulation. The order of this\r\n   * array is arbitrary.\r\n   */\r\n  constructor({\r\n    appInitialStates,\r\n  }: {\r\n    appInitialStates?: ApplicationInitialStates[];\r\n  }) {\r\n    super();\r\n    this.appInitialStates = appInitialStates;\r\n\r\n    this.attribute_map = {\r\n      appInitialStates: 'app-initial-states',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): SimulateInitialStates {\r\n    /* eslint-disable dot-notation */\r\n    return new SimulateInitialStates({\r\n      appInitialStates:\r\n        typeof data['app-initial-states'] !== 'undefined'\r\n          ? data['app-initial-states'].map(\r\n              ApplicationInitialStates.from_obj_for_encoding\r\n            )\r\n          : undefined,\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Request type for simulation endpoint.\r\n */\r\nexport class SimulateRequest extends BaseModel {\r\n  /**\r\n   * The transaction groups to simulate.\r\n   */\r\n  public txnGroups: SimulateRequestTransactionGroup[];\r\n\r\n  /**\r\n   * Allows transactions without signatures to be simulated as if they had correct\r\n   * signatures.\r\n   */\r\n  public allowEmptySignatures?: boolean;\r\n\r\n  /**\r\n   * Lifts limits on log opcode usage during simulation.\r\n   */\r\n  public allowMoreLogging?: boolean;\r\n\r\n  /**\r\n   * Allows access to unnamed resources during simulation.\r\n   */\r\n  public allowUnnamedResources?: boolean;\r\n\r\n  /**\r\n   * An object that configures simulation execution trace.\r\n   */\r\n  public execTraceConfig?: SimulateTraceConfig;\r\n\r\n  /**\r\n   * Applies extra opcode budget during simulation for each transaction group.\r\n   */\r\n  public extraOpcodeBudget?: number | bigint;\r\n\r\n  /**\r\n   * If true, signers for transactions that are missing signatures will be fixed\r\n   * during evaluation.\r\n   */\r\n  public fixSigners?: boolean;\r\n\r\n  /**\r\n   * If provided, specifies the round preceding the simulation. State changes through\r\n   * this round will be used to run this simulation. Usually only the 4 most recent\r\n   * rounds will be available (controlled by the node config value MaxAcctLookback).\r\n   * If not specified, defaults to the latest available round.\r\n   */\r\n  public round?: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `SimulateRequest` object.\r\n   * @param txnGroups - The transaction groups to simulate.\r\n   * @param allowEmptySignatures - Allows transactions without signatures to be simulated as if they had correct\r\n   * signatures.\r\n   * @param allowMoreLogging - Lifts limits on log opcode usage during simulation.\r\n   * @param allowUnnamedResources - Allows access to unnamed resources during simulation.\r\n   * @param execTraceConfig - An object that configures simulation execution trace.\r\n   * @param extraOpcodeBudget - Applies extra opcode budget during simulation for each transaction group.\r\n   * @param fixSigners - If true, signers for transactions that are missing signatures will be fixed\r\n   * during evaluation.\r\n   * @param round - If provided, specifies the round preceding the simulation. State changes through\r\n   * this round will be used to run this simulation. Usually only the 4 most recent\r\n   * rounds will be available (controlled by the node config value MaxAcctLookback).\r\n   * If not specified, defaults to the latest available round.\r\n   */\r\n  constructor({\r\n    txnGroups,\r\n    allowEmptySignatures,\r\n    allowMoreLogging,\r\n    allowUnnamedResources,\r\n    execTraceConfig,\r\n    extraOpcodeBudget,\r\n    fixSigners,\r\n    round,\r\n  }: {\r\n    txnGroups: SimulateRequestTransactionGroup[];\r\n    allowEmptySignatures?: boolean;\r\n    allowMoreLogging?: boolean;\r\n    allowUnnamedResources?: boolean;\r\n    execTraceConfig?: SimulateTraceConfig;\r\n    extraOpcodeBudget?: number | bigint;\r\n    fixSigners?: boolean;\r\n    round?: number | bigint;\r\n  }) {\r\n    super();\r\n    this.txnGroups = txnGroups;\r\n    this.allowEmptySignatures = allowEmptySignatures;\r\n    this.allowMoreLogging = allowMoreLogging;\r\n    this.allowUnnamedResources = allowUnnamedResources;\r\n    this.execTraceConfig = execTraceConfig;\r\n    this.extraOpcodeBudget = extraOpcodeBudget;\r\n    this.fixSigners = fixSigners;\r\n    this.round = round;\r\n\r\n    this.attribute_map = {\r\n      txnGroups: 'txn-groups',\r\n      allowEmptySignatures: 'allow-empty-signatures',\r\n      allowMoreLogging: 'allow-more-logging',\r\n      allowUnnamedResources: 'allow-unnamed-resources',\r\n      execTraceConfig: 'exec-trace-config',\r\n      extraOpcodeBudget: 'extra-opcode-budget',\r\n      fixSigners: 'fix-signers',\r\n      round: 'round',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): SimulateRequest {\r\n    /* eslint-disable dot-notation */\r\n    if (!Array.isArray(data['txn-groups']))\r\n      throw new Error(\r\n        `Response is missing required array field 'txn-groups': ${data}`\r\n      );\r\n    return new SimulateRequest({\r\n      txnGroups: data['txn-groups'].map(\r\n        SimulateRequestTransactionGroup.from_obj_for_encoding\r\n      ),\r\n      allowEmptySignatures: data['allow-empty-signatures'],\r\n      allowMoreLogging: data['allow-more-logging'],\r\n      allowUnnamedResources: data['allow-unnamed-resources'],\r\n      execTraceConfig:\r\n        typeof data['exec-trace-config'] !== 'undefined'\r\n          ? SimulateTraceConfig.from_obj_for_encoding(data['exec-trace-config'])\r\n          : undefined,\r\n      extraOpcodeBudget: data['extra-opcode-budget'],\r\n      fixSigners: data['fix-signers'],\r\n      round: data['round'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * A transaction group to simulate.\r\n */\r\nexport class SimulateRequestTransactionGroup extends BaseModel {\r\n  /**\r\n   * An atomic transaction group.\r\n   */\r\n  public txns: EncodedSignedTransaction[];\r\n\r\n  /**\r\n   * Creates a new `SimulateRequestTransactionGroup` object.\r\n   * @param txns - An atomic transaction group.\r\n   */\r\n  constructor({ txns }: { txns: EncodedSignedTransaction[] }) {\r\n    super();\r\n    this.txns = txns;\r\n\r\n    this.attribute_map = {\r\n      txns: 'txns',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): SimulateRequestTransactionGroup {\r\n    /* eslint-disable dot-notation */\r\n    if (!Array.isArray(data['txns']))\r\n      throw new Error(\r\n        `Response is missing required array field 'txns': ${data}`\r\n      );\r\n    return new SimulateRequestTransactionGroup({\r\n      txns: data['txns'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Result of a transaction group simulation.\r\n */\r\nexport class SimulateResponse extends BaseModel {\r\n  /**\r\n   * The round immediately preceding this simulation. State changes through this\r\n   * round were used to run this simulation.\r\n   */\r\n  public lastRound: number | bigint;\r\n\r\n  /**\r\n   * A result object for each transaction group that was simulated.\r\n   */\r\n  public txnGroups: SimulateTransactionGroupResult[];\r\n\r\n  /**\r\n   * The version of this response object.\r\n   */\r\n  public version: number | bigint;\r\n\r\n  /**\r\n   * The set of parameters and limits override during simulation. If this set of\r\n   * parameters is present, then evaluation parameters may differ from standard\r\n   * evaluation in certain ways.\r\n   */\r\n  public evalOverrides?: SimulationEvalOverrides;\r\n\r\n  /**\r\n   * An object that configures simulation execution trace.\r\n   */\r\n  public execTraceConfig?: SimulateTraceConfig;\r\n\r\n  /**\r\n   * Initial states of resources that were accessed during simulation.\r\n   */\r\n  public initialStates?: SimulateInitialStates;\r\n\r\n  /**\r\n   * Creates a new `SimulateResponse` object.\r\n   * @param lastRound - The round immediately preceding this simulation. State changes through this\r\n   * round were used to run this simulation.\r\n   * @param txnGroups - A result object for each transaction group that was simulated.\r\n   * @param version - The version of this response object.\r\n   * @param evalOverrides - The set of parameters and limits override during simulation. If this set of\r\n   * parameters is present, then evaluation parameters may differ from standard\r\n   * evaluation in certain ways.\r\n   * @param execTraceConfig - An object that configures simulation execution trace.\r\n   * @param initialStates - Initial states of resources that were accessed during simulation.\r\n   */\r\n  constructor({\r\n    lastRound,\r\n    txnGroups,\r\n    version,\r\n    evalOverrides,\r\n    execTraceConfig,\r\n    initialStates,\r\n  }: {\r\n    lastRound: number | bigint;\r\n    txnGroups: SimulateTransactionGroupResult[];\r\n    version: number | bigint;\r\n    evalOverrides?: SimulationEvalOverrides;\r\n    execTraceConfig?: SimulateTraceConfig;\r\n    initialStates?: SimulateInitialStates;\r\n  }) {\r\n    super();\r\n    this.lastRound = lastRound;\r\n    this.txnGroups = txnGroups;\r\n    this.version = version;\r\n    this.evalOverrides = evalOverrides;\r\n    this.execTraceConfig = execTraceConfig;\r\n    this.initialStates = initialStates;\r\n\r\n    this.attribute_map = {\r\n      lastRound: 'last-round',\r\n      txnGroups: 'txn-groups',\r\n      version: 'version',\r\n      evalOverrides: 'eval-overrides',\r\n      execTraceConfig: 'exec-trace-config',\r\n      initialStates: 'initial-states',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): SimulateResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['last-round'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'last-round': ${data}`\r\n      );\r\n    if (!Array.isArray(data['txn-groups']))\r\n      throw new Error(\r\n        `Response is missing required array field 'txn-groups': ${data}`\r\n      );\r\n    if (typeof data['version'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'version': ${data}`);\r\n    return new SimulateResponse({\r\n      lastRound: data['last-round'],\r\n      txnGroups: data['txn-groups'].map(\r\n        SimulateTransactionGroupResult.from_obj_for_encoding\r\n      ),\r\n      version: data['version'],\r\n      evalOverrides:\r\n        typeof data['eval-overrides'] !== 'undefined'\r\n          ? SimulationEvalOverrides.from_obj_for_encoding(\r\n              data['eval-overrides']\r\n            )\r\n          : undefined,\r\n      execTraceConfig:\r\n        typeof data['exec-trace-config'] !== 'undefined'\r\n          ? SimulateTraceConfig.from_obj_for_encoding(data['exec-trace-config'])\r\n          : undefined,\r\n      initialStates:\r\n        typeof data['initial-states'] !== 'undefined'\r\n          ? SimulateInitialStates.from_obj_for_encoding(data['initial-states'])\r\n          : undefined,\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * An object that configures simulation execution trace.\r\n */\r\nexport class SimulateTraceConfig extends BaseModel {\r\n  /**\r\n   * A boolean option for opting in execution trace features simulation endpoint.\r\n   */\r\n  public enable?: boolean;\r\n\r\n  /**\r\n   * A boolean option enabling returning scratch slot changes together with execution\r\n   * trace during simulation.\r\n   */\r\n  public scratchChange?: boolean;\r\n\r\n  /**\r\n   * A boolean option enabling returning stack changes together with execution trace\r\n   * during simulation.\r\n   */\r\n  public stackChange?: boolean;\r\n\r\n  /**\r\n   * A boolean option enabling returning application state changes (global, local,\r\n   * and box changes) with the execution trace during simulation.\r\n   */\r\n  public stateChange?: boolean;\r\n\r\n  /**\r\n   * Creates a new `SimulateTraceConfig` object.\r\n   * @param enable - A boolean option for opting in execution trace features simulation endpoint.\r\n   * @param scratchChange - A boolean option enabling returning scratch slot changes together with execution\r\n   * trace during simulation.\r\n   * @param stackChange - A boolean option enabling returning stack changes together with execution trace\r\n   * during simulation.\r\n   * @param stateChange - A boolean option enabling returning application state changes (global, local,\r\n   * and box changes) with the execution trace during simulation.\r\n   */\r\n  constructor({\r\n    enable,\r\n    scratchChange,\r\n    stackChange,\r\n    stateChange,\r\n  }: {\r\n    enable?: boolean;\r\n    scratchChange?: boolean;\r\n    stackChange?: boolean;\r\n    stateChange?: boolean;\r\n  }) {\r\n    super();\r\n    this.enable = enable;\r\n    this.scratchChange = scratchChange;\r\n    this.stackChange = stackChange;\r\n    this.stateChange = stateChange;\r\n\r\n    this.attribute_map = {\r\n      enable: 'enable',\r\n      scratchChange: 'scratch-change',\r\n      stackChange: 'stack-change',\r\n      stateChange: 'state-change',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): SimulateTraceConfig {\r\n    /* eslint-disable dot-notation */\r\n    return new SimulateTraceConfig({\r\n      enable: data['enable'],\r\n      scratchChange: data['scratch-change'],\r\n      stackChange: data['stack-change'],\r\n      stateChange: data['state-change'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Simulation result for an atomic transaction group\r\n */\r\nexport class SimulateTransactionGroupResult extends BaseModel {\r\n  /**\r\n   * Simulation result for individual transactions\r\n   */\r\n  public txnResults: SimulateTransactionResult[];\r\n\r\n  /**\r\n   * Total budget added during execution of app calls in the transaction group.\r\n   */\r\n  public appBudgetAdded?: number | bigint;\r\n\r\n  /**\r\n   * Total budget consumed during execution of app calls in the transaction group.\r\n   */\r\n  public appBudgetConsumed?: number | bigint;\r\n\r\n  /**\r\n   * If present, indicates which transaction in this group caused the failure. This\r\n   * array represents the path to the failing transaction. Indexes are zero based,\r\n   * the first element indicates the top-level transaction, and successive elements\r\n   * indicate deeper inner transactions.\r\n   */\r\n  public failedAt?: (number | bigint)[];\r\n\r\n  /**\r\n   * If present, indicates that the transaction group failed and specifies why that\r\n   * happened\r\n   */\r\n  public failureMessage?: string;\r\n\r\n  /**\r\n   * These are resources that were accessed by this group that would normally have\r\n   * caused failure, but were allowed in simulation. Depending on where this object\r\n   * is in the response, the unnamed resources it contains may or may not qualify for\r\n   * group resource sharing. If this is a field in SimulateTransactionGroupResult,\r\n   * the resources do qualify, but if this is a field in SimulateTransactionResult,\r\n   * they do not qualify. In order to make this group valid for actual submission,\r\n   * resources that qualify for group sharing can be made available by any\r\n   * transaction of the group; otherwise, resources must be placed in the same\r\n   * transaction which accessed them.\r\n   */\r\n  public unnamedResourcesAccessed?: SimulateUnnamedResourcesAccessed;\r\n\r\n  /**\r\n   * Creates a new `SimulateTransactionGroupResult` object.\r\n   * @param txnResults - Simulation result for individual transactions\r\n   * @param appBudgetAdded - Total budget added during execution of app calls in the transaction group.\r\n   * @param appBudgetConsumed - Total budget consumed during execution of app calls in the transaction group.\r\n   * @param failedAt - If present, indicates which transaction in this group caused the failure. This\r\n   * array represents the path to the failing transaction. Indexes are zero based,\r\n   * the first element indicates the top-level transaction, and successive elements\r\n   * indicate deeper inner transactions.\r\n   * @param failureMessage - If present, indicates that the transaction group failed and specifies why that\r\n   * happened\r\n   * @param unnamedResourcesAccessed - These are resources that were accessed by this group that would normally have\r\n   * caused failure, but were allowed in simulation. Depending on where this object\r\n   * is in the response, the unnamed resources it contains may or may not qualify for\r\n   * group resource sharing. If this is a field in SimulateTransactionGroupResult,\r\n   * the resources do qualify, but if this is a field in SimulateTransactionResult,\r\n   * they do not qualify. In order to make this group valid for actual submission,\r\n   * resources that qualify for group sharing can be made available by any\r\n   * transaction of the group; otherwise, resources must be placed in the same\r\n   * transaction which accessed them.\r\n   */\r\n  constructor({\r\n    txnResults,\r\n    appBudgetAdded,\r\n    appBudgetConsumed,\r\n    failedAt,\r\n    failureMessage,\r\n    unnamedResourcesAccessed,\r\n  }: {\r\n    txnResults: SimulateTransactionResult[];\r\n    appBudgetAdded?: number | bigint;\r\n    appBudgetConsumed?: number | bigint;\r\n    failedAt?: (number | bigint)[];\r\n    failureMessage?: string;\r\n    unnamedResourcesAccessed?: SimulateUnnamedResourcesAccessed;\r\n  }) {\r\n    super();\r\n    this.txnResults = txnResults;\r\n    this.appBudgetAdded = appBudgetAdded;\r\n    this.appBudgetConsumed = appBudgetConsumed;\r\n    this.failedAt = failedAt;\r\n    this.failureMessage = failureMessage;\r\n    this.unnamedResourcesAccessed = unnamedResourcesAccessed;\r\n\r\n    this.attribute_map = {\r\n      txnResults: 'txn-results',\r\n      appBudgetAdded: 'app-budget-added',\r\n      appBudgetConsumed: 'app-budget-consumed',\r\n      failedAt: 'failed-at',\r\n      failureMessage: 'failure-message',\r\n      unnamedResourcesAccessed: 'unnamed-resources-accessed',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): SimulateTransactionGroupResult {\r\n    /* eslint-disable dot-notation */\r\n    if (!Array.isArray(data['txn-results']))\r\n      throw new Error(\r\n        `Response is missing required array field 'txn-results': ${data}`\r\n      );\r\n    return new SimulateTransactionGroupResult({\r\n      txnResults: data['txn-results'].map(\r\n        SimulateTransactionResult.from_obj_for_encoding\r\n      ),\r\n      appBudgetAdded: data['app-budget-added'],\r\n      appBudgetConsumed: data['app-budget-consumed'],\r\n      failedAt: data['failed-at'],\r\n      failureMessage: data['failure-message'],\r\n      unnamedResourcesAccessed:\r\n        typeof data['unnamed-resources-accessed'] !== 'undefined'\r\n          ? SimulateUnnamedResourcesAccessed.from_obj_for_encoding(\r\n              data['unnamed-resources-accessed']\r\n            )\r\n          : undefined,\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Simulation result for an individual transaction\r\n */\r\nexport class SimulateTransactionResult extends BaseModel {\r\n  /**\r\n   * Details about a pending transaction. If the transaction was recently confirmed,\r\n   * includes confirmation details like the round and reward details.\r\n   */\r\n  public txnResult: PendingTransactionResponse;\r\n\r\n  /**\r\n   * Budget used during execution of an app call transaction. This value includes\r\n   * budged used by inner app calls spawned by this transaction.\r\n   */\r\n  public appBudgetConsumed?: number | bigint;\r\n\r\n  /**\r\n   * The execution trace of calling an app or a logic sig, containing the inner app\r\n   * call trace in a recursive way.\r\n   */\r\n  public execTrace?: SimulationTransactionExecTrace;\r\n\r\n  /**\r\n   * The account that needed to sign this transaction when no signature was provided\r\n   * and the provided signer was incorrect.\r\n   */\r\n  public fixedSigner?: string;\r\n\r\n  /**\r\n   * Budget used during execution of a logic sig transaction.\r\n   */\r\n  public logicSigBudgetConsumed?: number | bigint;\r\n\r\n  /**\r\n   * These are resources that were accessed by this group that would normally have\r\n   * caused failure, but were allowed in simulation. Depending on where this object\r\n   * is in the response, the unnamed resources it contains may or may not qualify for\r\n   * group resource sharing. If this is a field in SimulateTransactionGroupResult,\r\n   * the resources do qualify, but if this is a field in SimulateTransactionResult,\r\n   * they do not qualify. In order to make this group valid for actual submission,\r\n   * resources that qualify for group sharing can be made available by any\r\n   * transaction of the group; otherwise, resources must be placed in the same\r\n   * transaction which accessed them.\r\n   */\r\n  public unnamedResourcesAccessed?: SimulateUnnamedResourcesAccessed;\r\n\r\n  /**\r\n   * Creates a new `SimulateTransactionResult` object.\r\n   * @param txnResult - Details about a pending transaction. If the transaction was recently confirmed,\r\n   * includes confirmation details like the round and reward details.\r\n   * @param appBudgetConsumed - Budget used during execution of an app call transaction. This value includes\r\n   * budged used by inner app calls spawned by this transaction.\r\n   * @param execTrace - The execution trace of calling an app or a logic sig, containing the inner app\r\n   * call trace in a recursive way.\r\n   * @param fixedSigner - The account that needed to sign this transaction when no signature was provided\r\n   * and the provided signer was incorrect.\r\n   * @param logicSigBudgetConsumed - Budget used during execution of a logic sig transaction.\r\n   * @param unnamedResourcesAccessed - These are resources that were accessed by this group that would normally have\r\n   * caused failure, but were allowed in simulation. Depending on where this object\r\n   * is in the response, the unnamed resources it contains may or may not qualify for\r\n   * group resource sharing. If this is a field in SimulateTransactionGroupResult,\r\n   * the resources do qualify, but if this is a field in SimulateTransactionResult,\r\n   * they do not qualify. In order to make this group valid for actual submission,\r\n   * resources that qualify for group sharing can be made available by any\r\n   * transaction of the group; otherwise, resources must be placed in the same\r\n   * transaction which accessed them.\r\n   */\r\n  constructor({\r\n    txnResult,\r\n    appBudgetConsumed,\r\n    execTrace,\r\n    fixedSigner,\r\n    logicSigBudgetConsumed,\r\n    unnamedResourcesAccessed,\r\n  }: {\r\n    txnResult: PendingTransactionResponse;\r\n    appBudgetConsumed?: number | bigint;\r\n    execTrace?: SimulationTransactionExecTrace;\r\n    fixedSigner?: string;\r\n    logicSigBudgetConsumed?: number | bigint;\r\n    unnamedResourcesAccessed?: SimulateUnnamedResourcesAccessed;\r\n  }) {\r\n    super();\r\n    this.txnResult = txnResult;\r\n    this.appBudgetConsumed = appBudgetConsumed;\r\n    this.execTrace = execTrace;\r\n    this.fixedSigner = fixedSigner;\r\n    this.logicSigBudgetConsumed = logicSigBudgetConsumed;\r\n    this.unnamedResourcesAccessed = unnamedResourcesAccessed;\r\n\r\n    this.attribute_map = {\r\n      txnResult: 'txn-result',\r\n      appBudgetConsumed: 'app-budget-consumed',\r\n      execTrace: 'exec-trace',\r\n      fixedSigner: 'fixed-signer',\r\n      logicSigBudgetConsumed: 'logic-sig-budget-consumed',\r\n      unnamedResourcesAccessed: 'unnamed-resources-accessed',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): SimulateTransactionResult {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['txn-result'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'txn-result': ${data}`\r\n      );\r\n    return new SimulateTransactionResult({\r\n      txnResult: PendingTransactionResponse.from_obj_for_encoding(\r\n        data['txn-result']\r\n      ),\r\n      appBudgetConsumed: data['app-budget-consumed'],\r\n      execTrace:\r\n        typeof data['exec-trace'] !== 'undefined'\r\n          ? SimulationTransactionExecTrace.from_obj_for_encoding(\r\n              data['exec-trace']\r\n            )\r\n          : undefined,\r\n      fixedSigner: data['fixed-signer'],\r\n      logicSigBudgetConsumed: data['logic-sig-budget-consumed'],\r\n      unnamedResourcesAccessed:\r\n        typeof data['unnamed-resources-accessed'] !== 'undefined'\r\n          ? SimulateUnnamedResourcesAccessed.from_obj_for_encoding(\r\n              data['unnamed-resources-accessed']\r\n            )\r\n          : undefined,\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * These are resources that were accessed by this group that would normally have\r\n * caused failure, but were allowed in simulation. Depending on where this object\r\n * is in the response, the unnamed resources it contains may or may not qualify for\r\n * group resource sharing. If this is a field in SimulateTransactionGroupResult,\r\n * the resources do qualify, but if this is a field in SimulateTransactionResult,\r\n * they do not qualify. In order to make this group valid for actual submission,\r\n * resources that qualify for group sharing can be made available by any\r\n * transaction of the group; otherwise, resources must be placed in the same\r\n * transaction which accessed them.\r\n */\r\nexport class SimulateUnnamedResourcesAccessed extends BaseModel {\r\n  /**\r\n   * The unnamed accounts that were referenced. The order of this array is arbitrary.\r\n   */\r\n  public accounts?: string[];\r\n\r\n  /**\r\n   * The unnamed application local states that were referenced. The order of this\r\n   * array is arbitrary.\r\n   */\r\n  public appLocals?: ApplicationLocalReference[];\r\n\r\n  /**\r\n   * The unnamed applications that were referenced. The order of this array is\r\n   * arbitrary.\r\n   */\r\n  public apps?: (number | bigint)[];\r\n\r\n  /**\r\n   * The unnamed asset holdings that were referenced. The order of this array is\r\n   * arbitrary.\r\n   */\r\n  public assetHoldings?: AssetHoldingReference[];\r\n\r\n  /**\r\n   * The unnamed assets that were referenced. The order of this array is arbitrary.\r\n   */\r\n  public assets?: (number | bigint)[];\r\n\r\n  /**\r\n   * The unnamed boxes that were referenced. The order of this array is arbitrary.\r\n   */\r\n  public boxes?: BoxReference[];\r\n\r\n  /**\r\n   * The number of extra box references used to increase the IO budget. This is in\r\n   * addition to the references defined in the input transaction group and any\r\n   * referenced to unnamed boxes.\r\n   */\r\n  public extraBoxRefs?: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `SimulateUnnamedResourcesAccessed` object.\r\n   * @param accounts - The unnamed accounts that were referenced. The order of this array is arbitrary.\r\n   * @param appLocals - The unnamed application local states that were referenced. The order of this\r\n   * array is arbitrary.\r\n   * @param apps - The unnamed applications that were referenced. The order of this array is\r\n   * arbitrary.\r\n   * @param assetHoldings - The unnamed asset holdings that were referenced. The order of this array is\r\n   * arbitrary.\r\n   * @param assets - The unnamed assets that were referenced. The order of this array is arbitrary.\r\n   * @param boxes - The unnamed boxes that were referenced. The order of this array is arbitrary.\r\n   * @param extraBoxRefs - The number of extra box references used to increase the IO budget. This is in\r\n   * addition to the references defined in the input transaction group and any\r\n   * referenced to unnamed boxes.\r\n   */\r\n  constructor({\r\n    accounts,\r\n    appLocals,\r\n    apps,\r\n    assetHoldings,\r\n    assets,\r\n    boxes,\r\n    extraBoxRefs,\r\n  }: {\r\n    accounts?: string[];\r\n    appLocals?: ApplicationLocalReference[];\r\n    apps?: (number | bigint)[];\r\n    assetHoldings?: AssetHoldingReference[];\r\n    assets?: (number | bigint)[];\r\n    boxes?: BoxReference[];\r\n    extraBoxRefs?: number | bigint;\r\n  }) {\r\n    super();\r\n    this.accounts = accounts;\r\n    this.appLocals = appLocals;\r\n    this.apps = apps;\r\n    this.assetHoldings = assetHoldings;\r\n    this.assets = assets;\r\n    this.boxes = boxes;\r\n    this.extraBoxRefs = extraBoxRefs;\r\n\r\n    this.attribute_map = {\r\n      accounts: 'accounts',\r\n      appLocals: 'app-locals',\r\n      apps: 'apps',\r\n      assetHoldings: 'asset-holdings',\r\n      assets: 'assets',\r\n      boxes: 'boxes',\r\n      extraBoxRefs: 'extra-box-refs',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): SimulateUnnamedResourcesAccessed {\r\n    /* eslint-disable dot-notation */\r\n    return new SimulateUnnamedResourcesAccessed({\r\n      accounts: data['accounts'],\r\n      appLocals:\r\n        typeof data['app-locals'] !== 'undefined'\r\n          ? data['app-locals'].map(\r\n              ApplicationLocalReference.from_obj_for_encoding\r\n            )\r\n          : undefined,\r\n      apps: data['apps'],\r\n      assetHoldings:\r\n        typeof data['asset-holdings'] !== 'undefined'\r\n          ? data['asset-holdings'].map(\r\n              AssetHoldingReference.from_obj_for_encoding\r\n            )\r\n          : undefined,\r\n      assets: data['assets'],\r\n      boxes:\r\n        typeof data['boxes'] !== 'undefined'\r\n          ? data['boxes'].map(BoxReference.from_obj_for_encoding)\r\n          : undefined,\r\n      extraBoxRefs: data['extra-box-refs'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * The set of parameters and limits override during simulation. If this set of\r\n * parameters is present, then evaluation parameters may differ from standard\r\n * evaluation in certain ways.\r\n */\r\nexport class SimulationEvalOverrides extends BaseModel {\r\n  /**\r\n   * If true, transactions without signatures are allowed and simulated as if they\r\n   * were properly signed.\r\n   */\r\n  public allowEmptySignatures?: boolean;\r\n\r\n  /**\r\n   * If true, allows access to unnamed resources during simulation.\r\n   */\r\n  public allowUnnamedResources?: boolean;\r\n\r\n  /**\r\n   * The extra opcode budget added to each transaction group during simulation\r\n   */\r\n  public extraOpcodeBudget?: number | bigint;\r\n\r\n  /**\r\n   * If true, signers for transactions that are missing signatures will be fixed\r\n   * during evaluation.\r\n   */\r\n  public fixSigners?: boolean;\r\n\r\n  /**\r\n   * The maximum log calls one can make during simulation\r\n   */\r\n  public maxLogCalls?: number | bigint;\r\n\r\n  /**\r\n   * The maximum byte number to log during simulation\r\n   */\r\n  public maxLogSize?: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `SimulationEvalOverrides` object.\r\n   * @param allowEmptySignatures - If true, transactions without signatures are allowed and simulated as if they\r\n   * were properly signed.\r\n   * @param allowUnnamedResources - If true, allows access to unnamed resources during simulation.\r\n   * @param extraOpcodeBudget - The extra opcode budget added to each transaction group during simulation\r\n   * @param fixSigners - If true, signers for transactions that are missing signatures will be fixed\r\n   * during evaluation.\r\n   * @param maxLogCalls - The maximum log calls one can make during simulation\r\n   * @param maxLogSize - The maximum byte number to log during simulation\r\n   */\r\n  constructor({\r\n    allowEmptySignatures,\r\n    allowUnnamedResources,\r\n    extraOpcodeBudget,\r\n    fixSigners,\r\n    maxLogCalls,\r\n    maxLogSize,\r\n  }: {\r\n    allowEmptySignatures?: boolean;\r\n    allowUnnamedResources?: boolean;\r\n    extraOpcodeBudget?: number | bigint;\r\n    fixSigners?: boolean;\r\n    maxLogCalls?: number | bigint;\r\n    maxLogSize?: number | bigint;\r\n  }) {\r\n    super();\r\n    this.allowEmptySignatures = allowEmptySignatures;\r\n    this.allowUnnamedResources = allowUnnamedResources;\r\n    this.extraOpcodeBudget = extraOpcodeBudget;\r\n    this.fixSigners = fixSigners;\r\n    this.maxLogCalls = maxLogCalls;\r\n    this.maxLogSize = maxLogSize;\r\n\r\n    this.attribute_map = {\r\n      allowEmptySignatures: 'allow-empty-signatures',\r\n      allowUnnamedResources: 'allow-unnamed-resources',\r\n      extraOpcodeBudget: 'extra-opcode-budget',\r\n      fixSigners: 'fix-signers',\r\n      maxLogCalls: 'max-log-calls',\r\n      maxLogSize: 'max-log-size',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): SimulationEvalOverrides {\r\n    /* eslint-disable dot-notation */\r\n    return new SimulationEvalOverrides({\r\n      allowEmptySignatures: data['allow-empty-signatures'],\r\n      allowUnnamedResources: data['allow-unnamed-resources'],\r\n      extraOpcodeBudget: data['extra-opcode-budget'],\r\n      fixSigners: data['fix-signers'],\r\n      maxLogCalls: data['max-log-calls'],\r\n      maxLogSize: data['max-log-size'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * The set of trace information and effect from evaluating a single opcode.\r\n */\r\nexport class SimulationOpcodeTraceUnit extends BaseModel {\r\n  /**\r\n   * The program counter of the current opcode being evaluated.\r\n   */\r\n  public pc: number | bigint;\r\n\r\n  /**\r\n   * The writes into scratch slots.\r\n   */\r\n  public scratchChanges?: ScratchChange[];\r\n\r\n  /**\r\n   * The indexes of the traces for inner transactions spawned by this opcode, if any.\r\n   */\r\n  public spawnedInners?: (number | bigint)[];\r\n\r\n  /**\r\n   * The values added by this opcode to the stack.\r\n   */\r\n  public stackAdditions?: AvmValue[];\r\n\r\n  /**\r\n   * The number of deleted stack values by this opcode.\r\n   */\r\n  public stackPopCount?: number | bigint;\r\n\r\n  /**\r\n   * The operations against the current application's states.\r\n   */\r\n  public stateChanges?: ApplicationStateOperation[];\r\n\r\n  /**\r\n   * Creates a new `SimulationOpcodeTraceUnit` object.\r\n   * @param pc - The program counter of the current opcode being evaluated.\r\n   * @param scratchChanges - The writes into scratch slots.\r\n   * @param spawnedInners - The indexes of the traces for inner transactions spawned by this opcode, if any.\r\n   * @param stackAdditions - The values added by this opcode to the stack.\r\n   * @param stackPopCount - The number of deleted stack values by this opcode.\r\n   * @param stateChanges - The operations against the current application's states.\r\n   */\r\n  constructor({\r\n    pc,\r\n    scratchChanges,\r\n    spawnedInners,\r\n    stackAdditions,\r\n    stackPopCount,\r\n    stateChanges,\r\n  }: {\r\n    pc: number | bigint;\r\n    scratchChanges?: ScratchChange[];\r\n    spawnedInners?: (number | bigint)[];\r\n    stackAdditions?: AvmValue[];\r\n    stackPopCount?: number | bigint;\r\n    stateChanges?: ApplicationStateOperation[];\r\n  }) {\r\n    super();\r\n    this.pc = pc;\r\n    this.scratchChanges = scratchChanges;\r\n    this.spawnedInners = spawnedInners;\r\n    this.stackAdditions = stackAdditions;\r\n    this.stackPopCount = stackPopCount;\r\n    this.stateChanges = stateChanges;\r\n\r\n    this.attribute_map = {\r\n      pc: 'pc',\r\n      scratchChanges: 'scratch-changes',\r\n      spawnedInners: 'spawned-inners',\r\n      stackAdditions: 'stack-additions',\r\n      stackPopCount: 'stack-pop-count',\r\n      stateChanges: 'state-changes',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): SimulationOpcodeTraceUnit {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['pc'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'pc': ${data}`);\r\n    return new SimulationOpcodeTraceUnit({\r\n      pc: data['pc'],\r\n      scratchChanges:\r\n        typeof data['scratch-changes'] !== 'undefined'\r\n          ? data['scratch-changes'].map(ScratchChange.from_obj_for_encoding)\r\n          : undefined,\r\n      spawnedInners: data['spawned-inners'],\r\n      stackAdditions:\r\n        typeof data['stack-additions'] !== 'undefined'\r\n          ? data['stack-additions'].map(AvmValue.from_obj_for_encoding)\r\n          : undefined,\r\n      stackPopCount: data['stack-pop-count'],\r\n      stateChanges:\r\n        typeof data['state-changes'] !== 'undefined'\r\n          ? data['state-changes'].map(\r\n              ApplicationStateOperation.from_obj_for_encoding\r\n            )\r\n          : undefined,\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * The execution trace of calling an app or a logic sig, containing the inner app\r\n * call trace in a recursive way.\r\n */\r\nexport class SimulationTransactionExecTrace extends BaseModel {\r\n  /**\r\n   * SHA512_256 hash digest of the approval program executed in transaction.\r\n   */\r\n  public approvalProgramHash?: Uint8Array;\r\n\r\n  /**\r\n   * Program trace that contains a trace of opcode effects in an approval program.\r\n   */\r\n  public approvalProgramTrace?: SimulationOpcodeTraceUnit[];\r\n\r\n  /**\r\n   * SHA512_256 hash digest of the clear state program executed in transaction.\r\n   */\r\n  public clearStateProgramHash?: Uint8Array;\r\n\r\n  /**\r\n   * Program trace that contains a trace of opcode effects in a clear state program.\r\n   */\r\n  public clearStateProgramTrace?: SimulationOpcodeTraceUnit[];\r\n\r\n  /**\r\n   * If true, indicates that the clear state program failed and any persistent state\r\n   * changes it produced should be reverted once the program exits.\r\n   */\r\n  public clearStateRollback?: boolean;\r\n\r\n  /**\r\n   * The error message explaining why the clear state program failed. This field will\r\n   * only be populated if clear-state-rollback is true and the failure was due to an\r\n   * execution error.\r\n   */\r\n  public clearStateRollbackError?: string;\r\n\r\n  /**\r\n   * An array of SimulationTransactionExecTrace representing the execution trace of\r\n   * any inner transactions executed.\r\n   */\r\n  public innerTrace?: SimulationTransactionExecTrace[];\r\n\r\n  /**\r\n   * SHA512_256 hash digest of the logic sig executed in transaction.\r\n   */\r\n  public logicSigHash?: Uint8Array;\r\n\r\n  /**\r\n   * Program trace that contains a trace of opcode effects in a logic sig.\r\n   */\r\n  public logicSigTrace?: SimulationOpcodeTraceUnit[];\r\n\r\n  /**\r\n   * Creates a new `SimulationTransactionExecTrace` object.\r\n   * @param approvalProgramHash - SHA512_256 hash digest of the approval program executed in transaction.\r\n   * @param approvalProgramTrace - Program trace that contains a trace of opcode effects in an approval program.\r\n   * @param clearStateProgramHash - SHA512_256 hash digest of the clear state program executed in transaction.\r\n   * @param clearStateProgramTrace - Program trace that contains a trace of opcode effects in a clear state program.\r\n   * @param clearStateRollback - If true, indicates that the clear state program failed and any persistent state\r\n   * changes it produced should be reverted once the program exits.\r\n   * @param clearStateRollbackError - The error message explaining why the clear state program failed. This field will\r\n   * only be populated if clear-state-rollback is true and the failure was due to an\r\n   * execution error.\r\n   * @param innerTrace - An array of SimulationTransactionExecTrace representing the execution trace of\r\n   * any inner transactions executed.\r\n   * @param logicSigHash - SHA512_256 hash digest of the logic sig executed in transaction.\r\n   * @param logicSigTrace - Program trace that contains a trace of opcode effects in a logic sig.\r\n   */\r\n  constructor({\r\n    approvalProgramHash,\r\n    approvalProgramTrace,\r\n    clearStateProgramHash,\r\n    clearStateProgramTrace,\r\n    clearStateRollback,\r\n    clearStateRollbackError,\r\n    innerTrace,\r\n    logicSigHash,\r\n    logicSigTrace,\r\n  }: {\r\n    approvalProgramHash?: string | Uint8Array;\r\n    approvalProgramTrace?: SimulationOpcodeTraceUnit[];\r\n    clearStateProgramHash?: string | Uint8Array;\r\n    clearStateProgramTrace?: SimulationOpcodeTraceUnit[];\r\n    clearStateRollback?: boolean;\r\n    clearStateRollbackError?: string;\r\n    innerTrace?: SimulationTransactionExecTrace[];\r\n    logicSigHash?: string | Uint8Array;\r\n    logicSigTrace?: SimulationOpcodeTraceUnit[];\r\n  }) {\r\n    super();\r\n    this.approvalProgramHash =\r\n      typeof approvalProgramHash === 'string'\r\n        ? new Uint8Array(Buffer.from(approvalProgramHash, 'base64'))\r\n        : approvalProgramHash;\r\n    this.approvalProgramTrace = approvalProgramTrace;\r\n    this.clearStateProgramHash =\r\n      typeof clearStateProgramHash === 'string'\r\n        ? new Uint8Array(Buffer.from(clearStateProgramHash, 'base64'))\r\n        : clearStateProgramHash;\r\n    this.clearStateProgramTrace = clearStateProgramTrace;\r\n    this.clearStateRollback = clearStateRollback;\r\n    this.clearStateRollbackError = clearStateRollbackError;\r\n    this.innerTrace = innerTrace;\r\n    this.logicSigHash =\r\n      typeof logicSigHash === 'string'\r\n        ? new Uint8Array(Buffer.from(logicSigHash, 'base64'))\r\n        : logicSigHash;\r\n    this.logicSigTrace = logicSigTrace;\r\n\r\n    this.attribute_map = {\r\n      approvalProgramHash: 'approval-program-hash',\r\n      approvalProgramTrace: 'approval-program-trace',\r\n      clearStateProgramHash: 'clear-state-program-hash',\r\n      clearStateProgramTrace: 'clear-state-program-trace',\r\n      clearStateRollback: 'clear-state-rollback',\r\n      clearStateRollbackError: 'clear-state-rollback-error',\r\n      innerTrace: 'inner-trace',\r\n      logicSigHash: 'logic-sig-hash',\r\n      logicSigTrace: 'logic-sig-trace',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): SimulationTransactionExecTrace {\r\n    /* eslint-disable dot-notation */\r\n    return new SimulationTransactionExecTrace({\r\n      approvalProgramHash: data['approval-program-hash'],\r\n      approvalProgramTrace:\r\n        typeof data['approval-program-trace'] !== 'undefined'\r\n          ? data['approval-program-trace'].map(\r\n              SimulationOpcodeTraceUnit.from_obj_for_encoding\r\n            )\r\n          : undefined,\r\n      clearStateProgramHash: data['clear-state-program-hash'],\r\n      clearStateProgramTrace:\r\n        typeof data['clear-state-program-trace'] !== 'undefined'\r\n          ? data['clear-state-program-trace'].map(\r\n              SimulationOpcodeTraceUnit.from_obj_for_encoding\r\n            )\r\n          : undefined,\r\n      clearStateRollback: data['clear-state-rollback'],\r\n      clearStateRollbackError: data['clear-state-rollback-error'],\r\n      innerTrace:\r\n        typeof data['inner-trace'] !== 'undefined'\r\n          ? data['inner-trace'].map(\r\n              SimulationTransactionExecTrace.from_obj_for_encoding\r\n            )\r\n          : undefined,\r\n      logicSigHash: data['logic-sig-hash'],\r\n      logicSigTrace:\r\n        typeof data['logic-sig-trace'] !== 'undefined'\r\n          ? data['logic-sig-trace'].map(\r\n              SimulationOpcodeTraceUnit.from_obj_for_encoding\r\n            )\r\n          : undefined,\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Represents a state proof and its corresponding message\r\n */\r\nexport class StateProof extends BaseModel {\r\n  /**\r\n   * Represents the message that the state proofs are attesting to.\r\n   */\r\n  public message: StateProofMessage;\r\n\r\n  /**\r\n   * The encoded StateProof for the message.\r\n   */\r\n  public stateproof: Uint8Array;\r\n\r\n  /**\r\n   * Creates a new `StateProof` object.\r\n   * @param message - Represents the message that the state proofs are attesting to.\r\n   * @param stateproof - The encoded StateProof for the message.\r\n   */\r\n  constructor({\r\n    message,\r\n    stateproof,\r\n  }: {\r\n    message: StateProofMessage;\r\n    stateproof: string | Uint8Array;\r\n  }) {\r\n    super();\r\n    this.message = message;\r\n    this.stateproof =\r\n      typeof stateproof === 'string'\r\n        ? new Uint8Array(Buffer.from(stateproof, 'base64'))\r\n        : stateproof;\r\n\r\n    this.attribute_map = {\r\n      message: 'Message',\r\n      stateproof: 'StateProof',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): StateProof {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['Message'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'Message': ${data}`);\r\n    if (typeof data['StateProof'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'StateProof': ${data}`\r\n      );\r\n    return new StateProof({\r\n      message: StateProofMessage.from_obj_for_encoding(data['Message']),\r\n      stateproof: data['StateProof'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Represents the message that the state proofs are attesting to.\r\n */\r\nexport class StateProofMessage extends BaseModel {\r\n  /**\r\n   * The vector commitment root on all light block headers within a state proof\r\n   * interval.\r\n   */\r\n  public blockheaderscommitment: Uint8Array;\r\n\r\n  /**\r\n   * The first round the message attests to.\r\n   */\r\n  public firstattestedround: number | bigint;\r\n\r\n  /**\r\n   * The last round the message attests to.\r\n   */\r\n  public lastattestedround: number | bigint;\r\n\r\n  /**\r\n   * An integer value representing the natural log of the proven weight with 16 bits\r\n   * of precision. This value would be used to verify the next state proof.\r\n   */\r\n  public lnprovenweight: number | bigint;\r\n\r\n  /**\r\n   * The vector commitment root of the top N accounts to sign the next StateProof.\r\n   */\r\n  public voterscommitment: Uint8Array;\r\n\r\n  /**\r\n   * Creates a new `StateProofMessage` object.\r\n   * @param blockheaderscommitment - The vector commitment root on all light block headers within a state proof\r\n   * interval.\r\n   * @param firstattestedround - The first round the message attests to.\r\n   * @param lastattestedround - The last round the message attests to.\r\n   * @param lnprovenweight - An integer value representing the natural log of the proven weight with 16 bits\r\n   * of precision. This value would be used to verify the next state proof.\r\n   * @param voterscommitment - The vector commitment root of the top N accounts to sign the next StateProof.\r\n   */\r\n  constructor({\r\n    blockheaderscommitment,\r\n    firstattestedround,\r\n    lastattestedround,\r\n    lnprovenweight,\r\n    voterscommitment,\r\n  }: {\r\n    blockheaderscommitment: string | Uint8Array;\r\n    firstattestedround: number | bigint;\r\n    lastattestedround: number | bigint;\r\n    lnprovenweight: number | bigint;\r\n    voterscommitment: string | Uint8Array;\r\n  }) {\r\n    super();\r\n    this.blockheaderscommitment =\r\n      typeof blockheaderscommitment === 'string'\r\n        ? new Uint8Array(Buffer.from(blockheaderscommitment, 'base64'))\r\n        : blockheaderscommitment;\r\n    this.firstattestedround = firstattestedround;\r\n    this.lastattestedround = lastattestedround;\r\n    this.lnprovenweight = lnprovenweight;\r\n    this.voterscommitment =\r\n      typeof voterscommitment === 'string'\r\n        ? new Uint8Array(Buffer.from(voterscommitment, 'base64'))\r\n        : voterscommitment;\r\n\r\n    this.attribute_map = {\r\n      blockheaderscommitment: 'BlockHeadersCommitment',\r\n      firstattestedround: 'FirstAttestedRound',\r\n      lastattestedround: 'LastAttestedRound',\r\n      lnprovenweight: 'LnProvenWeight',\r\n      voterscommitment: 'VotersCommitment',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): StateProofMessage {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['BlockHeadersCommitment'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'BlockHeadersCommitment': ${data}`\r\n      );\r\n    if (typeof data['FirstAttestedRound'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'FirstAttestedRound': ${data}`\r\n      );\r\n    if (typeof data['LastAttestedRound'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'LastAttestedRound': ${data}`\r\n      );\r\n    if (typeof data['LnProvenWeight'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'LnProvenWeight': ${data}`\r\n      );\r\n    if (typeof data['VotersCommitment'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'VotersCommitment': ${data}`\r\n      );\r\n    return new StateProofMessage({\r\n      blockheaderscommitment: data['BlockHeadersCommitment'],\r\n      firstattestedround: data['FirstAttestedRound'],\r\n      lastattestedround: data['LastAttestedRound'],\r\n      lnprovenweight: data['LnProvenWeight'],\r\n      voterscommitment: data['VotersCommitment'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Supply represents the current supply of MicroAlgos in the system.\r\n */\r\nexport class SupplyResponse extends BaseModel {\r\n  /**\r\n   * Round\r\n   */\r\n  public currentRound: number | bigint;\r\n\r\n  /**\r\n   * OnlineMoney\r\n   */\r\n  public onlineMoney: number | bigint;\r\n\r\n  /**\r\n   * TotalMoney\r\n   */\r\n  public totalMoney: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `SupplyResponse` object.\r\n   * @param currentRound - Round\r\n   * @param onlineMoney - OnlineMoney\r\n   * @param totalMoney - TotalMoney\r\n   */\r\n  constructor({\r\n    currentRound,\r\n    onlineMoney,\r\n    totalMoney,\r\n  }: {\r\n    currentRound: number | bigint;\r\n    onlineMoney: number | bigint;\r\n    totalMoney: number | bigint;\r\n  }) {\r\n    super();\r\n    this.currentRound = currentRound;\r\n    this.onlineMoney = onlineMoney;\r\n    this.totalMoney = totalMoney;\r\n\r\n    this.attribute_map = {\r\n      currentRound: 'current_round',\r\n      onlineMoney: 'online-money',\r\n      totalMoney: 'total-money',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): SupplyResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['current_round'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'current_round': ${data}`\r\n      );\r\n    if (typeof data['online-money'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'online-money': ${data}`\r\n      );\r\n    if (typeof data['total-money'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'total-money': ${data}`\r\n      );\r\n    return new SupplyResponse({\r\n      currentRound: data['current_round'],\r\n      onlineMoney: data['online-money'],\r\n      totalMoney: data['total-money'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Represents a key-value pair in an application store.\r\n */\r\nexport class TealKeyValue extends BaseModel {\r\n  public key: string;\r\n\r\n  /**\r\n   * Represents a TEAL value.\r\n   */\r\n  public value: TealValue;\r\n\r\n  /**\r\n   * Creates a new `TealKeyValue` object.\r\n   * @param key -\r\n   * @param value - Represents a TEAL value.\r\n   */\r\n  constructor({ key, value }: { key: string; value: TealValue }) {\r\n    super();\r\n    this.key = key;\r\n    this.value = value;\r\n\r\n    this.attribute_map = {\r\n      key: 'key',\r\n      value: 'value',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): TealKeyValue {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['key'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'key': ${data}`);\r\n    if (typeof data['value'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'value': ${data}`);\r\n    return new TealKeyValue({\r\n      key: data['key'],\r\n      value: TealValue.from_obj_for_encoding(data['value']),\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Represents a TEAL value.\r\n */\r\nexport class TealValue extends BaseModel {\r\n  /**\r\n   * (tt) value type. Value `1` refers to **bytes**, value `2` refers to **uint**\r\n   */\r\n  public type: number | bigint;\r\n\r\n  /**\r\n   * (tb) bytes value.\r\n   */\r\n  public bytes: string;\r\n\r\n  /**\r\n   * (ui) uint value.\r\n   */\r\n  public uint: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `TealValue` object.\r\n   * @param type - (tt) value type. Value `1` refers to **bytes**, value `2` refers to **uint**\r\n   * @param bytes - (tb) bytes value.\r\n   * @param uint - (ui) uint value.\r\n   */\r\n  constructor({\r\n    type,\r\n    bytes,\r\n    uint,\r\n  }: {\r\n    type: number | bigint;\r\n    bytes: string;\r\n    uint: number | bigint;\r\n  }) {\r\n    super();\r\n    this.type = type;\r\n    this.bytes = bytes;\r\n    this.uint = uint;\r\n\r\n    this.attribute_map = {\r\n      type: 'type',\r\n      bytes: 'bytes',\r\n      uint: 'uint',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): TealValue {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['type'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'type': ${data}`);\r\n    if (typeof data['bytes'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'bytes': ${data}`);\r\n    if (typeof data['uint'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'uint': ${data}`);\r\n    return new TealValue({\r\n      type: data['type'],\r\n      bytes: data['bytes'],\r\n      uint: data['uint'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Response containing all ledger state deltas for transaction groups, with their\r\n * associated Ids, in a single round.\r\n */\r\nexport class TransactionGroupLedgerStateDeltasForRoundResponse extends BaseModel {\r\n  public deltas: LedgerStateDeltaForTransactionGroup[];\r\n\r\n  /**\r\n   * Creates a new `TransactionGroupLedgerStateDeltasForRoundResponse` object.\r\n   * @param deltas -\r\n   */\r\n  constructor({ deltas }: { deltas: LedgerStateDeltaForTransactionGroup[] }) {\r\n    super();\r\n    this.deltas = deltas;\r\n\r\n    this.attribute_map = {\r\n      deltas: 'Deltas',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): TransactionGroupLedgerStateDeltasForRoundResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (!Array.isArray(data['Deltas']))\r\n      throw new Error(\r\n        `Response is missing required array field 'Deltas': ${data}`\r\n      );\r\n    return new TransactionGroupLedgerStateDeltasForRoundResponse({\r\n      deltas: data['Deltas'].map(\r\n        LedgerStateDeltaForTransactionGroup.from_obj_for_encoding\r\n      ),\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * TransactionParams contains the parameters that help a client construct a new\r\n * transaction.\r\n */\r\nexport class TransactionParametersResponse extends BaseModel {\r\n  /**\r\n   * ConsensusVersion indicates the consensus protocol version\r\n   * as of LastRound.\r\n   */\r\n  public consensusVersion: string;\r\n\r\n  /**\r\n   * Fee is the suggested transaction fee\r\n   * Fee is in units of micro-Algos per byte.\r\n   * Fee may fall to zero but transactions must still have a fee of\r\n   * at least MinTxnFee for the current network protocol.\r\n   */\r\n  public fee: number | bigint;\r\n\r\n  /**\r\n   * GenesisHash is the hash of the genesis block.\r\n   */\r\n  public genesisHash: Uint8Array;\r\n\r\n  /**\r\n   * GenesisID is an ID listed in the genesis block.\r\n   */\r\n  public genesisId: string;\r\n\r\n  /**\r\n   * LastRound indicates the last round seen\r\n   */\r\n  public lastRound: number | bigint;\r\n\r\n  /**\r\n   * The minimum transaction fee (not per byte) required for the\r\n   * txn to validate for the current network protocol.\r\n   */\r\n  public minFee: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `TransactionParametersResponse` object.\r\n   * @param consensusVersion - ConsensusVersion indicates the consensus protocol version\r\n   * as of LastRound.\r\n   * @param fee - Fee is the suggested transaction fee\r\n   * Fee is in units of micro-Algos per byte.\r\n   * Fee may fall to zero but transactions must still have a fee of\r\n   * at least MinTxnFee for the current network protocol.\r\n   * @param genesisHash - GenesisHash is the hash of the genesis block.\r\n   * @param genesisId - GenesisID is an ID listed in the genesis block.\r\n   * @param lastRound - LastRound indicates the last round seen\r\n   * @param minFee - The minimum transaction fee (not per byte) required for the\r\n   * txn to validate for the current network protocol.\r\n   */\r\n  constructor({\r\n    consensusVersion,\r\n    fee,\r\n    genesisHash,\r\n    genesisId,\r\n    lastRound,\r\n    minFee,\r\n  }: {\r\n    consensusVersion: string;\r\n    fee: number | bigint;\r\n    genesisHash: string | Uint8Array;\r\n    genesisId: string;\r\n    lastRound: number | bigint;\r\n    minFee: number | bigint;\r\n  }) {\r\n    super();\r\n    this.consensusVersion = consensusVersion;\r\n    this.fee = fee;\r\n    this.genesisHash =\r\n      typeof genesisHash === 'string'\r\n        ? new Uint8Array(Buffer.from(genesisHash, 'base64'))\r\n        : genesisHash;\r\n    this.genesisId = genesisId;\r\n    this.lastRound = lastRound;\r\n    this.minFee = minFee;\r\n\r\n    this.attribute_map = {\r\n      consensusVersion: 'consensus-version',\r\n      fee: 'fee',\r\n      genesisHash: 'genesis-hash',\r\n      genesisId: 'genesis-id',\r\n      lastRound: 'last-round',\r\n      minFee: 'min-fee',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): TransactionParametersResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['consensus-version'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'consensus-version': ${data}`\r\n      );\r\n    if (typeof data['fee'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'fee': ${data}`);\r\n    if (typeof data['genesis-hash'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'genesis-hash': ${data}`\r\n      );\r\n    if (typeof data['genesis-id'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'genesis-id': ${data}`\r\n      );\r\n    if (typeof data['last-round'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'last-round': ${data}`\r\n      );\r\n    if (typeof data['min-fee'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'min-fee': ${data}`);\r\n    return new TransactionParametersResponse({\r\n      consensusVersion: data['consensus-version'],\r\n      fee: data['fee'],\r\n      genesisHash: data['genesis-hash'],\r\n      genesisId: data['genesis-id'],\r\n      lastRound: data['last-round'],\r\n      minFee: data['min-fee'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Proof of transaction in a block.\r\n */\r\nexport class TransactionProofResponse extends BaseModel {\r\n  /**\r\n   * Index of the transaction in the block's payset.\r\n   */\r\n  public idx: number | bigint;\r\n\r\n  /**\r\n   * Proof of transaction membership.\r\n   */\r\n  public proof: Uint8Array;\r\n\r\n  /**\r\n   * Hash of SignedTxnInBlock for verifying proof.\r\n   */\r\n  public stibhash: Uint8Array;\r\n\r\n  /**\r\n   * Represents the depth of the tree that is being proven, i.e. the number of edges\r\n   * from a leaf to the root.\r\n   */\r\n  public treedepth: number | bigint;\r\n\r\n  /**\r\n   * The type of hash function used to create the proof, must be one of:\r\n   * * sha512_256\r\n   * * sha256\r\n   */\r\n  public hashtype?: string;\r\n\r\n  /**\r\n   * Creates a new `TransactionProofResponse` object.\r\n   * @param idx - Index of the transaction in the block's payset.\r\n   * @param proof - Proof of transaction membership.\r\n   * @param stibhash - Hash of SignedTxnInBlock for verifying proof.\r\n   * @param treedepth - Represents the depth of the tree that is being proven, i.e. the number of edges\r\n   * from a leaf to the root.\r\n   * @param hashtype - The type of hash function used to create the proof, must be one of:\r\n   * * sha512_256\r\n   * * sha256\r\n   */\r\n  constructor({\r\n    idx,\r\n    proof,\r\n    stibhash,\r\n    treedepth,\r\n    hashtype,\r\n  }: {\r\n    idx: number | bigint;\r\n    proof: string | Uint8Array;\r\n    stibhash: string | Uint8Array;\r\n    treedepth: number | bigint;\r\n    hashtype?: string;\r\n  }) {\r\n    super();\r\n    this.idx = idx;\r\n    this.proof =\r\n      typeof proof === 'string'\r\n        ? new Uint8Array(Buffer.from(proof, 'base64'))\r\n        : proof;\r\n    this.stibhash =\r\n      typeof stibhash === 'string'\r\n        ? new Uint8Array(Buffer.from(stibhash, 'base64'))\r\n        : stibhash;\r\n    this.treedepth = treedepth;\r\n    this.hashtype = hashtype;\r\n\r\n    this.attribute_map = {\r\n      idx: 'idx',\r\n      proof: 'proof',\r\n      stibhash: 'stibhash',\r\n      treedepth: 'treedepth',\r\n      hashtype: 'hashtype',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): TransactionProofResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['idx'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'idx': ${data}`);\r\n    if (typeof data['proof'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'proof': ${data}`);\r\n    if (typeof data['stibhash'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'stibhash': ${data}`);\r\n    if (typeof data['treedepth'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'treedepth': ${data}`\r\n      );\r\n    return new TransactionProofResponse({\r\n      idx: data['idx'],\r\n      proof: data['proof'],\r\n      stibhash: data['stibhash'],\r\n      treedepth: data['treedepth'],\r\n      hashtype: data['hashtype'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * algod version information.\r\n */\r\nexport class Version extends BaseModel {\r\n  public build: BuildVersion;\r\n\r\n  public genesisHashB64: Uint8Array;\r\n\r\n  public genesisId: string;\r\n\r\n  public versions: string[];\r\n\r\n  /**\r\n   * Creates a new `Version` object.\r\n   * @param build -\r\n   * @param genesisHashB64 -\r\n   * @param genesisId -\r\n   * @param versions -\r\n   */\r\n  constructor({\r\n    build,\r\n    genesisHashB64,\r\n    genesisId,\r\n    versions,\r\n  }: {\r\n    build: BuildVersion;\r\n    genesisHashB64: string | Uint8Array;\r\n    genesisId: string;\r\n    versions: string[];\r\n  }) {\r\n    super();\r\n    this.build = build;\r\n    this.genesisHashB64 =\r\n      typeof genesisHashB64 === 'string'\r\n        ? new Uint8Array(Buffer.from(genesisHashB64, 'base64'))\r\n        : genesisHashB64;\r\n    this.genesisId = genesisId;\r\n    this.versions = versions;\r\n\r\n    this.attribute_map = {\r\n      build: 'build',\r\n      genesisHashB64: 'genesis_hash_b64',\r\n      genesisId: 'genesis_id',\r\n      versions: 'versions',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): Version {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['build'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'build': ${data}`);\r\n    if (typeof data['genesis_hash_b64'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'genesis_hash_b64': ${data}`\r\n      );\r\n    if (typeof data['genesis_id'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'genesis_id': ${data}`\r\n      );\r\n    if (!Array.isArray(data['versions']))\r\n      throw new Error(\r\n        `Response is missing required array field 'versions': ${data}`\r\n      );\r\n    return new Version({\r\n      build: BuildVersion.from_obj_for_encoding(data['build']),\r\n      genesisHashB64: data['genesis_hash_b64'],\r\n      genesisId: data['genesis_id'],\r\n      versions: data['versions'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
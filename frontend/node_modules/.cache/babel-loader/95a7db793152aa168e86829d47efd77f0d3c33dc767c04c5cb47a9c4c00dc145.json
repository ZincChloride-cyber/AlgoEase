{"ast":null,"code":"import { Buffer } from 'buffer';\nimport JSONRequest from '../jsonrequest';\n/**\r\n * Accept base64 string or Uint8Array and output base64 string\r\n * @param data - Base64 string or Uint8Array\r\n * @returns The inputted base64 string, or a base64 string representation of the Uint8Array\r\n */\nexport function base64StringFunnel(data) {\n  if (typeof data === 'string') {\n    return data;\n  }\n  return Buffer.from(data).toString('base64');\n}\nexport default class LookupAccountTransactions extends JSONRequest {\n  /**\r\n   * Returns transactions relating to the given account.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient.lookupAccountTransactions(address).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idtransactions)\r\n   * @param account - The address of the account.\r\n   */\n  constructor(c, intDecoding, account) {\n    super(c, intDecoding);\n    this.account = account;\n    this.account = account;\n  }\n  /**\r\n   * @returns `/v2/accounts/${account}/transactions`\r\n   */\n  path() {\n    return `/v2/accounts/${this.account}/transactions`;\n  }\n  /**\r\n   * Specifies a prefix which must be contained in the note field.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const notePrefixBase64Encoded = \"Y3JlYXRl\";\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .notePrefix(notePrefixBase64Encoded)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param prefix - base64 string or uint8array\r\n   * @category query\r\n   */\n  notePrefix(prefix) {\n    this.query['note-prefix'] = base64StringFunnel(prefix);\n    return this;\n  }\n  /**\r\n   * Type of transaction to filter with.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .txType(\"appl\")\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param type - one of `pay`, `keyreg`, `acfg`, `axfer`, `afrz`, `appl`, `stpf`\r\n   * @category query\r\n   */\n  txType(type) {\n    this.query['tx-type'] = type;\n    return this;\n  }\n  /**\r\n   * Type of signature to filter with.\r\n   * - sig: Standard\r\n   * - msig: MultiSig\r\n   * - lsig: LogicSig\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .sigType(\"msig\")\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param type - one of `sig`, `msig`, `lsig`\r\n   * @category query\r\n   */\n  sigType(type) {\n    this.query['sig-type'] = type;\n    return this;\n  }\n  /**\r\n   * Lookup the specific transaction by ID.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const txId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .txid(txId)\r\n   *        .do();\r\n   * ```\r\n   * @remarks Alternatively, use `indexerClient.lookupTransactionByID(txnId).do()`\r\n   * @param txid\r\n   * @category query\r\n   */\n  txid(txid) {\n    this.query.txid = txid;\n    return this;\n  }\n  /**\r\n   * Include results for the specified round.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const targetBlock = 18309917;\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .round(targetBlock)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param round\r\n   * @category query\r\n   */\n  round(round) {\n    this.query.round = round;\n    return this;\n  }\n  /**\r\n   * Include results at or after the specified min-round.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const minRound = 18309917;\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .minRound(minRound)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param round\r\n   * @category query\r\n   */\n  minRound(round) {\n    this.query['min-round'] = round;\n    return this;\n  }\n  /**\r\n   * Include results at or before the specified max-round.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxRound = 18309917;\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .maxRound(maxRound)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param round\r\n   * @category query\r\n   */\n  maxRound(round) {\n    this.query['max-round'] = round;\n    return this;\n  }\n  /**\r\n   * Asset ID to filter with.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const assetID = 163650;\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .assetID(assetID)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param id\r\n   * @category query\r\n   */\n  assetID(id) {\n    this.query['asset-id'] = id;\n    return this;\n  }\n  /**\r\n   * Maximum number of results to return.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxResults = 25;\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .limit(maxResults)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param limit\r\n   * @category query\r\n   */\n  limit(limit) {\n    this.query.limit = limit;\n    return this;\n  }\n  /**\r\n   * Include results before the given time.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const beforeTime = \"2022-02-02T20:20:22.02Z\";\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .beforeTime(beforeTime)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param before - rfc3339 string\r\n   * @category query\r\n   */\n  beforeTime(before) {\n    this.query['before-time'] = before;\n    return this;\n  }\n  /**\r\n   * Include results after the given time.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const afterTime = \"2022-10-21T00:00:11.55Z\";\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .afterTime(afterTime)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param after - rfc3339 string\r\n   * @category query\r\n   */\n  afterTime(after) {\n    this.query['after-time'] = after;\n    return this;\n  }\n  /**\r\n   * Filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\r\n   *\r\n   * #### Example 1\r\n   * ```typescript\r\n   * const minBalance = 300000;\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .currencyGreaterThan(minBalance - 1)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * #### Example 2\r\n   * ```typescript\r\n   * const assetID = 163650;\r\n   * const minBalance = 300000;\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .assetID(assetID)\r\n   *        .currencyGreaterThan(minBalance - 1)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param greater\r\n   * @category query\r\n   */\n  currencyGreaterThan(greater) {\n    // We convert the following to a string for now to correctly include zero values in request parameters.\n    this.query['currency-greater-than'] = greater.toString();\n    return this;\n  }\n  /**\r\n   * Filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\r\n   *\r\n   * #### Example 1\r\n   * ```typescript\r\n   * const maxBalance = 500000;\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .currencyLessThan(maxBalance + 1)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * #### Example 2\r\n   * ```typescript\r\n   * const assetID = 163650;\r\n   * const maxBalance = 500000;\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .assetID(assetID)\r\n   *        .currencyLessThan(maxBalance + 1)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param lesser\r\n   * @category query\r\n   */\n  currencyLessThan(lesser) {\n    this.query['currency-less-than'] = lesser;\n    return this;\n  }\n  /**\r\n   * The next page of results. Use the next token provided by the previous results.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxResults = 25;\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   *\r\n   * const accountTxnsPage1 = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .limit(maxResults)\r\n   *        .do();\r\n   *\r\n   * const accountTxnsPage2 = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .limit(maxResults)\r\n   *        .nextToken(accountTxnsPage1[\"next-token\"])\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param nextToken - provided by the previous results.\r\n   * @category query\r\n   */\n  nextToken(nextToken) {\n    this.query.next = nextToken;\n    return this;\n  }\n  /**\r\n   * Whether or not to include rekeying transactions.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .rekeyTo(false)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param rekeyTo\r\n   * @category query\r\n   */\n  rekeyTo(rekeyTo) {\n    this.query['rekey-to'] = rekeyTo;\n    return this;\n  }\n}","map":{"version":3,"names":["Buffer","JSONRequest","base64StringFunnel","data","from","toString","LookupAccountTransactions","constructor","c","intDecoding","account","path","notePrefix","prefix","query","txType","type","sigType","txid","round","minRound","maxRound","assetID","id","limit","beforeTime","before","afterTime","after","currencyGreaterThan","greater","currencyLessThan","lesser","nextToken","next","rekeyTo"],"sources":["C:\\Users\\Aditya singh\\AlgoEase\\frontend\\node_modules\\algosdk\\src\\client\\v2\\indexer\\lookupAccountTransactions.ts"],"sourcesContent":["import { Buffer } from 'buffer';\r\nimport JSONRequest from '../jsonrequest';\r\nimport HTTPClient from '../../client';\r\nimport IntDecoding from '../../../types/intDecoding';\r\n\r\n/**\r\n * Accept base64 string or Uint8Array and output base64 string\r\n * @param data - Base64 string or Uint8Array\r\n * @returns The inputted base64 string, or a base64 string representation of the Uint8Array\r\n */\r\nexport function base64StringFunnel(data: Uint8Array | string) {\r\n  if (typeof data === 'string') {\r\n    return data;\r\n  }\r\n  return Buffer.from(data).toString('base64');\r\n}\r\n\r\nexport default class LookupAccountTransactions extends JSONRequest {\r\n  /**\r\n   * Returns transactions relating to the given account.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient.lookupAccountTransactions(address).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2accountsaccount-idtransactions)\r\n   * @param account - The address of the account.\r\n   */\r\n  constructor(\r\n    c: HTTPClient,\r\n    intDecoding: IntDecoding,\r\n    private account: string\r\n  ) {\r\n    super(c, intDecoding);\r\n    this.account = account;\r\n  }\r\n\r\n  /**\r\n   * @returns `/v2/accounts/${account}/transactions`\r\n   */\r\n  path() {\r\n    return `/v2/accounts/${this.account}/transactions`;\r\n  }\r\n\r\n  /**\r\n   * Specifies a prefix which must be contained in the note field.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const notePrefixBase64Encoded = \"Y3JlYXRl\";\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .notePrefix(notePrefixBase64Encoded)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param prefix - base64 string or uint8array\r\n   * @category query\r\n   */\r\n  notePrefix(prefix: Uint8Array | string) {\r\n    this.query['note-prefix'] = base64StringFunnel(prefix);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Type of transaction to filter with.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .txType(\"appl\")\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param type - one of `pay`, `keyreg`, `acfg`, `axfer`, `afrz`, `appl`, `stpf`\r\n   * @category query\r\n   */\r\n  txType(type: string) {\r\n    this.query['tx-type'] = type;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Type of signature to filter with.\r\n   * - sig: Standard\r\n   * - msig: MultiSig\r\n   * - lsig: LogicSig\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .sigType(\"msig\")\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param type - one of `sig`, `msig`, `lsig`\r\n   * @category query\r\n   */\r\n  sigType(type: string) {\r\n    this.query['sig-type'] = type;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Lookup the specific transaction by ID.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const txId = \"MEUOC4RQJB23CQZRFRKYEI6WBO73VTTPST5A7B3S5OKBUY6LFUDA\";\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .txid(txId)\r\n   *        .do();\r\n   * ```\r\n   * @remarks Alternatively, use `indexerClient.lookupTransactionByID(txnId).do()`\r\n   * @param txid\r\n   * @category query\r\n   */\r\n  txid(txid: string) {\r\n    this.query.txid = txid;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Include results for the specified round.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const targetBlock = 18309917;\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .round(targetBlock)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param round\r\n   * @category query\r\n   */\r\n  round(round: number) {\r\n    this.query.round = round;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Include results at or after the specified min-round.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const minRound = 18309917;\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .minRound(minRound)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param round\r\n   * @category query\r\n   */\r\n  minRound(round: number) {\r\n    this.query['min-round'] = round;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Include results at or before the specified max-round.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxRound = 18309917;\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .maxRound(maxRound)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param round\r\n   * @category query\r\n   */\r\n  maxRound(round: number) {\r\n    this.query['max-round'] = round;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Asset ID to filter with.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const assetID = 163650;\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .assetID(assetID)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param id\r\n   * @category query\r\n   */\r\n  assetID(id: number) {\r\n    this.query['asset-id'] = id;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Maximum number of results to return.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxResults = 25;\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .limit(maxResults)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param limit\r\n   * @category query\r\n   */\r\n  limit(limit: number) {\r\n    this.query.limit = limit;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Include results before the given time.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const beforeTime = \"2022-02-02T20:20:22.02Z\";\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .beforeTime(beforeTime)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param before - rfc3339 string\r\n   * @category query\r\n   */\r\n  beforeTime(before: string) {\r\n    this.query['before-time'] = before;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Include results after the given time.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const afterTime = \"2022-10-21T00:00:11.55Z\";\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .afterTime(afterTime)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param after - rfc3339 string\r\n   * @category query\r\n   */\r\n  afterTime(after: string) {\r\n    this.query['after-time'] = after;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\r\n   *\r\n   * #### Example 1\r\n   * ```typescript\r\n   * const minBalance = 300000;\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .currencyGreaterThan(minBalance - 1)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * #### Example 2\r\n   * ```typescript\r\n   * const assetID = 163650;\r\n   * const minBalance = 300000;\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .assetID(assetID)\r\n   *        .currencyGreaterThan(minBalance - 1)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param greater\r\n   * @category query\r\n   */\r\n  currencyGreaterThan(greater: number) {\r\n    // We convert the following to a string for now to correctly include zero values in request parameters.\r\n    this.query['currency-greater-than'] = greater.toString();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units.\r\n   *\r\n   * #### Example 1\r\n   * ```typescript\r\n   * const maxBalance = 500000;\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .currencyLessThan(maxBalance + 1)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * #### Example 2\r\n   * ```typescript\r\n   * const assetID = 163650;\r\n   * const maxBalance = 500000;\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .assetID(assetID)\r\n   *        .currencyLessThan(maxBalance + 1)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param lesser\r\n   * @category query\r\n   */\r\n  currencyLessThan(lesser: number) {\r\n    this.query['currency-less-than'] = lesser;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * The next page of results. Use the next token provided by the previous results.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const maxResults = 25;\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   *\r\n   * const accountTxnsPage1 = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .limit(maxResults)\r\n   *        .do();\r\n   *\r\n   * const accountTxnsPage2 = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .limit(maxResults)\r\n   *        .nextToken(accountTxnsPage1[\"next-token\"])\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param nextToken - provided by the previous results.\r\n   * @category query\r\n   */\r\n  nextToken(nextToken: string) {\r\n    this.query.next = nextToken;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Whether or not to include rekeying transactions.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const address = \"XBYLS2E6YI6XXL5BWCAMOA4GTWHXWENZMX5UHXMRNWWUQ7BXCY5WC5TEPA\";\r\n   * const accountTxns = await indexerClient\r\n   *        .lookupAccountTransactions(address)\r\n   *        .rekeyTo(false)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param rekeyTo\r\n   * @category query\r\n   */\r\n  rekeyTo(rekeyTo: boolean) {\r\n    this.query['rekey-to'] = rekeyTo;\r\n    return this;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
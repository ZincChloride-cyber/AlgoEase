export type Address = string;
export type Base64 = string;
export type TxnStr = Base64;
export type SignedTxnStr = Base64;
export interface MultisigMetadata {
    version: number;
    threshold: number;
    addrs: Address[];
}
export interface WalletTransaction {
    txn: TxnStr;
    authAddr?: Address;
    msig?: MultisigMetadata;
    signers?: Address[];
    stxn?: SignedTxnStr;
    message?: string;
    groupMessage?: string;
}
export interface SignTxnsOpts {
    message?: string;
    _luteSiteName: string;
}
export declare class SignTxnsError extends Error {
    code: number;
    data?: any;
    constructor(message: string, code: number, data?: any);
}
export interface Siwa {
    domain: string;
    account_address: string;
    uri: string;
    version: string;
    statement?: string;
    nonce?: string;
    "issued-at"?: string;
    "expiration-time"?: string;
    "not-before"?: string;
    "request-id"?: string;
    chain_id: "283";
    resources?: string[];
    type: "ed25519";
}
export interface SignData {
    data: string;
    signer: Uint8Array;
    domain: string;
    authenticatorData: Uint8Array;
    requestId?: string;
    hdPath?: string;
    signature?: Uint8Array;
}
export interface SignDataResponse extends SignData {
    signature: Uint8Array;
}
export declare enum ScopeType {
    UNKNOWN = -1,
    AUTH = 1
}
export interface SignMetadata {
    scope: ScopeType;
    encoding: string;
}
export declare class SignDataError extends Error {
    code: number;
    data?: any;
    constructor(message: string, code: number, data?: any);
}
export declare const BASE_URL = "https://lute.app";
export declare const EXT_ID = "kiaoohollfkjhikdifohdckeidckokjh";
export default class LuteConnect {
    siteName: string;
    forceWeb: boolean;
    constructor(siteName?: string);
    connect(genesisID: string): Promise<Address[]>;
    signTxns(txns: WalletTransaction[]): Promise<(Uint8Array | null)[]>;
    signData(data: string, metadata: SignMetadata): Promise<SignDataResponse>;
}

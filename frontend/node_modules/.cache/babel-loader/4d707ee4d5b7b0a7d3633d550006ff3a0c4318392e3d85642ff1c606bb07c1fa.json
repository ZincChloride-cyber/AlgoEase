{"ast":null,"code":"import * as encoding from '../../../encoding/encoding';\nimport JSONRequest from '../jsonrequest';\n/**\r\n * block gets the block info for the given round. this call may block\r\n */\nexport default class Block extends JSONRequest {\n  constructor(c, roundNumber) {\n    super(c);\n    if (!Number.isInteger(roundNumber)) throw Error('roundNumber should be an integer');\n    this.round = roundNumber;\n    this.query = {\n      format: 'msgpack'\n    };\n  }\n  path() {\n    return `/v2/blocks/${this.round}`;\n  }\n  /**\r\n   * If true, only the block header (exclusive of payset or certificate) may be included in response.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   *\r\n   * const roundNumber = 41000000;\r\n   *\r\n   * const blockResponse = await algodClient\r\n   *        .block(roundNumber)\r\n   *        .headerOnly(true)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param headerOnly - the flag indicating whether exclusively return header in response\r\n   * @category query\r\n   */\n  headerOnly(headerOnly) {\n    this.query['header-only'] = headerOnly;\n    return this;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  prepare(body) {\n    if (body && body.byteLength > 0) {\n      return encoding.decode(body);\n    }\n    return undefined;\n  }\n}","map":{"version":3,"names":["encoding","JSONRequest","Block","constructor","c","roundNumber","Number","isInteger","Error","round","query","format","path","headerOnly","prepare","body","byteLength","decode","undefined"],"sources":["C:\\Users\\Aditya singh\\AlgoEase\\frontend\\node_modules\\algosdk\\src\\client\\v2\\algod\\block.ts"],"sourcesContent":["import * as encoding from '../../../encoding/encoding';\r\nimport JSONRequest from '../jsonrequest';\r\nimport HTTPClient from '../../client';\r\n\r\n/**\r\n * block gets the block info for the given round. this call may block\r\n */\r\nexport default class Block extends JSONRequest {\r\n  private round: number;\r\n\r\n  constructor(c: HTTPClient, roundNumber: number) {\r\n    super(c);\r\n    if (!Number.isInteger(roundNumber))\r\n      throw Error('roundNumber should be an integer');\r\n    this.round = roundNumber;\r\n    this.query = { format: 'msgpack' };\r\n  }\r\n\r\n  path() {\r\n    return `/v2/blocks/${this.round}`;\r\n  }\r\n\r\n  /**\r\n   * If true, only the block header (exclusive of payset or certificate) may be included in response.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   *\r\n   * const roundNumber = 41000000;\r\n   *\r\n   * const blockResponse = await algodClient\r\n   *        .block(roundNumber)\r\n   *        .headerOnly(true)\r\n   *        .do();\r\n   * ```\r\n   *\r\n   * @param headerOnly - the flag indicating whether exclusively return header in response\r\n   * @category query\r\n   */\r\n  headerOnly(headerOnly: boolean) {\r\n    this.query['header-only'] = headerOnly;\r\n    return this;\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  prepare(body: Uint8Array) {\r\n    if (body && body.byteLength > 0) {\r\n      return encoding.decode(body) as Record<string, any>;\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAO,KAAKA,QAAQ,MAAM,4BAA4B;AACtD,OAAOC,WAAW,MAAM,gBAAgB;AAGxC;;;AAGA,eAAc,MAAOC,KAAM,SAAQD,WAAW;EAG5CE,YAAYC,CAAa,EAAEC,WAAmB;IAC5C,KAAK,CAACD,CAAC,CAAC;IACR,IAAI,CAACE,MAAM,CAACC,SAAS,CAACF,WAAW,CAAC,EAChC,MAAMG,KAAK,CAAC,kCAAkC,CAAC;IACjD,IAAI,CAACC,KAAK,GAAGJ,WAAW;IACxB,IAAI,CAACK,KAAK,GAAG;MAAEC,MAAM,EAAE;IAAS,CAAE;EACpC;EAEAC,IAAIA,CAAA;IACF,OAAO,cAAc,IAAI,CAACH,KAAK,EAAE;EACnC;EAEA;;;;;;;;;;;;;;;;;EAiBAI,UAAUA,CAACA,UAAmB;IAC5B,IAAI,CAACH,KAAK,CAAC,aAAa,CAAC,GAAGG,UAAU;IACtC,OAAO,IAAI;EACb;EAEA;EACAC,OAAOA,CAACC,IAAgB;IACtB,IAAIA,IAAI,IAAIA,IAAI,CAACC,UAAU,GAAG,CAAC,EAAE;MAC/B,OAAOhB,QAAQ,CAACiB,MAAM,CAACF,IAAI,CAAwB;;IAErD,OAAOG,SAAS;EAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
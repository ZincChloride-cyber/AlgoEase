{"ast":null,"code":"import { Buffer } from 'buffer';\nimport JSONRequest from '../jsonrequest';\nimport { Box } from './models/types';\nexport default class LookupApplicationBoxByIDandName extends JSONRequest {\n  /**\r\n   * Returns information about indexed application boxes.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const boxName = Buffer.from(\"foo\");\r\n   * const boxResponse = await indexerClient\r\n   *        .LookupApplicationBoxByIDandName(1234, boxName)\r\n   *        .do();\r\n   * const boxValue = boxResponse.value;\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idbox)\r\n   * @oaram index - application index.\r\n   * @category GET\r\n   */\n  constructor(c, intDecoding, index, boxName) {\n    super(c, intDecoding);\n    this.index = index;\n    this.index = index;\n    // Encode query in base64 format and append the encoding prefix.\n    const encodedName = Buffer.from(boxName).toString('base64');\n    this.query.name = encodeURI(`b64:${encodedName}`);\n  }\n  /**\r\n   * @returns `/v2/applications/${index}/box`\r\n   */\n  path() {\n    return `/v2/applications/${this.index}/box`;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  prepare(body) {\n    return Box.from_obj_for_encoding(body);\n  }\n}","map":{"version":3,"names":["Buffer","JSONRequest","Box","LookupApplicationBoxByIDandName","constructor","c","intDecoding","index","boxName","encodedName","from","toString","query","name","encodeURI","path","prepare","body","from_obj_for_encoding"],"sources":["C:\\Users\\Aditya singh\\AlgoEase\\frontend\\node_modules\\algosdk\\src\\client\\v2\\indexer\\lookupApplicationBoxByIDandName.ts"],"sourcesContent":["import { Buffer } from 'buffer';\r\nimport JSONRequest from '../jsonrequest';\r\nimport HTTPClient from '../../client';\r\nimport IntDecoding from '../../../types/intDecoding';\r\nimport { Box } from './models/types';\r\n\r\nexport default class LookupApplicationBoxByIDandName extends JSONRequest<\r\n  Box,\r\n  Record<string, any>\r\n> {\r\n  /**\r\n   * Returns information about indexed application boxes.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const boxName = Buffer.from(\"foo\");\r\n   * const boxResponse = await indexerClient\r\n   *        .LookupApplicationBoxByIDandName(1234, boxName)\r\n   *        .do();\r\n   * const boxValue = boxResponse.value;\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2applicationsapplication-idbox)\r\n   * @oaram index - application index.\r\n   * @category GET\r\n   */\r\n  constructor(\r\n    c: HTTPClient,\r\n    intDecoding: IntDecoding,\r\n    private index: number,\r\n    boxName: Uint8Array\r\n  ) {\r\n    super(c, intDecoding);\r\n    this.index = index;\r\n    // Encode query in base64 format and append the encoding prefix.\r\n    const encodedName = Buffer.from(boxName).toString('base64');\r\n    this.query.name = encodeURI(`b64:${encodedName}`);\r\n  }\r\n\r\n  /**\r\n   * @returns `/v2/applications/${index}/box`\r\n   */\r\n  path() {\r\n    return `/v2/applications/${this.index}/box`;\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  prepare(body: Record<string, any>): Box {\r\n    return Box.from_obj_for_encoding(body);\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,WAAW,MAAM,gBAAgB;AAGxC,SAASC,GAAG,QAAQ,gBAAgB;AAEpC,eAAc,MAAOC,+BAAgC,SAAQF,WAG5D;EACC;;;;;;;;;;;;;;;;EAgBAG,YACEC,CAAa,EACbC,WAAwB,EAChBC,KAAa,EACrBC,OAAmB;IAEnB,KAAK,CAACH,CAAC,EAAEC,WAAW,CAAC;IAHb,KAAAC,KAAK,GAALA,KAAK;IAIb,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB;IACA,MAAME,WAAW,GAAGT,MAAM,CAACU,IAAI,CAACF,OAAO,CAAC,CAACG,QAAQ,CAAC,QAAQ,CAAC;IAC3D,IAAI,CAACC,KAAK,CAACC,IAAI,GAAGC,SAAS,CAAC,OAAOL,WAAW,EAAE,CAAC;EACnD;EAEA;;;EAGAM,IAAIA,CAAA;IACF,OAAO,oBAAoB,IAAI,CAACR,KAAK,MAAM;EAC7C;EAEA;EACAS,OAAOA,CAACC,IAAyB;IAC/B,OAAOf,GAAG,CAACgB,qBAAqB,CAACD,IAAI,CAAC;EACxC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
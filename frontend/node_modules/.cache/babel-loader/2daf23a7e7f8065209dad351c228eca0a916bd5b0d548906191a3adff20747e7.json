{"ast":null,"code":"// Wallet Integration Test\n// This utility helps test wallet connections and functionality\n\nexport const testWalletConnection = async () => {\n  console.log('🧪 Testing wallet connection...');\n  const results = {\n    walletsDetected: 0,\n    peraAvailable: false,\n    algosignerAvailable: false,\n    connectionTest: false,\n    errors: []\n  };\n  try {\n    // Test wallet detection\n    if (window.AlgoEaseWallets) {\n      results.walletsDetected = window.AlgoEaseWallets.available.length;\n      console.log(`✅ Detected ${results.walletsDetected} wallets`);\n    }\n\n    // Test Pera Wallet\n    if (window.algorand && window.algorand.pera) {\n      results.peraAvailable = true;\n      console.log('✅ Pera Wallet detected');\n    } else {\n      console.log('❌ Pera Wallet not detected');\n    }\n\n    // Test AlgoSigner\n    if (window.AlgoSigner) {\n      results.algosignerAvailable = true;\n      console.log('✅ AlgoSigner detected');\n    } else {\n      console.log('❌ AlgoSigner not detected');\n    }\n\n    // Test connection (without actually connecting)\n    if (results.walletsDetected > 0) {\n      results.connectionTest = true;\n      console.log('✅ Wallet connection should work');\n    } else {\n      results.errors.push('No wallets available for connection');\n      console.log('❌ No wallets available for connection');\n    }\n  } catch (error) {\n    results.errors.push(error.message);\n    console.error('❌ Wallet test failed:', error);\n  }\n  return results;\n};\nexport const testWalletSigning = async (walletType = 'pera') => {\n  console.log(`🧪 Testing ${walletType} wallet signing...`);\n  try {\n    if (walletType === 'pera' && window.algorand && window.algorand.pera) {\n      // Test Pera Wallet signing capability\n      console.log('✅ Pera Wallet signing interface available');\n      return {\n        success: true,\n        wallet: 'pera'\n      };\n    } else if (walletType === 'algosigner' && window.AlgoSigner) {\n      // Test AlgoSigner signing capability\n      console.log('✅ AlgoSigner signing interface available');\n      return {\n        success: true,\n        wallet: 'algosigner'\n      };\n    } else {\n      throw new Error(`${walletType} wallet not available`);\n    }\n  } catch (error) {\n    console.error(`❌ ${walletType} wallet signing test failed:`, error);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\nexport const runWalletTests = async () => {\n  console.log('🚀 Running comprehensive wallet tests...');\n  const connectionTest = await testWalletConnection();\n  const peraTest = await testWalletSigning('pera');\n  const algosignerTest = await testWalletSigning('algosigner');\n  const results = {\n    connection: connectionTest,\n    pera: peraTest,\n    algosigner: algosignerTest,\n    summary: {\n      totalTests: 3,\n      passed: 0,\n      failed: 0\n    }\n  };\n\n  // Calculate summary\n  if (connectionTest.connectionTest) results.summary.passed++;else results.summary.failed++;\n  if (peraTest.success) results.summary.passed++;else results.summary.failed++;\n  if (algosignerTest.success) results.summary.passed++;else results.summary.failed++;\n  console.log('📊 Test Results:', results);\n  return results;\n};\n\n// Auto-run tests when imported\nif (typeof window !== 'undefined') {\n  // Run tests after a short delay to allow wallets to load\n  setTimeout(() => {\n    runWalletTests();\n  }, 2000);\n}","map":{"version":3,"names":["testWalletConnection","console","log","results","walletsDetected","peraAvailable","algosignerAvailable","connectionTest","errors","window","AlgoEaseWallets","available","length","algorand","pera","AlgoSigner","push","error","message","testWalletSigning","walletType","success","wallet","Error","runWalletTests","peraTest","algosignerTest","connection","algosigner","summary","totalTests","passed","failed","setTimeout"],"sources":["C:/Users/Aditya singh/AlgoEase/frontend/src/utils/walletTest.js"],"sourcesContent":["// Wallet Integration Test\r\n// This utility helps test wallet connections and functionality\r\n\r\nexport const testWalletConnection = async () => {\r\n  console.log('🧪 Testing wallet connection...');\r\n  \r\n  const results = {\r\n    walletsDetected: 0,\r\n    peraAvailable: false,\r\n    algosignerAvailable: false,\r\n    connectionTest: false,\r\n    errors: []\r\n  };\r\n\r\n  try {\r\n    // Test wallet detection\r\n    if (window.AlgoEaseWallets) {\r\n      results.walletsDetected = window.AlgoEaseWallets.available.length;\r\n      console.log(`✅ Detected ${results.walletsDetected} wallets`);\r\n    }\r\n\r\n    // Test Pera Wallet\r\n    if (window.algorand && window.algorand.pera) {\r\n      results.peraAvailable = true;\r\n      console.log('✅ Pera Wallet detected');\r\n    } else {\r\n      console.log('❌ Pera Wallet not detected');\r\n    }\r\n\r\n    // Test AlgoSigner\r\n    if (window.AlgoSigner) {\r\n      results.algosignerAvailable = true;\r\n      console.log('✅ AlgoSigner detected');\r\n    } else {\r\n      console.log('❌ AlgoSigner not detected');\r\n    }\r\n\r\n    // Test connection (without actually connecting)\r\n    if (results.walletsDetected > 0) {\r\n      results.connectionTest = true;\r\n      console.log('✅ Wallet connection should work');\r\n    } else {\r\n      results.errors.push('No wallets available for connection');\r\n      console.log('❌ No wallets available for connection');\r\n    }\r\n\r\n  } catch (error) {\r\n    results.errors.push(error.message);\r\n    console.error('❌ Wallet test failed:', error);\r\n  }\r\n\r\n  return results;\r\n};\r\n\r\nexport const testWalletSigning = async (walletType = 'pera') => {\r\n  console.log(`🧪 Testing ${walletType} wallet signing...`);\r\n  \r\n  try {\r\n    if (walletType === 'pera' && window.algorand && window.algorand.pera) {\r\n      // Test Pera Wallet signing capability\r\n      console.log('✅ Pera Wallet signing interface available');\r\n      return { success: true, wallet: 'pera' };\r\n    } else if (walletType === 'algosigner' && window.AlgoSigner) {\r\n      // Test AlgoSigner signing capability\r\n      console.log('✅ AlgoSigner signing interface available');\r\n      return { success: true, wallet: 'algosigner' };\r\n    } else {\r\n      throw new Error(`${walletType} wallet not available`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`❌ ${walletType} wallet signing test failed:`, error);\r\n    return { success: false, error: error.message };\r\n  }\r\n};\r\n\r\nexport const runWalletTests = async () => {\r\n  console.log('🚀 Running comprehensive wallet tests...');\r\n  \r\n  const connectionTest = await testWalletConnection();\r\n  const peraTest = await testWalletSigning('pera');\r\n  const algosignerTest = await testWalletSigning('algosigner');\r\n  \r\n  const results = {\r\n    connection: connectionTest,\r\n    pera: peraTest,\r\n    algosigner: algosignerTest,\r\n    summary: {\r\n      totalTests: 3,\r\n      passed: 0,\r\n      failed: 0\r\n    }\r\n  };\r\n  \r\n  // Calculate summary\r\n  if (connectionTest.connectionTest) results.summary.passed++;\r\n  else results.summary.failed++;\r\n  \r\n  if (peraTest.success) results.summary.passed++;\r\n  else results.summary.failed++;\r\n  \r\n  if (algosignerTest.success) results.summary.passed++;\r\n  else results.summary.failed++;\r\n  \r\n  console.log('📊 Test Results:', results);\r\n  return results;\r\n};\r\n\r\n// Auto-run tests when imported\r\nif (typeof window !== 'undefined') {\r\n  // Run tests after a short delay to allow wallets to load\r\n  setTimeout(() => {\r\n    runWalletTests();\r\n  }, 2000);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
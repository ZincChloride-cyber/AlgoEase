{"ast":null,"code":"/**\r\n * NOTICE: This file was generated. Editing this file manually is not recommended.\r\n */\n/* eslint-disable no-use-before-define */\nimport { Buffer } from 'buffer';\nimport BaseModel from '../../basemodel';\n/**\r\n * Account information at a given round.\r\n * Definition:\r\n * data/basics/userBalance.go : AccountData\r\n */\nexport class Account extends BaseModel {\n  /**\r\n   * Creates a new `Account` object.\r\n   * @param address - the account public key\r\n   * @param amount - total number of MicroAlgos in the account\r\n   * @param amountWithoutPendingRewards - specifies the amount of MicroAlgos in the account, without the pending rewards.\r\n   * @param minBalance - MicroAlgo balance required by the account.\r\n   * The requirement grows based on asset and application usage.\r\n   * @param pendingRewards - amount of MicroAlgos of pending rewards in this account.\r\n   * @param rewards - total rewards of MicroAlgos the account has received, including pending rewards.\r\n   * @param round - The round for which this information is relevant.\r\n   * @param status - voting status of the account's MicroAlgos\r\n   * * Offline - indicates that the associated account is delegated.\r\n   * * Online - indicates that the associated account used as part of the delegation\r\n   * pool.\r\n   * * NotParticipating - indicates that the associated account is neither a\r\n   * delegator nor a delegate.\r\n   * @param totalAppsOptedIn - The count of all applications that have been opted in, equivalent to the count\r\n   * of application local data (AppLocalState objects) stored in this account.\r\n   * @param totalAssetsOptedIn - The count of all assets that have been opted in, equivalent to the count of\r\n   * AssetHolding objects held by this account.\r\n   * @param totalBoxBytes - For app-accounts only. The total number of bytes allocated for the keys and\r\n   * values of boxes which belong to the associated application.\r\n   * @param totalBoxes - For app-accounts only. The total number of boxes which belong to the associated\r\n   * application.\r\n   * @param totalCreatedApps - The count of all apps (AppParams objects) created by this account.\r\n   * @param totalCreatedAssets - The count of all assets (AssetParams objects) created by this account.\r\n   * @param appsLocalState - application local data stored in this account.\r\n   * Note the raw object uses `map[int] -> AppLocalState` for this type.\r\n   * @param appsTotalExtraPages - the sum of all extra application program pages for this account.\r\n   * @param appsTotalSchema - the sum of all of the local schemas and global schemas in this account.\r\n   * Note: the raw account uses `StateSchema` for this type.\r\n   * @param assets - assets held by this account.\r\n   * Note the raw object uses `map[int] -> AssetHolding` for this type.\r\n   * @param authAddr - The address against which signing should be checked. If empty, the address of\r\n   * the current account is used. This field can be updated in any transaction by\r\n   * setting the RekeyTo field.\r\n   * @param closedAtRound - Round during which this account was most recently closed.\r\n   * @param createdApps - parameters of applications created by this account including app global data.\r\n   * Note: the raw account uses `map[int] -> AppParams` for this type.\r\n   * @param createdAssets - parameters of assets created by this account.\r\n   * Note: the raw account uses `map[int] -> Asset` for this type.\r\n   * @param createdAtRound - Round during which this account first appeared in a transaction.\r\n   * @param deleted - Whether or not this account is currently closed.\r\n   * @param incentiveEligible - can the account receive block incentives if its balance is in range at proposal\r\n   * time.\r\n   * @param lastHeartbeat - The round in which this account last went online, or explicitly renewed their\r\n   * online status.\r\n   * @param lastProposed - The round in which this account last proposed the block.\r\n   * @param participation - AccountParticipation describes the parameters used by this account in consensus\r\n   * protocol.\r\n   * @param rewardBase - used as part of the rewards computation. Only applicable to accounts which are\r\n   * participating.\r\n   * @param sigType - the type of signature used by this account, must be one of:\r\n   * * sig\r\n   * * msig\r\n   * * lsig\r\n   * * or null if unknown\r\n   */\n  constructor({\n    address,\n    amount,\n    amountWithoutPendingRewards,\n    minBalance,\n    pendingRewards,\n    rewards,\n    round,\n    status,\n    totalAppsOptedIn,\n    totalAssetsOptedIn,\n    totalBoxBytes,\n    totalBoxes,\n    totalCreatedApps,\n    totalCreatedAssets,\n    appsLocalState,\n    appsTotalExtraPages,\n    appsTotalSchema,\n    assets,\n    authAddr,\n    closedAtRound,\n    createdApps,\n    createdAssets,\n    createdAtRound,\n    deleted,\n    incentiveEligible,\n    lastHeartbeat,\n    lastProposed,\n    participation,\n    rewardBase,\n    sigType\n  }) {\n    super();\n    this.address = address;\n    this.amount = amount;\n    this.amountWithoutPendingRewards = amountWithoutPendingRewards;\n    this.minBalance = minBalance;\n    this.pendingRewards = pendingRewards;\n    this.rewards = rewards;\n    this.round = round;\n    this.status = status;\n    this.totalAppsOptedIn = totalAppsOptedIn;\n    this.totalAssetsOptedIn = totalAssetsOptedIn;\n    this.totalBoxBytes = totalBoxBytes;\n    this.totalBoxes = totalBoxes;\n    this.totalCreatedApps = totalCreatedApps;\n    this.totalCreatedAssets = totalCreatedAssets;\n    this.appsLocalState = appsLocalState;\n    this.appsTotalExtraPages = appsTotalExtraPages;\n    this.appsTotalSchema = appsTotalSchema;\n    this.assets = assets;\n    this.authAddr = authAddr;\n    this.closedAtRound = closedAtRound;\n    this.createdApps = createdApps;\n    this.createdAssets = createdAssets;\n    this.createdAtRound = createdAtRound;\n    this.deleted = deleted;\n    this.incentiveEligible = incentiveEligible;\n    this.lastHeartbeat = lastHeartbeat;\n    this.lastProposed = lastProposed;\n    this.participation = participation;\n    this.rewardBase = rewardBase;\n    this.sigType = sigType;\n    this.attribute_map = {\n      address: 'address',\n      amount: 'amount',\n      amountWithoutPendingRewards: 'amount-without-pending-rewards',\n      minBalance: 'min-balance',\n      pendingRewards: 'pending-rewards',\n      rewards: 'rewards',\n      round: 'round',\n      status: 'status',\n      totalAppsOptedIn: 'total-apps-opted-in',\n      totalAssetsOptedIn: 'total-assets-opted-in',\n      totalBoxBytes: 'total-box-bytes',\n      totalBoxes: 'total-boxes',\n      totalCreatedApps: 'total-created-apps',\n      totalCreatedAssets: 'total-created-assets',\n      appsLocalState: 'apps-local-state',\n      appsTotalExtraPages: 'apps-total-extra-pages',\n      appsTotalSchema: 'apps-total-schema',\n      assets: 'assets',\n      authAddr: 'auth-addr',\n      closedAtRound: 'closed-at-round',\n      createdApps: 'created-apps',\n      createdAssets: 'created-assets',\n      createdAtRound: 'created-at-round',\n      deleted: 'deleted',\n      incentiveEligible: 'incentive-eligible',\n      lastHeartbeat: 'last-heartbeat',\n      lastProposed: 'last-proposed',\n      participation: 'participation',\n      rewardBase: 'reward-base',\n      sigType: 'sig-type'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['address'] === 'undefined') throw new Error(`Response is missing required field 'address': ${data}`);\n    if (typeof data['amount'] === 'undefined') throw new Error(`Response is missing required field 'amount': ${data}`);\n    if (typeof data['amount-without-pending-rewards'] === 'undefined') throw new Error(`Response is missing required field 'amount-without-pending-rewards': ${data}`);\n    if (typeof data['min-balance'] === 'undefined') throw new Error(`Response is missing required field 'min-balance': ${data}`);\n    if (typeof data['pending-rewards'] === 'undefined') throw new Error(`Response is missing required field 'pending-rewards': ${data}`);\n    if (typeof data['rewards'] === 'undefined') throw new Error(`Response is missing required field 'rewards': ${data}`);\n    if (typeof data['round'] === 'undefined') throw new Error(`Response is missing required field 'round': ${data}`);\n    if (typeof data['status'] === 'undefined') throw new Error(`Response is missing required field 'status': ${data}`);\n    if (typeof data['total-apps-opted-in'] === 'undefined') throw new Error(`Response is missing required field 'total-apps-opted-in': ${data}`);\n    if (typeof data['total-assets-opted-in'] === 'undefined') throw new Error(`Response is missing required field 'total-assets-opted-in': ${data}`);\n    if (typeof data['total-box-bytes'] === 'undefined') throw new Error(`Response is missing required field 'total-box-bytes': ${data}`);\n    if (typeof data['total-boxes'] === 'undefined') throw new Error(`Response is missing required field 'total-boxes': ${data}`);\n    if (typeof data['total-created-apps'] === 'undefined') throw new Error(`Response is missing required field 'total-created-apps': ${data}`);\n    if (typeof data['total-created-assets'] === 'undefined') throw new Error(`Response is missing required field 'total-created-assets': ${data}`);\n    return new Account({\n      address: data['address'],\n      amount: data['amount'],\n      amountWithoutPendingRewards: data['amount-without-pending-rewards'],\n      minBalance: data['min-balance'],\n      pendingRewards: data['pending-rewards'],\n      rewards: data['rewards'],\n      round: data['round'],\n      status: data['status'],\n      totalAppsOptedIn: data['total-apps-opted-in'],\n      totalAssetsOptedIn: data['total-assets-opted-in'],\n      totalBoxBytes: data['total-box-bytes'],\n      totalBoxes: data['total-boxes'],\n      totalCreatedApps: data['total-created-apps'],\n      totalCreatedAssets: data['total-created-assets'],\n      appsLocalState: typeof data['apps-local-state'] !== 'undefined' ? data['apps-local-state'].map(ApplicationLocalState.from_obj_for_encoding) : undefined,\n      appsTotalExtraPages: data['apps-total-extra-pages'],\n      appsTotalSchema: typeof data['apps-total-schema'] !== 'undefined' ? ApplicationStateSchema.from_obj_for_encoding(data['apps-total-schema']) : undefined,\n      assets: typeof data['assets'] !== 'undefined' ? data['assets'].map(AssetHolding.from_obj_for_encoding) : undefined,\n      authAddr: data['auth-addr'],\n      closedAtRound: data['closed-at-round'],\n      createdApps: typeof data['created-apps'] !== 'undefined' ? data['created-apps'].map(Application.from_obj_for_encoding) : undefined,\n      createdAssets: typeof data['created-assets'] !== 'undefined' ? data['created-assets'].map(Asset.from_obj_for_encoding) : undefined,\n      createdAtRound: data['created-at-round'],\n      deleted: data['deleted'],\n      incentiveEligible: data['incentive-eligible'],\n      lastHeartbeat: data['last-heartbeat'],\n      lastProposed: data['last-proposed'],\n      participation: typeof data['participation'] !== 'undefined' ? AccountParticipation.from_obj_for_encoding(data['participation']) : undefined,\n      rewardBase: data['reward-base'],\n      sigType: data['sig-type']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * AccountParticipation describes the parameters used by this account in consensus\r\n * protocol.\r\n */\nexport class AccountParticipation extends BaseModel {\n  /**\r\n   * Creates a new `AccountParticipation` object.\r\n   * @param selectionParticipationKey - Selection public key (if any) currently registered for this round.\r\n   * @param voteFirstValid - First round for which this participation is valid.\r\n   * @param voteKeyDilution - Number of subkeys in each batch of participation keys.\r\n   * @param voteLastValid - Last round for which this participation is valid.\r\n   * @param voteParticipationKey - root participation public key (if any) currently registered for this round.\r\n   * @param stateProofKey - Root of the state proof key (if any)\r\n   */\n  constructor({\n    selectionParticipationKey,\n    voteFirstValid,\n    voteKeyDilution,\n    voteLastValid,\n    voteParticipationKey,\n    stateProofKey\n  }) {\n    super();\n    this.selectionParticipationKey = typeof selectionParticipationKey === 'string' ? new Uint8Array(Buffer.from(selectionParticipationKey, 'base64')) : selectionParticipationKey;\n    this.voteFirstValid = voteFirstValid;\n    this.voteKeyDilution = voteKeyDilution;\n    this.voteLastValid = voteLastValid;\n    this.voteParticipationKey = typeof voteParticipationKey === 'string' ? new Uint8Array(Buffer.from(voteParticipationKey, 'base64')) : voteParticipationKey;\n    this.stateProofKey = typeof stateProofKey === 'string' ? new Uint8Array(Buffer.from(stateProofKey, 'base64')) : stateProofKey;\n    this.attribute_map = {\n      selectionParticipationKey: 'selection-participation-key',\n      voteFirstValid: 'vote-first-valid',\n      voteKeyDilution: 'vote-key-dilution',\n      voteLastValid: 'vote-last-valid',\n      voteParticipationKey: 'vote-participation-key',\n      stateProofKey: 'state-proof-key'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['selection-participation-key'] === 'undefined') throw new Error(`Response is missing required field 'selection-participation-key': ${data}`);\n    if (typeof data['vote-first-valid'] === 'undefined') throw new Error(`Response is missing required field 'vote-first-valid': ${data}`);\n    if (typeof data['vote-key-dilution'] === 'undefined') throw new Error(`Response is missing required field 'vote-key-dilution': ${data}`);\n    if (typeof data['vote-last-valid'] === 'undefined') throw new Error(`Response is missing required field 'vote-last-valid': ${data}`);\n    if (typeof data['vote-participation-key'] === 'undefined') throw new Error(`Response is missing required field 'vote-participation-key': ${data}`);\n    return new AccountParticipation({\n      selectionParticipationKey: data['selection-participation-key'],\n      voteFirstValid: data['vote-first-valid'],\n      voteKeyDilution: data['vote-key-dilution'],\n      voteLastValid: data['vote-last-valid'],\n      voteParticipationKey: data['vote-participation-key'],\n      stateProofKey: data['state-proof-key']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n *\r\n */\nexport class AccountResponse extends BaseModel {\n  /**\r\n   * Creates a new `AccountResponse` object.\r\n   * @param account - Account information at a given round.\r\n   * Definition:\r\n   * data/basics/userBalance.go : AccountData\r\n   * @param currentRound - Round at which the results were computed.\r\n   */\n  constructor({\n    account,\n    currentRound\n  }) {\n    super();\n    this.account = account;\n    this.currentRound = currentRound;\n    this.attribute_map = {\n      account: 'account',\n      currentRound: 'current-round'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['account'] === 'undefined') throw new Error(`Response is missing required field 'account': ${data}`);\n    if (typeof data['current-round'] === 'undefined') throw new Error(`Response is missing required field 'current-round': ${data}`);\n    return new AccountResponse({\n      account: Account.from_obj_for_encoding(data['account']),\n      currentRound: data['current-round']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Application state delta.\r\n */\nexport class AccountStateDelta extends BaseModel {\n  /**\r\n   * Creates a new `AccountStateDelta` object.\r\n   * @param address -\r\n   * @param delta - Application state delta.\r\n   */\n  constructor({\n    address,\n    delta\n  }) {\n    super();\n    this.address = address;\n    this.delta = delta;\n    this.attribute_map = {\n      address: 'address',\n      delta: 'delta'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['address'] === 'undefined') throw new Error(`Response is missing required field 'address': ${data}`);\n    if (!Array.isArray(data['delta'])) throw new Error(`Response is missing required array field 'delta': ${data}`);\n    return new AccountStateDelta({\n      address: data['address'],\n      delta: data['delta'].map(EvalDeltaKeyValue.from_obj_for_encoding)\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n *\r\n */\nexport class AccountsResponse extends BaseModel {\n  /**\r\n   * Creates a new `AccountsResponse` object.\r\n   * @param accounts -\r\n   * @param currentRound - Round at which the results were computed.\r\n   * @param nextToken - Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\n  constructor({\n    accounts,\n    currentRound,\n    nextToken\n  }) {\n    super();\n    this.accounts = accounts;\n    this.currentRound = currentRound;\n    this.nextToken = nextToken;\n    this.attribute_map = {\n      accounts: 'accounts',\n      currentRound: 'current-round',\n      nextToken: 'next-token'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['accounts'])) throw new Error(`Response is missing required array field 'accounts': ${data}`);\n    if (typeof data['current-round'] === 'undefined') throw new Error(`Response is missing required field 'current-round': ${data}`);\n    return new AccountsResponse({\n      accounts: data['accounts'].map(Account.from_obj_for_encoding),\n      currentRound: data['current-round'],\n      nextToken: data['next-token']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Application index and its parameters\r\n */\nexport class Application extends BaseModel {\n  /**\r\n   * Creates a new `Application` object.\r\n   * @param id - application index.\r\n   * @param params - application parameters.\r\n   * @param createdAtRound - Round when this application was created.\r\n   * @param deleted - Whether or not this application is currently deleted.\r\n   * @param deletedAtRound - Round when this application was deleted.\r\n   */\n  constructor({\n    id,\n    params,\n    createdAtRound,\n    deleted,\n    deletedAtRound\n  }) {\n    super();\n    this.id = id;\n    this.params = params;\n    this.createdAtRound = createdAtRound;\n    this.deleted = deleted;\n    this.deletedAtRound = deletedAtRound;\n    this.attribute_map = {\n      id: 'id',\n      params: 'params',\n      createdAtRound: 'created-at-round',\n      deleted: 'deleted',\n      deletedAtRound: 'deleted-at-round'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['id'] === 'undefined') throw new Error(`Response is missing required field 'id': ${data}`);\n    if (typeof data['params'] === 'undefined') throw new Error(`Response is missing required field 'params': ${data}`);\n    return new Application({\n      id: data['id'],\n      params: ApplicationParams.from_obj_for_encoding(data['params']),\n      createdAtRound: data['created-at-round'],\n      deleted: data['deleted'],\n      deletedAtRound: data['deleted-at-round']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Stores local state associated with an application.\r\n */\nexport class ApplicationLocalState extends BaseModel {\n  /**\r\n   * Creates a new `ApplicationLocalState` object.\r\n   * @param id - The application which this local state is for.\r\n   * @param schema - schema.\r\n   * @param closedOutAtRound - Round when account closed out of the application.\r\n   * @param deleted - Whether or not the application local state is currently deleted from its\r\n   * account.\r\n   * @param keyValue - storage.\r\n   * @param optedInAtRound - Round when the account opted into the application.\r\n   */\n  constructor({\n    id,\n    schema,\n    closedOutAtRound,\n    deleted,\n    keyValue,\n    optedInAtRound\n  }) {\n    super();\n    this.id = id;\n    this.schema = schema;\n    this.closedOutAtRound = closedOutAtRound;\n    this.deleted = deleted;\n    this.keyValue = keyValue;\n    this.optedInAtRound = optedInAtRound;\n    this.attribute_map = {\n      id: 'id',\n      schema: 'schema',\n      closedOutAtRound: 'closed-out-at-round',\n      deleted: 'deleted',\n      keyValue: 'key-value',\n      optedInAtRound: 'opted-in-at-round'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['id'] === 'undefined') throw new Error(`Response is missing required field 'id': ${data}`);\n    if (typeof data['schema'] === 'undefined') throw new Error(`Response is missing required field 'schema': ${data}`);\n    return new ApplicationLocalState({\n      id: data['id'],\n      schema: ApplicationStateSchema.from_obj_for_encoding(data['schema']),\n      closedOutAtRound: data['closed-out-at-round'],\n      deleted: data['deleted'],\n      keyValue: typeof data['key-value'] !== 'undefined' ? data['key-value'].map(TealKeyValue.from_obj_for_encoding) : undefined,\n      optedInAtRound: data['opted-in-at-round']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n *\r\n */\nexport class ApplicationLocalStatesResponse extends BaseModel {\n  /**\r\n   * Creates a new `ApplicationLocalStatesResponse` object.\r\n   * @param appsLocalStates -\r\n   * @param currentRound - Round at which the results were computed.\r\n   * @param nextToken - Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\n  constructor({\n    appsLocalStates,\n    currentRound,\n    nextToken\n  }) {\n    super();\n    this.appsLocalStates = appsLocalStates;\n    this.currentRound = currentRound;\n    this.nextToken = nextToken;\n    this.attribute_map = {\n      appsLocalStates: 'apps-local-states',\n      currentRound: 'current-round',\n      nextToken: 'next-token'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['apps-local-states'])) throw new Error(`Response is missing required array field 'apps-local-states': ${data}`);\n    if (typeof data['current-round'] === 'undefined') throw new Error(`Response is missing required field 'current-round': ${data}`);\n    return new ApplicationLocalStatesResponse({\n      appsLocalStates: data['apps-local-states'].map(ApplicationLocalState.from_obj_for_encoding),\n      currentRound: data['current-round'],\n      nextToken: data['next-token']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Stores the global information associated with an application.\r\n */\nexport class ApplicationLogData extends BaseModel {\n  /**\r\n   * Creates a new `ApplicationLogData` object.\r\n   * @param logs - Logs for the application being executed by the transaction.\r\n   * @param txid - Transaction ID\r\n   */\n  constructor({\n    logs,\n    txid\n  }) {\n    super();\n    this.logs = logs;\n    this.txid = txid;\n    this.attribute_map = {\n      logs: 'logs',\n      txid: 'txid'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['logs'])) throw new Error(`Response is missing required array field 'logs': ${data}`);\n    if (typeof data['txid'] === 'undefined') throw new Error(`Response is missing required field 'txid': ${data}`);\n    return new ApplicationLogData({\n      logs: data['logs'],\n      txid: data['txid']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n *\r\n */\nexport class ApplicationLogsResponse extends BaseModel {\n  /**\r\n   * Creates a new `ApplicationLogsResponse` object.\r\n   * @param applicationId - (appidx) application index.\r\n   * @param currentRound - Round at which the results were computed.\r\n   * @param logData -\r\n   * @param nextToken - Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\n  constructor({\n    applicationId,\n    currentRound,\n    logData,\n    nextToken\n  }) {\n    super();\n    this.applicationId = applicationId;\n    this.currentRound = currentRound;\n    this.logData = logData;\n    this.nextToken = nextToken;\n    this.attribute_map = {\n      applicationId: 'application-id',\n      currentRound: 'current-round',\n      logData: 'log-data',\n      nextToken: 'next-token'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['application-id'] === 'undefined') throw new Error(`Response is missing required field 'application-id': ${data}`);\n    if (typeof data['current-round'] === 'undefined') throw new Error(`Response is missing required field 'current-round': ${data}`);\n    return new ApplicationLogsResponse({\n      applicationId: data['application-id'],\n      currentRound: data['current-round'],\n      logData: typeof data['log-data'] !== 'undefined' ? data['log-data'].map(ApplicationLogData.from_obj_for_encoding) : undefined,\n      nextToken: data['next-token']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Stores the global information associated with an application.\r\n */\nexport class ApplicationParams extends BaseModel {\n  /**\r\n   * Creates a new `ApplicationParams` object.\r\n   * @param approvalProgram - approval program.\r\n   * @param clearStateProgram - clear state program.\r\n   * @param creator - The address that created this application. This is the address where the\r\n   * parameters and global state for this application can be found.\r\n   * @param extraProgramPages - the number of extra program pages available to this app.\r\n   * @param globalState - global state\r\n   * @param globalStateSchema - global schema\r\n   * @param localStateSchema - local schema\r\n   */\n  constructor({\n    approvalProgram,\n    clearStateProgram,\n    creator,\n    extraProgramPages,\n    globalState,\n    globalStateSchema,\n    localStateSchema\n  }) {\n    super();\n    this.approvalProgram = typeof approvalProgram === 'string' ? new Uint8Array(Buffer.from(approvalProgram, 'base64')) : approvalProgram;\n    this.clearStateProgram = typeof clearStateProgram === 'string' ? new Uint8Array(Buffer.from(clearStateProgram, 'base64')) : clearStateProgram;\n    this.creator = creator;\n    this.extraProgramPages = extraProgramPages;\n    this.globalState = globalState;\n    this.globalStateSchema = globalStateSchema;\n    this.localStateSchema = localStateSchema;\n    this.attribute_map = {\n      approvalProgram: 'approval-program',\n      clearStateProgram: 'clear-state-program',\n      creator: 'creator',\n      extraProgramPages: 'extra-program-pages',\n      globalState: 'global-state',\n      globalStateSchema: 'global-state-schema',\n      localStateSchema: 'local-state-schema'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['approval-program'] === 'undefined') throw new Error(`Response is missing required field 'approval-program': ${data}`);\n    if (typeof data['clear-state-program'] === 'undefined') throw new Error(`Response is missing required field 'clear-state-program': ${data}`);\n    return new ApplicationParams({\n      approvalProgram: data['approval-program'],\n      clearStateProgram: data['clear-state-program'],\n      creator: data['creator'],\n      extraProgramPages: data['extra-program-pages'],\n      globalState: typeof data['global-state'] !== 'undefined' ? data['global-state'].map(TealKeyValue.from_obj_for_encoding) : undefined,\n      globalStateSchema: typeof data['global-state-schema'] !== 'undefined' ? ApplicationStateSchema.from_obj_for_encoding(data['global-state-schema']) : undefined,\n      localStateSchema: typeof data['local-state-schema'] !== 'undefined' ? ApplicationStateSchema.from_obj_for_encoding(data['local-state-schema']) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n *\r\n */\nexport class ApplicationResponse extends BaseModel {\n  /**\r\n   * Creates a new `ApplicationResponse` object.\r\n   * @param currentRound - Round at which the results were computed.\r\n   * @param application - Application index and its parameters\r\n   */\n  constructor({\n    currentRound,\n    application\n  }) {\n    super();\n    this.currentRound = currentRound;\n    this.application = application;\n    this.attribute_map = {\n      currentRound: 'current-round',\n      application: 'application'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['current-round'] === 'undefined') throw new Error(`Response is missing required field 'current-round': ${data}`);\n    return new ApplicationResponse({\n      currentRound: data['current-round'],\n      application: typeof data['application'] !== 'undefined' ? Application.from_obj_for_encoding(data['application']) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Specifies maximums on the number of each type that may be stored.\r\n */\nexport class ApplicationStateSchema extends BaseModel {\n  /**\r\n   * Creates a new `ApplicationStateSchema` object.\r\n   * @param numByteSlice - number of byte slices.\r\n   * @param numUint - number of uints.\r\n   */\n  constructor({\n    numByteSlice,\n    numUint\n  }) {\n    super();\n    this.numByteSlice = numByteSlice;\n    this.numUint = numUint;\n    this.attribute_map = {\n      numByteSlice: 'num-byte-slice',\n      numUint: 'num-uint'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['num-byte-slice'] === 'undefined') throw new Error(`Response is missing required field 'num-byte-slice': ${data}`);\n    if (typeof data['num-uint'] === 'undefined') throw new Error(`Response is missing required field 'num-uint': ${data}`);\n    return new ApplicationStateSchema({\n      numByteSlice: data['num-byte-slice'],\n      numUint: data['num-uint']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n *\r\n */\nexport class ApplicationsResponse extends BaseModel {\n  /**\r\n   * Creates a new `ApplicationsResponse` object.\r\n   * @param applications -\r\n   * @param currentRound - Round at which the results were computed.\r\n   * @param nextToken - Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\n  constructor({\n    applications,\n    currentRound,\n    nextToken\n  }) {\n    super();\n    this.applications = applications;\n    this.currentRound = currentRound;\n    this.nextToken = nextToken;\n    this.attribute_map = {\n      applications: 'applications',\n      currentRound: 'current-round',\n      nextToken: 'next-token'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['applications'])) throw new Error(`Response is missing required array field 'applications': ${data}`);\n    if (typeof data['current-round'] === 'undefined') throw new Error(`Response is missing required field 'current-round': ${data}`);\n    return new ApplicationsResponse({\n      applications: data['applications'].map(Application.from_obj_for_encoding),\n      currentRound: data['current-round'],\n      nextToken: data['next-token']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Specifies both the unique identifier and the parameters for an asset\r\n */\nexport class Asset extends BaseModel {\n  /**\r\n   * Creates a new `Asset` object.\r\n   * @param index - unique asset identifier\r\n   * @param params - AssetParams specifies the parameters for an asset.\r\n   * (apar) when part of an AssetConfig transaction.\r\n   * Definition:\r\n   * data/transactions/asset.go : AssetParams\r\n   * @param createdAtRound - Round during which this asset was created.\r\n   * @param deleted - Whether or not this asset is currently deleted.\r\n   * @param destroyedAtRound - Round during which this asset was destroyed.\r\n   */\n  constructor({\n    index,\n    params,\n    createdAtRound,\n    deleted,\n    destroyedAtRound\n  }) {\n    super();\n    this.index = index;\n    this.params = params;\n    this.createdAtRound = createdAtRound;\n    this.deleted = deleted;\n    this.destroyedAtRound = destroyedAtRound;\n    this.attribute_map = {\n      index: 'index',\n      params: 'params',\n      createdAtRound: 'created-at-round',\n      deleted: 'deleted',\n      destroyedAtRound: 'destroyed-at-round'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['index'] === 'undefined') throw new Error(`Response is missing required field 'index': ${data}`);\n    if (typeof data['params'] === 'undefined') throw new Error(`Response is missing required field 'params': ${data}`);\n    return new Asset({\n      index: data['index'],\n      params: AssetParams.from_obj_for_encoding(data['params']),\n      createdAtRound: data['created-at-round'],\n      deleted: data['deleted'],\n      destroyedAtRound: data['destroyed-at-round']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n *\r\n */\nexport class AssetBalancesResponse extends BaseModel {\n  /**\r\n   * Creates a new `AssetBalancesResponse` object.\r\n   * @param balances -\r\n   * @param currentRound - Round at which the results were computed.\r\n   * @param nextToken - Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\n  constructor({\n    balances,\n    currentRound,\n    nextToken\n  }) {\n    super();\n    this.balances = balances;\n    this.currentRound = currentRound;\n    this.nextToken = nextToken;\n    this.attribute_map = {\n      balances: 'balances',\n      currentRound: 'current-round',\n      nextToken: 'next-token'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['balances'])) throw new Error(`Response is missing required array field 'balances': ${data}`);\n    if (typeof data['current-round'] === 'undefined') throw new Error(`Response is missing required field 'current-round': ${data}`);\n    return new AssetBalancesResponse({\n      balances: data['balances'].map(MiniAssetHolding.from_obj_for_encoding),\n      currentRound: data['current-round'],\n      nextToken: data['next-token']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Describes an asset held by an account.\r\n * Definition:\r\n * data/basics/userBalance.go : AssetHolding\r\n */\nexport class AssetHolding extends BaseModel {\n  /**\r\n   * Creates a new `AssetHolding` object.\r\n   * @param amount - number of units held.\r\n   * @param assetId - Asset ID of the holding.\r\n   * @param isFrozen - whether or not the holding is frozen.\r\n   * @param deleted - Whether or not the asset holding is currently deleted from its account.\r\n   * @param optedInAtRound - Round during which the account opted into this asset holding.\r\n   * @param optedOutAtRound - Round during which the account opted out of this asset holding.\r\n   */\n  constructor({\n    amount,\n    assetId,\n    isFrozen,\n    deleted,\n    optedInAtRound,\n    optedOutAtRound\n  }) {\n    super();\n    this.amount = amount;\n    this.assetId = assetId;\n    this.isFrozen = isFrozen;\n    this.deleted = deleted;\n    this.optedInAtRound = optedInAtRound;\n    this.optedOutAtRound = optedOutAtRound;\n    this.attribute_map = {\n      amount: 'amount',\n      assetId: 'asset-id',\n      isFrozen: 'is-frozen',\n      deleted: 'deleted',\n      optedInAtRound: 'opted-in-at-round',\n      optedOutAtRound: 'opted-out-at-round'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['amount'] === 'undefined') throw new Error(`Response is missing required field 'amount': ${data}`);\n    if (typeof data['asset-id'] === 'undefined') throw new Error(`Response is missing required field 'asset-id': ${data}`);\n    if (typeof data['is-frozen'] === 'undefined') throw new Error(`Response is missing required field 'is-frozen': ${data}`);\n    return new AssetHolding({\n      amount: data['amount'],\n      assetId: data['asset-id'],\n      isFrozen: data['is-frozen'],\n      deleted: data['deleted'],\n      optedInAtRound: data['opted-in-at-round'],\n      optedOutAtRound: data['opted-out-at-round']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n *\r\n */\nexport class AssetHoldingsResponse extends BaseModel {\n  /**\r\n   * Creates a new `AssetHoldingsResponse` object.\r\n   * @param assets -\r\n   * @param currentRound - Round at which the results were computed.\r\n   * @param nextToken - Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\n  constructor({\n    assets,\n    currentRound,\n    nextToken\n  }) {\n    super();\n    this.assets = assets;\n    this.currentRound = currentRound;\n    this.nextToken = nextToken;\n    this.attribute_map = {\n      assets: 'assets',\n      currentRound: 'current-round',\n      nextToken: 'next-token'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['assets'])) throw new Error(`Response is missing required array field 'assets': ${data}`);\n    if (typeof data['current-round'] === 'undefined') throw new Error(`Response is missing required field 'current-round': ${data}`);\n    return new AssetHoldingsResponse({\n      assets: data['assets'].map(AssetHolding.from_obj_for_encoding),\n      currentRound: data['current-round'],\n      nextToken: data['next-token']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * AssetParams specifies the parameters for an asset.\r\n * (apar) when part of an AssetConfig transaction.\r\n * Definition:\r\n * data/transactions/asset.go : AssetParams\r\n */\nexport class AssetParams extends BaseModel {\n  /**\r\n   * Creates a new `AssetParams` object.\r\n   * @param creator - The address that created this asset. This is the address where the parameters\r\n   * for this asset can be found, and also the address where unwanted asset units can\r\n   * be sent in the worst case.\r\n   * @param decimals - The number of digits to use after the decimal point when displaying this asset.\r\n   * If 0, the asset is not divisible. If 1, the base unit of the asset is in tenths.\r\n   * If 2, the base unit of the asset is in hundredths, and so on. This value must be\r\n   * between 0 and 19 (inclusive).\r\n   * @param total - The total number of units of this asset.\r\n   * @param clawback - Address of account used to clawback holdings of this asset. If empty, clawback\r\n   * is not permitted.\r\n   * @param defaultFrozen - Whether holdings of this asset are frozen by default.\r\n   * @param freeze - Address of account used to freeze holdings of this asset. If empty, freezing is\r\n   * not permitted.\r\n   * @param manager - Address of account used to manage the keys of this asset and to destroy it.\r\n   * @param metadataHash - A commitment to some unspecified asset metadata. The format of this metadata is\r\n   * up to the application.\r\n   * @param name - Name of this asset, as supplied by the creator. Included only when the asset\r\n   * name is composed of printable utf-8 characters.\r\n   * @param nameB64 - Base64 encoded name of this asset, as supplied by the creator.\r\n   * @param reserve - Address of account holding reserve (non-minted) units of this asset.\r\n   * @param unitName - Name of a unit of this asset, as supplied by the creator. Included only when the\r\n   * name of a unit of this asset is composed of printable utf-8 characters.\r\n   * @param unitNameB64 - Base64 encoded name of a unit of this asset, as supplied by the creator.\r\n   * @param url - URL where more information about the asset can be retrieved. Included only when\r\n   * the URL is composed of printable utf-8 characters.\r\n   * @param urlB64 - Base64 encoded URL where more information about the asset can be retrieved.\r\n   */\n  constructor({\n    creator,\n    decimals,\n    total,\n    clawback,\n    defaultFrozen,\n    freeze,\n    manager,\n    metadataHash,\n    name,\n    nameB64,\n    reserve,\n    unitName,\n    unitNameB64,\n    url,\n    urlB64\n  }) {\n    super();\n    this.creator = creator;\n    this.decimals = decimals;\n    this.total = total;\n    this.clawback = clawback;\n    this.defaultFrozen = defaultFrozen;\n    this.freeze = freeze;\n    this.manager = manager;\n    this.metadataHash = typeof metadataHash === 'string' ? new Uint8Array(Buffer.from(metadataHash, 'base64')) : metadataHash;\n    this.name = name;\n    this.nameB64 = typeof nameB64 === 'string' ? new Uint8Array(Buffer.from(nameB64, 'base64')) : nameB64;\n    this.reserve = reserve;\n    this.unitName = unitName;\n    this.unitNameB64 = typeof unitNameB64 === 'string' ? new Uint8Array(Buffer.from(unitNameB64, 'base64')) : unitNameB64;\n    this.url = url;\n    this.urlB64 = typeof urlB64 === 'string' ? new Uint8Array(Buffer.from(urlB64, 'base64')) : urlB64;\n    this.attribute_map = {\n      creator: 'creator',\n      decimals: 'decimals',\n      total: 'total',\n      clawback: 'clawback',\n      defaultFrozen: 'default-frozen',\n      freeze: 'freeze',\n      manager: 'manager',\n      metadataHash: 'metadata-hash',\n      name: 'name',\n      nameB64: 'name-b64',\n      reserve: 'reserve',\n      unitName: 'unit-name',\n      unitNameB64: 'unit-name-b64',\n      url: 'url',\n      urlB64: 'url-b64'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['creator'] === 'undefined') throw new Error(`Response is missing required field 'creator': ${data}`);\n    if (typeof data['decimals'] === 'undefined') throw new Error(`Response is missing required field 'decimals': ${data}`);\n    if (typeof data['total'] === 'undefined') throw new Error(`Response is missing required field 'total': ${data}`);\n    return new AssetParams({\n      creator: data['creator'],\n      decimals: data['decimals'],\n      total: data['total'],\n      clawback: data['clawback'],\n      defaultFrozen: data['default-frozen'],\n      freeze: data['freeze'],\n      manager: data['manager'],\n      metadataHash: data['metadata-hash'],\n      name: data['name'],\n      nameB64: data['name-b64'],\n      reserve: data['reserve'],\n      unitName: data['unit-name'],\n      unitNameB64: data['unit-name-b64'],\n      url: data['url'],\n      urlB64: data['url-b64']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n *\r\n */\nexport class AssetResponse extends BaseModel {\n  /**\r\n   * Creates a new `AssetResponse` object.\r\n   * @param asset - Specifies both the unique identifier and the parameters for an asset\r\n   * @param currentRound - Round at which the results were computed.\r\n   */\n  constructor({\n    asset,\n    currentRound\n  }) {\n    super();\n    this.asset = asset;\n    this.currentRound = currentRound;\n    this.attribute_map = {\n      asset: 'asset',\n      currentRound: 'current-round'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['asset'] === 'undefined') throw new Error(`Response is missing required field 'asset': ${data}`);\n    if (typeof data['current-round'] === 'undefined') throw new Error(`Response is missing required field 'current-round': ${data}`);\n    return new AssetResponse({\n      asset: Asset.from_obj_for_encoding(data['asset']),\n      currentRound: data['current-round']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n *\r\n */\nexport class AssetsResponse extends BaseModel {\n  /**\r\n   * Creates a new `AssetsResponse` object.\r\n   * @param assets -\r\n   * @param currentRound - Round at which the results were computed.\r\n   * @param nextToken - Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\n  constructor({\n    assets,\n    currentRound,\n    nextToken\n  }) {\n    super();\n    this.assets = assets;\n    this.currentRound = currentRound;\n    this.nextToken = nextToken;\n    this.attribute_map = {\n      assets: 'assets',\n      currentRound: 'current-round',\n      nextToken: 'next-token'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (!Array.isArray(data['assets'])) throw new Error(`Response is missing required array field 'assets': ${data}`);\n    if (typeof data['current-round'] === 'undefined') throw new Error(`Response is missing required field 'current-round': ${data}`);\n    return new AssetsResponse({\n      assets: data['assets'].map(Asset.from_obj_for_encoding),\n      currentRound: data['current-round'],\n      nextToken: data['next-token']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Block information.\r\n * Definition:\r\n * data/bookkeeping/block.go : Block\r\n */\nexport class Block extends BaseModel {\n  /**\r\n   * Creates a new `Block` object.\r\n   * @param genesisHash - (gh) hash to which this block belongs.\r\n   * @param genesisId - (gen) ID to which this block belongs.\r\n   * @param previousBlockHash - (prev) Previous block hash.\r\n   * @param round - (rnd) Current round on which this block was appended to the chain.\r\n   * @param seed - (seed) Sortition seed.\r\n   * @param timestamp - (ts) Block creation timestamp in seconds since eposh\r\n   * @param transactionsRoot - (txn) TransactionsRoot authenticates the set of transactions appearing in the\r\n   * block. More specifically, it's the root of a merkle tree whose leaves are the\r\n   * block's Txids, in lexicographic order. For the empty block, it's 0. Note that\r\n   * the TxnRoot does not authenticate the signatures on the transactions, only the\r\n   * transactions themselves. Two blocks with the same transactions but in a\r\n   * different order and with different signatures will have the same TxnRoot.\r\n   * @param transactionsRootSha256 - (txn256) TransactionsRootSHA256 is an auxiliary TransactionRoot, built using a\r\n   * vector commitment instead of a merkle tree, and SHA256 hash function instead of\r\n   * the default SHA512_256. This commitment can be used on environments where only\r\n   * the SHA256 function exists.\r\n   * @param bonus - the potential bonus payout for this block.\r\n   * @param feesCollected - the sum of all fees paid by transactions in this block.\r\n   * @param participationUpdates - Participation account data that needs to be checked/acted on by the network.\r\n   * @param proposer - the proposer of this block.\r\n   * @param proposerPayout - the actual amount transferred to the proposer from the fee sink.\r\n   * @param rewards - Fields relating to rewards,\r\n   * @param stateProofTracking - Tracks the status of state proofs.\r\n   * @param transactions - (txns) list of transactions corresponding to a given round.\r\n   * @param txnCounter - (tc) TxnCounter counts the number of transactions committed in the ledger, from\r\n   * the time at which support for this feature was introduced.\r\n   * Specifically, TxnCounter is the number of the next transaction that will be\r\n   * committed after this block. It is 0 when no transactions have ever been\r\n   * committed (since TxnCounter started being supported).\r\n   * @param upgradeState - Fields relating to a protocol upgrade.\r\n   * @param upgradeVote - Fields relating to voting for a protocol upgrade.\r\n   */\n  constructor({\n    genesisHash,\n    genesisId,\n    previousBlockHash,\n    round,\n    seed,\n    timestamp,\n    transactionsRoot,\n    transactionsRootSha256,\n    bonus,\n    feesCollected,\n    participationUpdates,\n    proposer,\n    proposerPayout,\n    rewards,\n    stateProofTracking,\n    transactions,\n    txnCounter,\n    upgradeState,\n    upgradeVote\n  }) {\n    super();\n    this.genesisHash = typeof genesisHash === 'string' ? new Uint8Array(Buffer.from(genesisHash, 'base64')) : genesisHash;\n    this.genesisId = genesisId;\n    this.previousBlockHash = typeof previousBlockHash === 'string' ? new Uint8Array(Buffer.from(previousBlockHash, 'base64')) : previousBlockHash;\n    this.round = round;\n    this.seed = typeof seed === 'string' ? new Uint8Array(Buffer.from(seed, 'base64')) : seed;\n    this.timestamp = timestamp;\n    this.transactionsRoot = typeof transactionsRoot === 'string' ? new Uint8Array(Buffer.from(transactionsRoot, 'base64')) : transactionsRoot;\n    this.transactionsRootSha256 = typeof transactionsRootSha256 === 'string' ? new Uint8Array(Buffer.from(transactionsRootSha256, 'base64')) : transactionsRootSha256;\n    this.bonus = bonus;\n    this.feesCollected = feesCollected;\n    this.participationUpdates = participationUpdates;\n    this.proposer = proposer;\n    this.proposerPayout = proposerPayout;\n    this.rewards = rewards;\n    this.stateProofTracking = stateProofTracking;\n    this.transactions = transactions;\n    this.txnCounter = txnCounter;\n    this.upgradeState = upgradeState;\n    this.upgradeVote = upgradeVote;\n    this.attribute_map = {\n      genesisHash: 'genesis-hash',\n      genesisId: 'genesis-id',\n      previousBlockHash: 'previous-block-hash',\n      round: 'round',\n      seed: 'seed',\n      timestamp: 'timestamp',\n      transactionsRoot: 'transactions-root',\n      transactionsRootSha256: 'transactions-root-sha256',\n      bonus: 'bonus',\n      feesCollected: 'fees-collected',\n      participationUpdates: 'participation-updates',\n      proposer: 'proposer',\n      proposerPayout: 'proposer-payout',\n      rewards: 'rewards',\n      stateProofTracking: 'state-proof-tracking',\n      transactions: 'transactions',\n      txnCounter: 'txn-counter',\n      upgradeState: 'upgrade-state',\n      upgradeVote: 'upgrade-vote'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['genesis-hash'] === 'undefined') throw new Error(`Response is missing required field 'genesis-hash': ${data}`);\n    if (typeof data['genesis-id'] === 'undefined') throw new Error(`Response is missing required field 'genesis-id': ${data}`);\n    if (typeof data['previous-block-hash'] === 'undefined') throw new Error(`Response is missing required field 'previous-block-hash': ${data}`);\n    if (typeof data['round'] === 'undefined') throw new Error(`Response is missing required field 'round': ${data}`);\n    if (typeof data['seed'] === 'undefined') throw new Error(`Response is missing required field 'seed': ${data}`);\n    if (typeof data['timestamp'] === 'undefined') throw new Error(`Response is missing required field 'timestamp': ${data}`);\n    if (typeof data['transactions-root'] === 'undefined') throw new Error(`Response is missing required field 'transactions-root': ${data}`);\n    if (typeof data['transactions-root-sha256'] === 'undefined') throw new Error(`Response is missing required field 'transactions-root-sha256': ${data}`);\n    return new Block({\n      genesisHash: data['genesis-hash'],\n      genesisId: data['genesis-id'],\n      previousBlockHash: data['previous-block-hash'],\n      round: data['round'],\n      seed: data['seed'],\n      timestamp: data['timestamp'],\n      transactionsRoot: data['transactions-root'],\n      transactionsRootSha256: data['transactions-root-sha256'],\n      bonus: data['bonus'],\n      feesCollected: data['fees-collected'],\n      participationUpdates: typeof data['participation-updates'] !== 'undefined' ? ParticipationUpdates.from_obj_for_encoding(data['participation-updates']) : undefined,\n      proposer: data['proposer'],\n      proposerPayout: data['proposer-payout'],\n      rewards: typeof data['rewards'] !== 'undefined' ? BlockRewards.from_obj_for_encoding(data['rewards']) : undefined,\n      stateProofTracking: typeof data['state-proof-tracking'] !== 'undefined' ? data['state-proof-tracking'].map(StateProofTracking.from_obj_for_encoding) : undefined,\n      transactions: typeof data['transactions'] !== 'undefined' ? data['transactions'].map(Transaction.from_obj_for_encoding) : undefined,\n      txnCounter: data['txn-counter'],\n      upgradeState: typeof data['upgrade-state'] !== 'undefined' ? BlockUpgradeState.from_obj_for_encoding(data['upgrade-state']) : undefined,\n      upgradeVote: typeof data['upgrade-vote'] !== 'undefined' ? BlockUpgradeVote.from_obj_for_encoding(data['upgrade-vote']) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n *\r\n */\nexport class BlockHeadersResponse extends BaseModel {\n  /**\r\n   * Creates a new `BlockHeadersResponse` object.\r\n   * @param blocks -\r\n   * @param currentRound - Round at which the results were computed.\r\n   * @param nextToken - Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\n  constructor({\n    blocks,\n    currentRound,\n    nextToken\n  }) {\n    super();\n    this.blocks = blocks;\n    this.currentRound = currentRound;\n    this.nextToken = nextToken;\n    this.attribute_map = {\n      blocks: 'blocks',\n      currentRound: 'current-round',\n      nextToken: 'next-token'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new BlockHeadersResponse({\n      blocks: typeof data['blocks'] !== 'undefined' ? data['blocks'].map(Block.from_obj_for_encoding) : undefined,\n      currentRound: data['current-round'],\n      nextToken: data['next-token']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Fields relating to rewards,\r\n */\nexport class BlockRewards extends BaseModel {\n  /**\r\n   * Creates a new `BlockRewards` object.\r\n   * @param feeSink - (fees) accepts transaction fees, it can only spend to the incentive pool.\r\n   * @param rewardsCalculationRound - (rwcalr) number of leftover MicroAlgos after the distribution of rewards-rate\r\n   * MicroAlgos for every reward unit in the next round.\r\n   * @param rewardsLevel - (earn) How many rewards, in MicroAlgos, have been distributed to each RewardUnit\r\n   * of MicroAlgos since genesis.\r\n   * @param rewardsPool - (rwd) accepts periodic injections from the fee-sink and continually\r\n   * redistributes them as rewards.\r\n   * @param rewardsRate - (rate) Number of new MicroAlgos added to the participation stake from rewards at\r\n   * the next round.\r\n   * @param rewardsResidue - (frac) Number of leftover MicroAlgos after the distribution of\r\n   * RewardsRate/rewardUnits MicroAlgos for every reward unit in the next round.\r\n   */\n  constructor({\n    feeSink,\n    rewardsCalculationRound,\n    rewardsLevel,\n    rewardsPool,\n    rewardsRate,\n    rewardsResidue\n  }) {\n    super();\n    this.feeSink = feeSink;\n    this.rewardsCalculationRound = rewardsCalculationRound;\n    this.rewardsLevel = rewardsLevel;\n    this.rewardsPool = rewardsPool;\n    this.rewardsRate = rewardsRate;\n    this.rewardsResidue = rewardsResidue;\n    this.attribute_map = {\n      feeSink: 'fee-sink',\n      rewardsCalculationRound: 'rewards-calculation-round',\n      rewardsLevel: 'rewards-level',\n      rewardsPool: 'rewards-pool',\n      rewardsRate: 'rewards-rate',\n      rewardsResidue: 'rewards-residue'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['fee-sink'] === 'undefined') throw new Error(`Response is missing required field 'fee-sink': ${data}`);\n    if (typeof data['rewards-calculation-round'] === 'undefined') throw new Error(`Response is missing required field 'rewards-calculation-round': ${data}`);\n    if (typeof data['rewards-level'] === 'undefined') throw new Error(`Response is missing required field 'rewards-level': ${data}`);\n    if (typeof data['rewards-pool'] === 'undefined') throw new Error(`Response is missing required field 'rewards-pool': ${data}`);\n    if (typeof data['rewards-rate'] === 'undefined') throw new Error(`Response is missing required field 'rewards-rate': ${data}`);\n    if (typeof data['rewards-residue'] === 'undefined') throw new Error(`Response is missing required field 'rewards-residue': ${data}`);\n    return new BlockRewards({\n      feeSink: data['fee-sink'],\n      rewardsCalculationRound: data['rewards-calculation-round'],\n      rewardsLevel: data['rewards-level'],\n      rewardsPool: data['rewards-pool'],\n      rewardsRate: data['rewards-rate'],\n      rewardsResidue: data['rewards-residue']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Fields relating to a protocol upgrade.\r\n */\nexport class BlockUpgradeState extends BaseModel {\n  /**\r\n   * Creates a new `BlockUpgradeState` object.\r\n   * @param currentProtocol - (proto) The current protocol version.\r\n   * @param nextProtocol - (nextproto) The next proposed protocol version.\r\n   * @param nextProtocolApprovals - (nextyes) Number of blocks which approved the protocol upgrade.\r\n   * @param nextProtocolSwitchOn - (nextswitch) Round on which the protocol upgrade will take effect.\r\n   * @param nextProtocolVoteBefore - (nextbefore) Deadline round for this protocol upgrade (No votes will be consider\r\n   * after this round).\r\n   */\n  constructor({\n    currentProtocol,\n    nextProtocol,\n    nextProtocolApprovals,\n    nextProtocolSwitchOn,\n    nextProtocolVoteBefore\n  }) {\n    super();\n    this.currentProtocol = currentProtocol;\n    this.nextProtocol = nextProtocol;\n    this.nextProtocolApprovals = nextProtocolApprovals;\n    this.nextProtocolSwitchOn = nextProtocolSwitchOn;\n    this.nextProtocolVoteBefore = nextProtocolVoteBefore;\n    this.attribute_map = {\n      currentProtocol: 'current-protocol',\n      nextProtocol: 'next-protocol',\n      nextProtocolApprovals: 'next-protocol-approvals',\n      nextProtocolSwitchOn: 'next-protocol-switch-on',\n      nextProtocolVoteBefore: 'next-protocol-vote-before'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['current-protocol'] === 'undefined') throw new Error(`Response is missing required field 'current-protocol': ${data}`);\n    return new BlockUpgradeState({\n      currentProtocol: data['current-protocol'],\n      nextProtocol: data['next-protocol'],\n      nextProtocolApprovals: data['next-protocol-approvals'],\n      nextProtocolSwitchOn: data['next-protocol-switch-on'],\n      nextProtocolVoteBefore: data['next-protocol-vote-before']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Fields relating to voting for a protocol upgrade.\r\n */\nexport class BlockUpgradeVote extends BaseModel {\n  /**\r\n   * Creates a new `BlockUpgradeVote` object.\r\n   * @param upgradeApprove - (upgradeyes) Indicates a yes vote for the current proposal.\r\n   * @param upgradeDelay - (upgradedelay) Indicates the time between acceptance and execution.\r\n   * @param upgradePropose - (upgradeprop) Indicates a proposed upgrade.\r\n   */\n  constructor({\n    upgradeApprove,\n    upgradeDelay,\n    upgradePropose\n  }) {\n    super();\n    this.upgradeApprove = upgradeApprove;\n    this.upgradeDelay = upgradeDelay;\n    this.upgradePropose = upgradePropose;\n    this.attribute_map = {\n      upgradeApprove: 'upgrade-approve',\n      upgradeDelay: 'upgrade-delay',\n      upgradePropose: 'upgrade-propose'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new BlockUpgradeVote({\n      upgradeApprove: data['upgrade-approve'],\n      upgradeDelay: data['upgrade-delay'],\n      upgradePropose: data['upgrade-propose']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Box name and its content.\r\n */\nexport class Box extends BaseModel {\n  /**\r\n   * Creates a new `Box` object.\r\n   * @param name - (name) box name, base64 encoded\r\n   * @param round - The round for which this information is relevant\r\n   * @param value - (value) box value, base64 encoded.\r\n   */\n  constructor({\n    name,\n    round,\n    value\n  }) {\n    super();\n    this.name = typeof name === 'string' ? new Uint8Array(Buffer.from(name, 'base64')) : name;\n    this.round = round;\n    this.value = typeof value === 'string' ? new Uint8Array(Buffer.from(value, 'base64')) : value;\n    this.attribute_map = {\n      name: 'name',\n      round: 'round',\n      value: 'value'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['name'] === 'undefined') throw new Error(`Response is missing required field 'name': ${data}`);\n    if (typeof data['round'] === 'undefined') throw new Error(`Response is missing required field 'round': ${data}`);\n    if (typeof data['value'] === 'undefined') throw new Error(`Response is missing required field 'value': ${data}`);\n    return new Box({\n      name: data['name'],\n      round: data['round'],\n      value: data['value']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Box descriptor describes an app box without a value.\r\n */\nexport class BoxDescriptor extends BaseModel {\n  /**\r\n   * Creates a new `BoxDescriptor` object.\r\n   * @param name - Base64 encoded box name\r\n   */\n  constructor({\n    name\n  }) {\n    super();\n    this.name = typeof name === 'string' ? new Uint8Array(Buffer.from(name, 'base64')) : name;\n    this.attribute_map = {\n      name: 'name'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['name'] === 'undefined') throw new Error(`Response is missing required field 'name': ${data}`);\n    return new BoxDescriptor({\n      name: data['name']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Box names of an application\r\n */\nexport class BoxesResponse extends BaseModel {\n  /**\r\n   * Creates a new `BoxesResponse` object.\r\n   * @param applicationId - (appidx) application index.\r\n   * @param boxes -\r\n   * @param nextToken - Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\n  constructor({\n    applicationId,\n    boxes,\n    nextToken\n  }) {\n    super();\n    this.applicationId = applicationId;\n    this.boxes = boxes;\n    this.nextToken = nextToken;\n    this.attribute_map = {\n      applicationId: 'application-id',\n      boxes: 'boxes',\n      nextToken: 'next-token'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['application-id'] === 'undefined') throw new Error(`Response is missing required field 'application-id': ${data}`);\n    if (!Array.isArray(data['boxes'])) throw new Error(`Response is missing required array field 'boxes': ${data}`);\n    return new BoxesResponse({\n      applicationId: data['application-id'],\n      boxes: data['boxes'].map(BoxDescriptor.from_obj_for_encoding),\n      nextToken: data['next-token']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Response for errors\r\n */\nexport class ErrorResponse extends BaseModel {\n  /**\r\n   * Creates a new `ErrorResponse` object.\r\n   * @param message -\r\n   * @param data -\r\n   */\n  constructor({\n    message,\n    data\n  }) {\n    super();\n    this.message = message;\n    this.data = data;\n    this.attribute_map = {\n      message: 'message',\n      data: 'data'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['message'] === 'undefined') throw new Error(`Response is missing required field 'message': ${data}`);\n    return new ErrorResponse({\n      message: data['message'],\n      data: data['data']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Represents a TEAL value delta.\r\n */\nexport class EvalDelta extends BaseModel {\n  /**\r\n   * Creates a new `EvalDelta` object.\r\n   * @param action - (at) delta action.\r\n   * @param bytes - (bs) bytes value.\r\n   * @param uint - (ui) uint value.\r\n   */\n  constructor({\n    action,\n    bytes,\n    uint\n  }) {\n    super();\n    this.action = action;\n    this.bytes = bytes;\n    this.uint = uint;\n    this.attribute_map = {\n      action: 'action',\n      bytes: 'bytes',\n      uint: 'uint'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['action'] === 'undefined') throw new Error(`Response is missing required field 'action': ${data}`);\n    return new EvalDelta({\n      action: data['action'],\n      bytes: data['bytes'],\n      uint: data['uint']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Key-value pairs for StateDelta.\r\n */\nexport class EvalDeltaKeyValue extends BaseModel {\n  /**\r\n   * Creates a new `EvalDeltaKeyValue` object.\r\n   * @param key -\r\n   * @param value - Represents a TEAL value delta.\r\n   */\n  constructor({\n    key,\n    value\n  }) {\n    super();\n    this.key = key;\n    this.value = value;\n    this.attribute_map = {\n      key: 'key',\n      value: 'value'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['key'] === 'undefined') throw new Error(`Response is missing required field 'key': ${data}`);\n    if (typeof data['value'] === 'undefined') throw new Error(`Response is missing required field 'value': ${data}`);\n    return new EvalDeltaKeyValue({\n      key: data['key'],\n      value: EvalDelta.from_obj_for_encoding(data['value'])\n    });\n    /* eslint-enable dot-notation */\n  }\n}\nexport class HashFactory extends BaseModel {\n  /**\r\n   * Creates a new `HashFactory` object.\r\n   * @param hashType - (t)\r\n   */\n  constructor({\n    hashType\n  }) {\n    super();\n    this.hashType = hashType;\n    this.attribute_map = {\n      hashType: 'hash-type'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new HashFactory({\n      hashType: data['hash-type']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * (hbprf) HbProof is a signature using HeartbeatAddress's partkey, thereby showing\r\n * it is online.\r\n */\nexport class HbProofFields extends BaseModel {\n  /**\r\n   * Creates a new `HbProofFields` object.\r\n   * @param hbPk - (p) Public key of the heartbeat message.\r\n   * @param hbPk1sig - (p1s) Signature of OneTimeSignatureSubkeyOffsetID(PK, Batch, Offset) under the\r\n   * key PK2.\r\n   * @param hbPk2 - (p2) Key for new-style two-level ephemeral signature.\r\n   * @param hbPk2sig - (p2s) Signature of OneTimeSignatureSubkeyBatchID(PK2, Batch) under the master\r\n   * key (OneTimeSignatureVerifier).\r\n   * @param hbSig - (s) Signature of the heartbeat message.\r\n   */\n  constructor({\n    hbPk,\n    hbPk1sig,\n    hbPk2,\n    hbPk2sig,\n    hbSig\n  }) {\n    super();\n    this.hbPk = typeof hbPk === 'string' ? new Uint8Array(Buffer.from(hbPk, 'base64')) : hbPk;\n    this.hbPk1sig = typeof hbPk1sig === 'string' ? new Uint8Array(Buffer.from(hbPk1sig, 'base64')) : hbPk1sig;\n    this.hbPk2 = typeof hbPk2 === 'string' ? new Uint8Array(Buffer.from(hbPk2, 'base64')) : hbPk2;\n    this.hbPk2sig = typeof hbPk2sig === 'string' ? new Uint8Array(Buffer.from(hbPk2sig, 'base64')) : hbPk2sig;\n    this.hbSig = typeof hbSig === 'string' ? new Uint8Array(Buffer.from(hbSig, 'base64')) : hbSig;\n    this.attribute_map = {\n      hbPk: 'hb-pk',\n      hbPk1sig: 'hb-pk1sig',\n      hbPk2: 'hb-pk2',\n      hbPk2sig: 'hb-pk2sig',\n      hbSig: 'hb-sig'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new HbProofFields({\n      hbPk: data['hb-pk'],\n      hbPk1sig: data['hb-pk1sig'],\n      hbPk2: data['hb-pk2'],\n      hbPk2sig: data['hb-pk2sig'],\n      hbSig: data['hb-sig']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * A health check response.\r\n */\nexport class HealthCheck extends BaseModel {\n  /**\r\n   * Creates a new `HealthCheck` object.\r\n   * @param dbAvailable -\r\n   * @param isMigrating -\r\n   * @param message -\r\n   * @param round -\r\n   * @param version - Current version.\r\n   * @param data -\r\n   * @param errors -\r\n   */\n  constructor({\n    dbAvailable,\n    isMigrating,\n    message,\n    round,\n    version,\n    data,\n    errors\n  }) {\n    super();\n    this.dbAvailable = dbAvailable;\n    this.isMigrating = isMigrating;\n    this.message = message;\n    this.round = round;\n    this.version = version;\n    this.data = data;\n    this.errors = errors;\n    this.attribute_map = {\n      dbAvailable: 'db-available',\n      isMigrating: 'is-migrating',\n      message: 'message',\n      round: 'round',\n      version: 'version',\n      data: 'data',\n      errors: 'errors'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['db-available'] === 'undefined') throw new Error(`Response is missing required field 'db-available': ${data}`);\n    if (typeof data['is-migrating'] === 'undefined') throw new Error(`Response is missing required field 'is-migrating': ${data}`);\n    if (typeof data['message'] === 'undefined') throw new Error(`Response is missing required field 'message': ${data}`);\n    if (typeof data['round'] === 'undefined') throw new Error(`Response is missing required field 'round': ${data}`);\n    if (typeof data['version'] === 'undefined') throw new Error(`Response is missing required field 'version': ${data}`);\n    return new HealthCheck({\n      dbAvailable: data['db-available'],\n      isMigrating: data['is-migrating'],\n      message: data['message'],\n      round: data['round'],\n      version: data['version'],\n      data: data['data'],\n      errors: data['errors']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\nexport class IndexerStateProofMessage extends BaseModel {\n  /**\r\n   * Creates a new `IndexerStateProofMessage` object.\r\n   * @param blockHeadersCommitment - (b)\r\n   * @param firstAttestedRound - (f)\r\n   * @param latestAttestedRound - (l)\r\n   * @param lnProvenWeight - (P)\r\n   * @param votersCommitment - (v)\r\n   */\n  constructor({\n    blockHeadersCommitment,\n    firstAttestedRound,\n    latestAttestedRound,\n    lnProvenWeight,\n    votersCommitment\n  }) {\n    super();\n    this.blockHeadersCommitment = typeof blockHeadersCommitment === 'string' ? new Uint8Array(Buffer.from(blockHeadersCommitment, 'base64')) : blockHeadersCommitment;\n    this.firstAttestedRound = firstAttestedRound;\n    this.latestAttestedRound = latestAttestedRound;\n    this.lnProvenWeight = lnProvenWeight;\n    this.votersCommitment = typeof votersCommitment === 'string' ? new Uint8Array(Buffer.from(votersCommitment, 'base64')) : votersCommitment;\n    this.attribute_map = {\n      blockHeadersCommitment: 'block-headers-commitment',\n      firstAttestedRound: 'first-attested-round',\n      latestAttestedRound: 'latest-attested-round',\n      lnProvenWeight: 'ln-proven-weight',\n      votersCommitment: 'voters-commitment'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new IndexerStateProofMessage({\n      blockHeadersCommitment: data['block-headers-commitment'],\n      firstAttestedRound: data['first-attested-round'],\n      latestAttestedRound: data['latest-attested-round'],\n      lnProvenWeight: data['ln-proven-weight'],\n      votersCommitment: data['voters-commitment']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\nexport class MerkleArrayProof extends BaseModel {\n  /**\r\n   * Creates a new `MerkleArrayProof` object.\r\n   * @param hashFactory -\r\n   * @param path - (pth)\r\n   * @param treeDepth - (td)\r\n   */\n  constructor({\n    hashFactory,\n    path,\n    treeDepth\n  }) {\n    super();\n    this.hashFactory = hashFactory;\n    this.path = path;\n    this.treeDepth = treeDepth;\n    this.attribute_map = {\n      hashFactory: 'hash-factory',\n      path: 'path',\n      treeDepth: 'tree-depth'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new MerkleArrayProof({\n      hashFactory: typeof data['hash-factory'] !== 'undefined' ? HashFactory.from_obj_for_encoding(data['hash-factory']) : undefined,\n      path: data['path'],\n      treeDepth: data['tree-depth']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * A simplified version of AssetHolding\r\n */\nexport class MiniAssetHolding extends BaseModel {\n  /**\r\n   * Creates a new `MiniAssetHolding` object.\r\n   * @param address -\r\n   * @param amount -\r\n   * @param isFrozen -\r\n   * @param deleted - Whether or not this asset holding is currently deleted from its account.\r\n   * @param optedInAtRound - Round during which the account opted into the asset.\r\n   * @param optedOutAtRound - Round during which the account opted out of the asset.\r\n   */\n  constructor({\n    address,\n    amount,\n    isFrozen,\n    deleted,\n    optedInAtRound,\n    optedOutAtRound\n  }) {\n    super();\n    this.address = address;\n    this.amount = amount;\n    this.isFrozen = isFrozen;\n    this.deleted = deleted;\n    this.optedInAtRound = optedInAtRound;\n    this.optedOutAtRound = optedOutAtRound;\n    this.attribute_map = {\n      address: 'address',\n      amount: 'amount',\n      isFrozen: 'is-frozen',\n      deleted: 'deleted',\n      optedInAtRound: 'opted-in-at-round',\n      optedOutAtRound: 'opted-out-at-round'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['address'] === 'undefined') throw new Error(`Response is missing required field 'address': ${data}`);\n    if (typeof data['amount'] === 'undefined') throw new Error(`Response is missing required field 'amount': ${data}`);\n    if (typeof data['is-frozen'] === 'undefined') throw new Error(`Response is missing required field 'is-frozen': ${data}`);\n    return new MiniAssetHolding({\n      address: data['address'],\n      amount: data['amount'],\n      isFrozen: data['is-frozen'],\n      deleted: data['deleted'],\n      optedInAtRound: data['opted-in-at-round'],\n      optedOutAtRound: data['opted-out-at-round']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Participation account data that needs to be checked/acted on by the network.\r\n */\nexport class ParticipationUpdates extends BaseModel {\n  /**\r\n   * Creates a new `ParticipationUpdates` object.\r\n   * @param absentParticipationAccounts - (partupabs) a list of online accounts that need to be suspended.\r\n   * @param expiredParticipationAccounts - (partupdrmv) a list of online accounts that needs to be converted to offline\r\n   * since their participation key expired.\r\n   */\n  constructor({\n    absentParticipationAccounts,\n    expiredParticipationAccounts\n  }) {\n    super();\n    this.absentParticipationAccounts = absentParticipationAccounts;\n    this.expiredParticipationAccounts = expiredParticipationAccounts;\n    this.attribute_map = {\n      absentParticipationAccounts: 'absent-participation-accounts',\n      expiredParticipationAccounts: 'expired-participation-accounts'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new ParticipationUpdates({\n      absentParticipationAccounts: data['absent-participation-accounts'],\n      expiredParticipationAccounts: data['expired-participation-accounts']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * (sp) represents a state proof.\r\n * Definition:\r\n * crypto/stateproof/structs.go : StateProof\r\n */\nexport class StateProofFields extends BaseModel {\n  /**\r\n   * Creates a new `StateProofFields` object.\r\n   * @param partProofs - (P)\r\n   * @param positionsToReveal - (pr) Sequence of reveal positions.\r\n   * @param reveals - (r) Note that this is actually stored as a map[uint64] - Reveal in the actual\r\n   * msgp\r\n   * @param saltVersion - (v) Salt version of the merkle signature.\r\n   * @param sigCommit - (c)\r\n   * @param sigProofs - (S)\r\n   * @param signedWeight - (w)\r\n   */\n  constructor({\n    partProofs,\n    positionsToReveal,\n    reveals,\n    saltVersion,\n    sigCommit,\n    sigProofs,\n    signedWeight\n  }) {\n    super();\n    this.partProofs = partProofs;\n    this.positionsToReveal = positionsToReveal;\n    this.reveals = reveals;\n    this.saltVersion = saltVersion;\n    this.sigCommit = typeof sigCommit === 'string' ? new Uint8Array(Buffer.from(sigCommit, 'base64')) : sigCommit;\n    this.sigProofs = sigProofs;\n    this.signedWeight = signedWeight;\n    this.attribute_map = {\n      partProofs: 'part-proofs',\n      positionsToReveal: 'positions-to-reveal',\n      reveals: 'reveals',\n      saltVersion: 'salt-version',\n      sigCommit: 'sig-commit',\n      sigProofs: 'sig-proofs',\n      signedWeight: 'signed-weight'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new StateProofFields({\n      partProofs: typeof data['part-proofs'] !== 'undefined' ? MerkleArrayProof.from_obj_for_encoding(data['part-proofs']) : undefined,\n      positionsToReveal: data['positions-to-reveal'],\n      reveals: typeof data['reveals'] !== 'undefined' ? data['reveals'].map(StateProofReveal.from_obj_for_encoding) : undefined,\n      saltVersion: data['salt-version'],\n      sigCommit: data['sig-commit'],\n      sigProofs: typeof data['sig-proofs'] !== 'undefined' ? MerkleArrayProof.from_obj_for_encoding(data['sig-proofs']) : undefined,\n      signedWeight: data['signed-weight']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\nexport class StateProofParticipant extends BaseModel {\n  /**\r\n   * Creates a new `StateProofParticipant` object.\r\n   * @param verifier - (p)\r\n   * @param weight - (w)\r\n   */\n  constructor({\n    verifier,\n    weight\n  }) {\n    super();\n    this.verifier = verifier;\n    this.weight = weight;\n    this.attribute_map = {\n      verifier: 'verifier',\n      weight: 'weight'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new StateProofParticipant({\n      verifier: typeof data['verifier'] !== 'undefined' ? StateProofVerifier.from_obj_for_encoding(data['verifier']) : undefined,\n      weight: data['weight']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\nexport class StateProofReveal extends BaseModel {\n  /**\r\n   * Creates a new `StateProofReveal` object.\r\n   * @param participant - (p)\r\n   * @param position - The position in the signature and participants arrays corresponding to this\r\n   * entry.\r\n   * @param sigSlot - (s)\r\n   */\n  constructor({\n    participant,\n    position,\n    sigSlot\n  }) {\n    super();\n    this.participant = participant;\n    this.position = position;\n    this.sigSlot = sigSlot;\n    this.attribute_map = {\n      participant: 'participant',\n      position: 'position',\n      sigSlot: 'sig-slot'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new StateProofReveal({\n      participant: typeof data['participant'] !== 'undefined' ? StateProofParticipant.from_obj_for_encoding(data['participant']) : undefined,\n      position: data['position'],\n      sigSlot: typeof data['sig-slot'] !== 'undefined' ? StateProofSigSlot.from_obj_for_encoding(data['sig-slot']) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\nexport class StateProofSigSlot extends BaseModel {\n  /**\r\n   * Creates a new `StateProofSigSlot` object.\r\n   * @param lowerSigWeight - (l) The total weight of signatures in the lower-numbered slots.\r\n   * @param signature -\r\n   */\n  constructor({\n    lowerSigWeight,\n    signature\n  }) {\n    super();\n    this.lowerSigWeight = lowerSigWeight;\n    this.signature = signature;\n    this.attribute_map = {\n      lowerSigWeight: 'lower-sig-weight',\n      signature: 'signature'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new StateProofSigSlot({\n      lowerSigWeight: data['lower-sig-weight'],\n      signature: typeof data['signature'] !== 'undefined' ? StateProofSignature.from_obj_for_encoding(data['signature']) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\nexport class StateProofSignature extends BaseModel {\n  /**\r\n   * Creates a new `StateProofSignature` object.\r\n   * @param falconSignature -\r\n   * @param merkleArrayIndex -\r\n   * @param proof -\r\n   * @param verifyingKey - (vkey)\r\n   */\n  constructor({\n    falconSignature,\n    merkleArrayIndex,\n    proof,\n    verifyingKey\n  }) {\n    super();\n    this.falconSignature = typeof falconSignature === 'string' ? new Uint8Array(Buffer.from(falconSignature, 'base64')) : falconSignature;\n    this.merkleArrayIndex = merkleArrayIndex;\n    this.proof = proof;\n    this.verifyingKey = typeof verifyingKey === 'string' ? new Uint8Array(Buffer.from(verifyingKey, 'base64')) : verifyingKey;\n    this.attribute_map = {\n      falconSignature: 'falcon-signature',\n      merkleArrayIndex: 'merkle-array-index',\n      proof: 'proof',\n      verifyingKey: 'verifying-key'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new StateProofSignature({\n      falconSignature: data['falcon-signature'],\n      merkleArrayIndex: data['merkle-array-index'],\n      proof: typeof data['proof'] !== 'undefined' ? MerkleArrayProof.from_obj_for_encoding(data['proof']) : undefined,\n      verifyingKey: data['verifying-key']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\nexport class StateProofTracking extends BaseModel {\n  /**\r\n   * Creates a new `StateProofTracking` object.\r\n   * @param nextRound - (n) Next round for which we will accept a state proof transaction.\r\n   * @param onlineTotalWeight - (t) The total number of microalgos held by the online accounts during the\r\n   * StateProof round.\r\n   * @param type - State Proof Type. Note the raw object uses map with this as key.\r\n   * @param votersCommitment - (v) Root of a vector commitment containing online accounts that will help sign\r\n   * the proof.\r\n   */\n  constructor({\n    nextRound,\n    onlineTotalWeight,\n    type,\n    votersCommitment\n  }) {\n    super();\n    this.nextRound = nextRound;\n    this.onlineTotalWeight = onlineTotalWeight;\n    this.type = type;\n    this.votersCommitment = typeof votersCommitment === 'string' ? new Uint8Array(Buffer.from(votersCommitment, 'base64')) : votersCommitment;\n    this.attribute_map = {\n      nextRound: 'next-round',\n      onlineTotalWeight: 'online-total-weight',\n      type: 'type',\n      votersCommitment: 'voters-commitment'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new StateProofTracking({\n      nextRound: data['next-round'],\n      onlineTotalWeight: data['online-total-weight'],\n      type: data['type'],\n      votersCommitment: data['voters-commitment']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\nexport class StateProofVerifier extends BaseModel {\n  /**\r\n   * Creates a new `StateProofVerifier` object.\r\n   * @param commitment - (cmt) Represents the root of the vector commitment tree.\r\n   * @param keyLifetime - (lf) Key lifetime.\r\n   */\n  constructor({\n    commitment,\n    keyLifetime\n  }) {\n    super();\n    this.commitment = typeof commitment === 'string' ? new Uint8Array(Buffer.from(commitment, 'base64')) : commitment;\n    this.keyLifetime = keyLifetime;\n    this.attribute_map = {\n      commitment: 'commitment',\n      keyLifetime: 'key-lifetime'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new StateProofVerifier({\n      commitment: data['commitment'],\n      keyLifetime: data['key-lifetime']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Represents a (apls) local-state or (apgs) global-state schema. These schemas\r\n * determine how much storage may be used in a local-state or global-state for an\r\n * application. The more space used, the larger minimum balance must be maintained\r\n * in the account holding the data.\r\n */\nexport class StateSchema extends BaseModel {\n  /**\r\n   * Creates a new `StateSchema` object.\r\n   * @param numByteSlice - Maximum number of TEAL byte slices that may be stored in the key/value store.\r\n   * @param numUint - Maximum number of TEAL uints that may be stored in the key/value store.\r\n   */\n  constructor({\n    numByteSlice,\n    numUint\n  }) {\n    super();\n    this.numByteSlice = numByteSlice;\n    this.numUint = numUint;\n    this.attribute_map = {\n      numByteSlice: 'num-byte-slice',\n      numUint: 'num-uint'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['num-byte-slice'] === 'undefined') throw new Error(`Response is missing required field 'num-byte-slice': ${data}`);\n    if (typeof data['num-uint'] === 'undefined') throw new Error(`Response is missing required field 'num-uint': ${data}`);\n    return new StateSchema({\n      numByteSlice: data['num-byte-slice'],\n      numUint: data['num-uint']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Represents a key-value pair in an application store.\r\n */\nexport class TealKeyValue extends BaseModel {\n  /**\r\n   * Creates a new `TealKeyValue` object.\r\n   * @param key -\r\n   * @param value - Represents a TEAL value.\r\n   */\n  constructor({\n    key,\n    value\n  }) {\n    super();\n    this.key = key;\n    this.value = value;\n    this.attribute_map = {\n      key: 'key',\n      value: 'value'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['key'] === 'undefined') throw new Error(`Response is missing required field 'key': ${data}`);\n    if (typeof data['value'] === 'undefined') throw new Error(`Response is missing required field 'value': ${data}`);\n    return new TealKeyValue({\n      key: data['key'],\n      value: TealValue.from_obj_for_encoding(data['value'])\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Represents a TEAL value.\r\n */\nexport class TealValue extends BaseModel {\n  /**\r\n   * Creates a new `TealValue` object.\r\n   * @param bytes - bytes value.\r\n   * @param type - type of the value. Value `1` refers to **bytes**, value `2` refers to **uint**\r\n   * @param uint - uint value.\r\n   */\n  constructor({\n    bytes,\n    type,\n    uint\n  }) {\n    super();\n    this.bytes = bytes;\n    this.type = type;\n    this.uint = uint;\n    this.attribute_map = {\n      bytes: 'bytes',\n      type: 'type',\n      uint: 'uint'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['bytes'] === 'undefined') throw new Error(`Response is missing required field 'bytes': ${data}`);\n    if (typeof data['type'] === 'undefined') throw new Error(`Response is missing required field 'type': ${data}`);\n    if (typeof data['uint'] === 'undefined') throw new Error(`Response is missing required field 'uint': ${data}`);\n    return new TealValue({\n      bytes: data['bytes'],\n      type: data['type'],\n      uint: data['uint']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Contains all fields common to all transactions and serves as an envelope to all\r\n * transactions type. Represents both regular and inner transactions.\r\n * Definition:\r\n * data/transactions/signedtxn.go : SignedTxn\r\n * data/transactions/transaction.go : Transaction\r\n */\nexport class Transaction extends BaseModel {\n  /**\r\n   * Creates a new `Transaction` object.\r\n   * @param fee - (fee) Transaction fee.\r\n   * @param firstValid - (fv) First valid round for this transaction.\r\n   * @param lastValid - (lv) Last valid round for this transaction.\r\n   * @param sender - (snd) Sender's address.\r\n   * @param applicationTransaction - Fields for application transactions.\r\n   * Definition:\r\n   * data/transactions/application.go : ApplicationCallTxnFields\r\n   * @param assetConfigTransaction - Fields for asset allocation, re-configuration, and destruction.\r\n   * A zero value for asset-id indicates asset creation.\r\n   * A zero value for the params indicates asset destruction.\r\n   * Definition:\r\n   * data/transactions/asset.go : AssetConfigTxnFields\r\n   * @param assetFreezeTransaction - Fields for an asset freeze transaction.\r\n   * Definition:\r\n   * data/transactions/asset.go : AssetFreezeTxnFields\r\n   * @param assetTransferTransaction - Fields for an asset transfer transaction.\r\n   * Definition:\r\n   * data/transactions/asset.go : AssetTransferTxnFields\r\n   * @param authAddr - (sgnr) this is included with signed transactions when the signing address does\r\n   * not equal the sender. The backend can use this to ensure that auth addr is equal\r\n   * to the accounts auth addr.\r\n   * @param closeRewards - (rc) rewards applied to close-remainder-to account.\r\n   * @param closingAmount - (ca) closing amount for transaction.\r\n   * @param confirmedRound - Round when the transaction was confirmed.\r\n   * @param createdApplicationIndex - Specifies an application index (ID) if an application was created with this\r\n   * transaction.\r\n   * @param createdAssetIndex - Specifies an asset index (ID) if an asset was created with this transaction.\r\n   * @param genesisHash - (gh) Hash of genesis block.\r\n   * @param genesisId - (gen) genesis block ID.\r\n   * @param globalStateDelta - (gd) Global state key/value changes for the application being executed by this\r\n   * transaction.\r\n   * @param group - (grp) Base64 encoded byte array of a sha512/256 digest. When present indicates\r\n   * that this transaction is part of a transaction group and the value is the\r\n   * sha512/256 hash of the transactions in that group.\r\n   * @param heartbeatTransaction - Fields for a heartbeat transaction.\r\n   * Definition:\r\n   * data/transactions/heartbeat.go : HeartbeatTxnFields\r\n   * @param id - Transaction ID\r\n   * @param innerTxns - Inner transactions produced by application execution.\r\n   * @param intraRoundOffset - Offset into the round where this transaction was confirmed.\r\n   * @param keyregTransaction - Fields for a keyreg transaction.\r\n   * Definition:\r\n   * data/transactions/keyreg.go : KeyregTxnFields\r\n   * @param lease - (lx) Base64 encoded 32-byte array. Lease enforces mutual exclusion of\r\n   * transactions. If this field is nonzero, then once the transaction is confirmed,\r\n   * it acquires the lease identified by the (Sender, Lease) pair of the transaction\r\n   * until the LastValid round passes. While this transaction possesses the lease, no\r\n   * other transaction specifying this lease can be confirmed.\r\n   * @param localStateDelta - (ld) Local state key/value changes for the application being executed by this\r\n   * transaction.\r\n   * @param logs - (lg) Logs for the application being executed by this transaction.\r\n   * @param note - (note) Free form data.\r\n   * @param paymentTransaction - Fields for a payment transaction.\r\n   * Definition:\r\n   * data/transactions/payment.go : PaymentTxnFields\r\n   * @param receiverRewards - (rr) rewards applied to receiver account.\r\n   * @param rekeyTo - (rekey) when included in a valid transaction, the accounts auth addr will be\r\n   * updated with this value and future signatures must be signed with the key\r\n   * represented by this address.\r\n   * @param roundTime - Time when the block this transaction is in was confirmed.\r\n   * @param senderRewards - (rs) rewards applied to sender account.\r\n   * @param signature - Validation signature associated with some data. Only one of the signatures\r\n   * should be provided.\r\n   * @param stateProofTransaction - Fields for a state proof transaction.\r\n   * Definition:\r\n   * data/transactions/stateproof.go : StateProofTxnFields\r\n   * @param txType - (type) Indicates what type of transaction this is. Different types have\r\n   * different fields.\r\n   * Valid types, and where their fields are stored:\r\n   * * (pay) payment-transaction\r\n   * * (keyreg) keyreg-transaction\r\n   * * (acfg) asset-config-transaction\r\n   * * (axfer) asset-transfer-transaction\r\n   * * (afrz) asset-freeze-transaction\r\n   * * (appl) application-transaction\r\n   * * (stpf) state-proof-transaction\r\n   * * (hb) heartbeat-transaction\r\n   */\n  constructor({\n    fee,\n    firstValid,\n    lastValid,\n    sender,\n    applicationTransaction,\n    assetConfigTransaction,\n    assetFreezeTransaction,\n    assetTransferTransaction,\n    authAddr,\n    closeRewards,\n    closingAmount,\n    confirmedRound,\n    createdApplicationIndex,\n    createdAssetIndex,\n    genesisHash,\n    genesisId,\n    globalStateDelta,\n    group,\n    heartbeatTransaction,\n    id,\n    innerTxns,\n    intraRoundOffset,\n    keyregTransaction,\n    lease,\n    localStateDelta,\n    logs,\n    note,\n    paymentTransaction,\n    receiverRewards,\n    rekeyTo,\n    roundTime,\n    senderRewards,\n    signature,\n    stateProofTransaction,\n    txType\n  }) {\n    super();\n    this.fee = fee;\n    this.firstValid = firstValid;\n    this.lastValid = lastValid;\n    this.sender = sender;\n    this.applicationTransaction = applicationTransaction;\n    this.assetConfigTransaction = assetConfigTransaction;\n    this.assetFreezeTransaction = assetFreezeTransaction;\n    this.assetTransferTransaction = assetTransferTransaction;\n    this.authAddr = authAddr;\n    this.closeRewards = closeRewards;\n    this.closingAmount = closingAmount;\n    this.confirmedRound = confirmedRound;\n    this.createdApplicationIndex = createdApplicationIndex;\n    this.createdAssetIndex = createdAssetIndex;\n    this.genesisHash = typeof genesisHash === 'string' ? new Uint8Array(Buffer.from(genesisHash, 'base64')) : genesisHash;\n    this.genesisId = genesisId;\n    this.globalStateDelta = globalStateDelta;\n    this.group = typeof group === 'string' ? new Uint8Array(Buffer.from(group, 'base64')) : group;\n    this.heartbeatTransaction = heartbeatTransaction;\n    this.id = id;\n    this.innerTxns = innerTxns;\n    this.intraRoundOffset = intraRoundOffset;\n    this.keyregTransaction = keyregTransaction;\n    this.lease = typeof lease === 'string' ? new Uint8Array(Buffer.from(lease, 'base64')) : lease;\n    this.localStateDelta = localStateDelta;\n    this.logs = logs;\n    this.note = typeof note === 'string' ? new Uint8Array(Buffer.from(note, 'base64')) : note;\n    this.paymentTransaction = paymentTransaction;\n    this.receiverRewards = receiverRewards;\n    this.rekeyTo = rekeyTo;\n    this.roundTime = roundTime;\n    this.senderRewards = senderRewards;\n    this.signature = signature;\n    this.stateProofTransaction = stateProofTransaction;\n    this.txType = txType;\n    this.attribute_map = {\n      fee: 'fee',\n      firstValid: 'first-valid',\n      lastValid: 'last-valid',\n      sender: 'sender',\n      applicationTransaction: 'application-transaction',\n      assetConfigTransaction: 'asset-config-transaction',\n      assetFreezeTransaction: 'asset-freeze-transaction',\n      assetTransferTransaction: 'asset-transfer-transaction',\n      authAddr: 'auth-addr',\n      closeRewards: 'close-rewards',\n      closingAmount: 'closing-amount',\n      confirmedRound: 'confirmed-round',\n      createdApplicationIndex: 'created-application-index',\n      createdAssetIndex: 'created-asset-index',\n      genesisHash: 'genesis-hash',\n      genesisId: 'genesis-id',\n      globalStateDelta: 'global-state-delta',\n      group: 'group',\n      heartbeatTransaction: 'heartbeat-transaction',\n      id: 'id',\n      innerTxns: 'inner-txns',\n      intraRoundOffset: 'intra-round-offset',\n      keyregTransaction: 'keyreg-transaction',\n      lease: 'lease',\n      localStateDelta: 'local-state-delta',\n      logs: 'logs',\n      note: 'note',\n      paymentTransaction: 'payment-transaction',\n      receiverRewards: 'receiver-rewards',\n      rekeyTo: 'rekey-to',\n      roundTime: 'round-time',\n      senderRewards: 'sender-rewards',\n      signature: 'signature',\n      stateProofTransaction: 'state-proof-transaction',\n      txType: 'tx-type'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['fee'] === 'undefined') throw new Error(`Response is missing required field 'fee': ${data}`);\n    if (typeof data['first-valid'] === 'undefined') throw new Error(`Response is missing required field 'first-valid': ${data}`);\n    if (typeof data['last-valid'] === 'undefined') throw new Error(`Response is missing required field 'last-valid': ${data}`);\n    if (typeof data['sender'] === 'undefined') throw new Error(`Response is missing required field 'sender': ${data}`);\n    return new Transaction({\n      fee: data['fee'],\n      firstValid: data['first-valid'],\n      lastValid: data['last-valid'],\n      sender: data['sender'],\n      applicationTransaction: typeof data['application-transaction'] !== 'undefined' ? TransactionApplication.from_obj_for_encoding(data['application-transaction']) : undefined,\n      assetConfigTransaction: typeof data['asset-config-transaction'] !== 'undefined' ? TransactionAssetConfig.from_obj_for_encoding(data['asset-config-transaction']) : undefined,\n      assetFreezeTransaction: typeof data['asset-freeze-transaction'] !== 'undefined' ? TransactionAssetFreeze.from_obj_for_encoding(data['asset-freeze-transaction']) : undefined,\n      assetTransferTransaction: typeof data['asset-transfer-transaction'] !== 'undefined' ? TransactionAssetTransfer.from_obj_for_encoding(data['asset-transfer-transaction']) : undefined,\n      authAddr: data['auth-addr'],\n      closeRewards: data['close-rewards'],\n      closingAmount: data['closing-amount'],\n      confirmedRound: data['confirmed-round'],\n      createdApplicationIndex: data['created-application-index'],\n      createdAssetIndex: data['created-asset-index'],\n      genesisHash: data['genesis-hash'],\n      genesisId: data['genesis-id'],\n      globalStateDelta: typeof data['global-state-delta'] !== 'undefined' ? data['global-state-delta'].map(EvalDeltaKeyValue.from_obj_for_encoding) : undefined,\n      group: data['group'],\n      heartbeatTransaction: typeof data['heartbeat-transaction'] !== 'undefined' ? TransactionHeartbeat.from_obj_for_encoding(data['heartbeat-transaction']) : undefined,\n      id: data['id'],\n      innerTxns: typeof data['inner-txns'] !== 'undefined' ? data['inner-txns'].map(Transaction.from_obj_for_encoding) : undefined,\n      intraRoundOffset: data['intra-round-offset'],\n      keyregTransaction: typeof data['keyreg-transaction'] !== 'undefined' ? TransactionKeyreg.from_obj_for_encoding(data['keyreg-transaction']) : undefined,\n      lease: data['lease'],\n      localStateDelta: typeof data['local-state-delta'] !== 'undefined' ? data['local-state-delta'].map(AccountStateDelta.from_obj_for_encoding) : undefined,\n      logs: data['logs'],\n      note: data['note'],\n      paymentTransaction: typeof data['payment-transaction'] !== 'undefined' ? TransactionPayment.from_obj_for_encoding(data['payment-transaction']) : undefined,\n      receiverRewards: data['receiver-rewards'],\n      rekeyTo: data['rekey-to'],\n      roundTime: data['round-time'],\n      senderRewards: data['sender-rewards'],\n      signature: typeof data['signature'] !== 'undefined' ? TransactionSignature.from_obj_for_encoding(data['signature']) : undefined,\n      stateProofTransaction: typeof data['state-proof-transaction'] !== 'undefined' ? TransactionStateProof.from_obj_for_encoding(data['state-proof-transaction']) : undefined,\n      txType: data['tx-type']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Fields for application transactions.\r\n * Definition:\r\n * data/transactions/application.go : ApplicationCallTxnFields\r\n */\nexport class TransactionApplication extends BaseModel {\n  /**\r\n   * Creates a new `TransactionApplication` object.\r\n   * @param applicationId - (apid) ID of the application being configured or empty if creating.\r\n   * @param accounts - (apat) List of accounts in addition to the sender that may be accessed from the\r\n   * application's approval-program and clear-state-program.\r\n   * @param applicationArgs - (apaa) transaction specific arguments accessed from the application's\r\n   * approval-program and clear-state-program.\r\n   * @param approvalProgram - (apap) Logic executed for every application transaction, except when\r\n   * on-completion is set to \"clear\". It can read and write global state for the\r\n   * application, as well as account-specific local state. Approval programs may\r\n   * reject the transaction.\r\n   * @param clearStateProgram - (apsu) Logic executed for application transactions with on-completion set to\r\n   * \"clear\". It can read and write global state for the application, as well as\r\n   * account-specific local state. Clear state programs cannot reject the\r\n   * transaction.\r\n   * @param extraProgramPages - (epp) specifies the additional app program len requested in pages.\r\n   * @param foreignApps - (apfa) Lists the applications in addition to the application-id whose global\r\n   * states may be accessed by this application's approval-program and\r\n   * clear-state-program. The access is read-only.\r\n   * @param foreignAssets - (apas) lists the assets whose parameters may be accessed by this application's\r\n   * ApprovalProgram and ClearStateProgram. The access is read-only.\r\n   * @param globalStateSchema - Represents a (apls) local-state or (apgs) global-state schema. These schemas\r\n   * determine how much storage may be used in a local-state or global-state for an\r\n   * application. The more space used, the larger minimum balance must be maintained\r\n   * in the account holding the data.\r\n   * @param localStateSchema - Represents a (apls) local-state or (apgs) global-state schema. These schemas\r\n   * determine how much storage may be used in a local-state or global-state for an\r\n   * application. The more space used, the larger minimum balance must be maintained\r\n   * in the account holding the data.\r\n   * @param onCompletion - (apan) defines the what additional actions occur with the transaction.\r\n   * Valid types:\r\n   * * noop\r\n   * * optin\r\n   * * closeout\r\n   * * clear\r\n   * * update\r\n   * * update\r\n   * * delete\r\n   */\n  constructor({\n    applicationId,\n    accounts,\n    applicationArgs,\n    approvalProgram,\n    clearStateProgram,\n    extraProgramPages,\n    foreignApps,\n    foreignAssets,\n    globalStateSchema,\n    localStateSchema,\n    onCompletion\n  }) {\n    super();\n    this.applicationId = applicationId;\n    this.accounts = accounts;\n    this.applicationArgs = applicationArgs;\n    this.approvalProgram = typeof approvalProgram === 'string' ? new Uint8Array(Buffer.from(approvalProgram, 'base64')) : approvalProgram;\n    this.clearStateProgram = typeof clearStateProgram === 'string' ? new Uint8Array(Buffer.from(clearStateProgram, 'base64')) : clearStateProgram;\n    this.extraProgramPages = extraProgramPages;\n    this.foreignApps = foreignApps;\n    this.foreignAssets = foreignAssets;\n    this.globalStateSchema = globalStateSchema;\n    this.localStateSchema = localStateSchema;\n    this.onCompletion = onCompletion;\n    this.attribute_map = {\n      applicationId: 'application-id',\n      accounts: 'accounts',\n      applicationArgs: 'application-args',\n      approvalProgram: 'approval-program',\n      clearStateProgram: 'clear-state-program',\n      extraProgramPages: 'extra-program-pages',\n      foreignApps: 'foreign-apps',\n      foreignAssets: 'foreign-assets',\n      globalStateSchema: 'global-state-schema',\n      localStateSchema: 'local-state-schema',\n      onCompletion: 'on-completion'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['application-id'] === 'undefined') throw new Error(`Response is missing required field 'application-id': ${data}`);\n    return new TransactionApplication({\n      applicationId: data['application-id'],\n      accounts: data['accounts'],\n      applicationArgs: data['application-args'],\n      approvalProgram: data['approval-program'],\n      clearStateProgram: data['clear-state-program'],\n      extraProgramPages: data['extra-program-pages'],\n      foreignApps: data['foreign-apps'],\n      foreignAssets: data['foreign-assets'],\n      globalStateSchema: typeof data['global-state-schema'] !== 'undefined' ? StateSchema.from_obj_for_encoding(data['global-state-schema']) : undefined,\n      localStateSchema: typeof data['local-state-schema'] !== 'undefined' ? StateSchema.from_obj_for_encoding(data['local-state-schema']) : undefined,\n      onCompletion: data['on-completion']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Fields for asset allocation, re-configuration, and destruction.\r\n * A zero value for asset-id indicates asset creation.\r\n * A zero value for the params indicates asset destruction.\r\n * Definition:\r\n * data/transactions/asset.go : AssetConfigTxnFields\r\n */\nexport class TransactionAssetConfig extends BaseModel {\n  /**\r\n   * Creates a new `TransactionAssetConfig` object.\r\n   * @param assetId - (xaid) ID of the asset being configured or empty if creating.\r\n   * @param params - AssetParams specifies the parameters for an asset.\r\n   * (apar) when part of an AssetConfig transaction.\r\n   * Definition:\r\n   * data/transactions/asset.go : AssetParams\r\n   */\n  constructor({\n    assetId,\n    params\n  }) {\n    super();\n    this.assetId = assetId;\n    this.params = params;\n    this.attribute_map = {\n      assetId: 'asset-id',\n      params: 'params'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new TransactionAssetConfig({\n      assetId: data['asset-id'],\n      params: typeof data['params'] !== 'undefined' ? AssetParams.from_obj_for_encoding(data['params']) : undefined\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Fields for an asset freeze transaction.\r\n * Definition:\r\n * data/transactions/asset.go : AssetFreezeTxnFields\r\n */\nexport class TransactionAssetFreeze extends BaseModel {\n  /**\r\n   * Creates a new `TransactionAssetFreeze` object.\r\n   * @param address - (fadd) Address of the account whose asset is being frozen or thawed.\r\n   * @param assetId - (faid) ID of the asset being frozen or thawed.\r\n   * @param newFreezeStatus - (afrz) The new freeze status.\r\n   */\n  constructor({\n    address,\n    assetId,\n    newFreezeStatus\n  }) {\n    super();\n    this.address = address;\n    this.assetId = assetId;\n    this.newFreezeStatus = newFreezeStatus;\n    this.attribute_map = {\n      address: 'address',\n      assetId: 'asset-id',\n      newFreezeStatus: 'new-freeze-status'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['address'] === 'undefined') throw new Error(`Response is missing required field 'address': ${data}`);\n    if (typeof data['asset-id'] === 'undefined') throw new Error(`Response is missing required field 'asset-id': ${data}`);\n    if (typeof data['new-freeze-status'] === 'undefined') throw new Error(`Response is missing required field 'new-freeze-status': ${data}`);\n    return new TransactionAssetFreeze({\n      address: data['address'],\n      assetId: data['asset-id'],\n      newFreezeStatus: data['new-freeze-status']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Fields for an asset transfer transaction.\r\n * Definition:\r\n * data/transactions/asset.go : AssetTransferTxnFields\r\n */\nexport class TransactionAssetTransfer extends BaseModel {\n  /**\r\n   * Creates a new `TransactionAssetTransfer` object.\r\n   * @param amount - (aamt) Amount of asset to transfer. A zero amount transferred to self allocates\r\n   * that asset in the account's Assets map.\r\n   * @param assetId - (xaid) ID of the asset being transferred.\r\n   * @param receiver - (arcv) Recipient address of the transfer.\r\n   * @param closeAmount - Number of assets transferred to the close-to account as part of the transaction.\r\n   * @param closeTo - (aclose) Indicates that the asset should be removed from the account's Assets\r\n   * map, and specifies where the remaining asset holdings should be transferred.\r\n   * It's always valid to transfer remaining asset holdings to the creator account.\r\n   * @param sender - (asnd) The effective sender during a clawback transactions. If this is not a\r\n   * zero value, the real transaction sender must be the Clawback address from the\r\n   * AssetParams.\r\n   */\n  constructor({\n    amount,\n    assetId,\n    receiver,\n    closeAmount,\n    closeTo,\n    sender\n  }) {\n    super();\n    this.amount = amount;\n    this.assetId = assetId;\n    this.receiver = receiver;\n    this.closeAmount = closeAmount;\n    this.closeTo = closeTo;\n    this.sender = sender;\n    this.attribute_map = {\n      amount: 'amount',\n      assetId: 'asset-id',\n      receiver: 'receiver',\n      closeAmount: 'close-amount',\n      closeTo: 'close-to',\n      sender: 'sender'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['amount'] === 'undefined') throw new Error(`Response is missing required field 'amount': ${data}`);\n    if (typeof data['asset-id'] === 'undefined') throw new Error(`Response is missing required field 'asset-id': ${data}`);\n    if (typeof data['receiver'] === 'undefined') throw new Error(`Response is missing required field 'receiver': ${data}`);\n    return new TransactionAssetTransfer({\n      amount: data['amount'],\n      assetId: data['asset-id'],\n      receiver: data['receiver'],\n      closeAmount: data['close-amount'],\n      closeTo: data['close-to'],\n      sender: data['sender']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Fields for a heartbeat transaction.\r\n * Definition:\r\n * data/transactions/heartbeat.go : HeartbeatTxnFields\r\n */\nexport class TransactionHeartbeat extends BaseModel {\n  /**\r\n   * Creates a new `TransactionHeartbeat` object.\r\n   * @param hbAddress - (hbad) HbAddress is the account this txn is proving onlineness for.\r\n   * @param hbKeyDilution - (hbkd) HbKeyDilution must match HbAddress account's current KeyDilution.\r\n   * @param hbProof - (hbprf) HbProof is a signature using HeartbeatAddress's partkey, thereby showing\r\n   * it is online.\r\n   * @param hbSeed - (hbsd) HbSeed must be the block seed for the this transaction's firstValid\r\n   * block.\r\n   * @param hbVoteId - (hbvid) HbVoteID must match the HbAddress account's current VoteID.\r\n   */\n  constructor({\n    hbAddress,\n    hbKeyDilution,\n    hbProof,\n    hbSeed,\n    hbVoteId\n  }) {\n    super();\n    this.hbAddress = hbAddress;\n    this.hbKeyDilution = hbKeyDilution;\n    this.hbProof = hbProof;\n    this.hbSeed = typeof hbSeed === 'string' ? new Uint8Array(Buffer.from(hbSeed, 'base64')) : hbSeed;\n    this.hbVoteId = typeof hbVoteId === 'string' ? new Uint8Array(Buffer.from(hbVoteId, 'base64')) : hbVoteId;\n    this.attribute_map = {\n      hbAddress: 'hb-address',\n      hbKeyDilution: 'hb-key-dilution',\n      hbProof: 'hb-proof',\n      hbSeed: 'hb-seed',\n      hbVoteId: 'hb-vote-id'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['hb-address'] === 'undefined') throw new Error(`Response is missing required field 'hb-address': ${data}`);\n    if (typeof data['hb-key-dilution'] === 'undefined') throw new Error(`Response is missing required field 'hb-key-dilution': ${data}`);\n    if (typeof data['hb-proof'] === 'undefined') throw new Error(`Response is missing required field 'hb-proof': ${data}`);\n    if (typeof data['hb-seed'] === 'undefined') throw new Error(`Response is missing required field 'hb-seed': ${data}`);\n    if (typeof data['hb-vote-id'] === 'undefined') throw new Error(`Response is missing required field 'hb-vote-id': ${data}`);\n    return new TransactionHeartbeat({\n      hbAddress: data['hb-address'],\n      hbKeyDilution: data['hb-key-dilution'],\n      hbProof: HbProofFields.from_obj_for_encoding(data['hb-proof']),\n      hbSeed: data['hb-seed'],\n      hbVoteId: data['hb-vote-id']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Fields for a keyreg transaction.\r\n * Definition:\r\n * data/transactions/keyreg.go : KeyregTxnFields\r\n */\nexport class TransactionKeyreg extends BaseModel {\n  /**\r\n   * Creates a new `TransactionKeyreg` object.\r\n   * @param nonParticipation - (nonpart) Mark the account as participating or non-participating.\r\n   * @param selectionParticipationKey - (selkey) Public key used with the Verified Random Function (VRF) result during\r\n   * committee selection.\r\n   * @param stateProofKey - (sprfkey) State proof key used in key registration transactions.\r\n   * @param voteFirstValid - (votefst) First round this participation key is valid.\r\n   * @param voteKeyDilution - (votekd) Number of subkeys in each batch of participation keys.\r\n   * @param voteLastValid - (votelst) Last round this participation key is valid.\r\n   * @param voteParticipationKey - (votekey) Participation public key used in key registration transactions.\r\n   */\n  constructor({\n    nonParticipation,\n    selectionParticipationKey,\n    stateProofKey,\n    voteFirstValid,\n    voteKeyDilution,\n    voteLastValid,\n    voteParticipationKey\n  }) {\n    super();\n    this.nonParticipation = nonParticipation;\n    this.selectionParticipationKey = typeof selectionParticipationKey === 'string' ? new Uint8Array(Buffer.from(selectionParticipationKey, 'base64')) : selectionParticipationKey;\n    this.stateProofKey = typeof stateProofKey === 'string' ? new Uint8Array(Buffer.from(stateProofKey, 'base64')) : stateProofKey;\n    this.voteFirstValid = voteFirstValid;\n    this.voteKeyDilution = voteKeyDilution;\n    this.voteLastValid = voteLastValid;\n    this.voteParticipationKey = typeof voteParticipationKey === 'string' ? new Uint8Array(Buffer.from(voteParticipationKey, 'base64')) : voteParticipationKey;\n    this.attribute_map = {\n      nonParticipation: 'non-participation',\n      selectionParticipationKey: 'selection-participation-key',\n      stateProofKey: 'state-proof-key',\n      voteFirstValid: 'vote-first-valid',\n      voteKeyDilution: 'vote-key-dilution',\n      voteLastValid: 'vote-last-valid',\n      voteParticipationKey: 'vote-participation-key'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new TransactionKeyreg({\n      nonParticipation: data['non-participation'],\n      selectionParticipationKey: data['selection-participation-key'],\n      stateProofKey: data['state-proof-key'],\n      voteFirstValid: data['vote-first-valid'],\n      voteKeyDilution: data['vote-key-dilution'],\n      voteLastValid: data['vote-last-valid'],\n      voteParticipationKey: data['vote-participation-key']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Fields for a payment transaction.\r\n * Definition:\r\n * data/transactions/payment.go : PaymentTxnFields\r\n */\nexport class TransactionPayment extends BaseModel {\n  /**\r\n   * Creates a new `TransactionPayment` object.\r\n   * @param amount - (amt) number of MicroAlgos intended to be transferred.\r\n   * @param receiver - (rcv) receiver's address.\r\n   * @param closeAmount - Number of MicroAlgos that were sent to the close-remainder-to address when\r\n   * closing the sender account.\r\n   * @param closeRemainderTo - (close) when set, indicates that the sending account should be closed and all\r\n   * remaining funds be transferred to this address.\r\n   */\n  constructor({\n    amount,\n    receiver,\n    closeAmount,\n    closeRemainderTo\n  }) {\n    super();\n    this.amount = amount;\n    this.receiver = receiver;\n    this.closeAmount = closeAmount;\n    this.closeRemainderTo = closeRemainderTo;\n    this.attribute_map = {\n      amount: 'amount',\n      receiver: 'receiver',\n      closeAmount: 'close-amount',\n      closeRemainderTo: 'close-remainder-to'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['amount'] === 'undefined') throw new Error(`Response is missing required field 'amount': ${data}`);\n    if (typeof data['receiver'] === 'undefined') throw new Error(`Response is missing required field 'receiver': ${data}`);\n    return new TransactionPayment({\n      amount: data['amount'],\n      receiver: data['receiver'],\n      closeAmount: data['close-amount'],\n      closeRemainderTo: data['close-remainder-to']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n *\r\n */\nexport class TransactionResponse extends BaseModel {\n  /**\r\n   * Creates a new `TransactionResponse` object.\r\n   * @param currentRound - Round at which the results were computed.\r\n   * @param transaction - Contains all fields common to all transactions and serves as an envelope to all\r\n   * transactions type. Represents both regular and inner transactions.\r\n   * Definition:\r\n   * data/transactions/signedtxn.go : SignedTxn\r\n   * data/transactions/transaction.go : Transaction\r\n   */\n  constructor({\n    currentRound,\n    transaction\n  }) {\n    super();\n    this.currentRound = currentRound;\n    this.transaction = transaction;\n    this.attribute_map = {\n      currentRound: 'current-round',\n      transaction: 'transaction'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['current-round'] === 'undefined') throw new Error(`Response is missing required field 'current-round': ${data}`);\n    if (typeof data['transaction'] === 'undefined') throw new Error(`Response is missing required field 'transaction': ${data}`);\n    return new TransactionResponse({\n      currentRound: data['current-round'],\n      transaction: Transaction.from_obj_for_encoding(data['transaction'])\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Validation signature associated with some data. Only one of the signatures\r\n * should be provided.\r\n */\nexport class TransactionSignature extends BaseModel {\n  /**\r\n   * Creates a new `TransactionSignature` object.\r\n   * @param logicsig - (lsig) Programatic transaction signature.\r\n   * Definition:\r\n   * data/transactions/logicsig.go\r\n   * @param multisig - (msig) structure holding multiple subsignatures.\r\n   * Definition:\r\n   * crypto/multisig.go : MultisigSig\r\n   * @param sig - (sig) Standard ed25519 signature.\r\n   */\n  constructor({\n    logicsig,\n    multisig,\n    sig\n  }) {\n    super();\n    this.logicsig = logicsig;\n    this.multisig = multisig;\n    this.sig = typeof sig === 'string' ? new Uint8Array(Buffer.from(sig, 'base64')) : sig;\n    this.attribute_map = {\n      logicsig: 'logicsig',\n      multisig: 'multisig',\n      sig: 'sig'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new TransactionSignature({\n      logicsig: typeof data['logicsig'] !== 'undefined' ? TransactionSignatureLogicsig.from_obj_for_encoding(data['logicsig']) : undefined,\n      multisig: typeof data['multisig'] !== 'undefined' ? TransactionSignatureMultisig.from_obj_for_encoding(data['multisig']) : undefined,\n      sig: data['sig']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * (lsig) Programatic transaction signature.\r\n * Definition:\r\n * data/transactions/logicsig.go\r\n */\nexport class TransactionSignatureLogicsig extends BaseModel {\n  /**\r\n   * Creates a new `TransactionSignatureLogicsig` object.\r\n   * @param logic - (l) Program signed by a signature or multi signature, or hashed to be the\r\n   * address of ana ccount. Base64 encoded TEAL program.\r\n   * @param args - (arg) Logic arguments, base64 encoded.\r\n   * @param multisigSignature - (msig) structure holding multiple subsignatures.\r\n   * Definition:\r\n   * crypto/multisig.go : MultisigSig\r\n   * @param signature - (sig) ed25519 signature.\r\n   */\n  constructor({\n    logic,\n    args,\n    multisigSignature,\n    signature\n  }) {\n    super();\n    this.logic = typeof logic === 'string' ? new Uint8Array(Buffer.from(logic, 'base64')) : logic;\n    this.args = args;\n    this.multisigSignature = multisigSignature;\n    this.signature = typeof signature === 'string' ? new Uint8Array(Buffer.from(signature, 'base64')) : signature;\n    this.attribute_map = {\n      logic: 'logic',\n      args: 'args',\n      multisigSignature: 'multisig-signature',\n      signature: 'signature'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['logic'] === 'undefined') throw new Error(`Response is missing required field 'logic': ${data}`);\n    return new TransactionSignatureLogicsig({\n      logic: data['logic'],\n      args: data['args'],\n      multisigSignature: typeof data['multisig-signature'] !== 'undefined' ? TransactionSignatureMultisig.from_obj_for_encoding(data['multisig-signature']) : undefined,\n      signature: data['signature']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * (msig) structure holding multiple subsignatures.\r\n * Definition:\r\n * crypto/multisig.go : MultisigSig\r\n */\nexport class TransactionSignatureMultisig extends BaseModel {\n  /**\r\n   * Creates a new `TransactionSignatureMultisig` object.\r\n   * @param subsignature - (subsig) holds pairs of public key and signatures.\r\n   * @param threshold - (thr)\r\n   * @param version - (v)\r\n   */\n  constructor({\n    subsignature,\n    threshold,\n    version\n  }) {\n    super();\n    this.subsignature = subsignature;\n    this.threshold = threshold;\n    this.version = version;\n    this.attribute_map = {\n      subsignature: 'subsignature',\n      threshold: 'threshold',\n      version: 'version'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new TransactionSignatureMultisig({\n      subsignature: typeof data['subsignature'] !== 'undefined' ? data['subsignature'].map(TransactionSignatureMultisigSubsignature.from_obj_for_encoding) : undefined,\n      threshold: data['threshold'],\n      version: data['version']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\nexport class TransactionSignatureMultisigSubsignature extends BaseModel {\n  /**\r\n   * Creates a new `TransactionSignatureMultisigSubsignature` object.\r\n   * @param publicKey - (pk)\r\n   * @param signature - (s)\r\n   */\n  constructor({\n    publicKey,\n    signature\n  }) {\n    super();\n    this.publicKey = typeof publicKey === 'string' ? new Uint8Array(Buffer.from(publicKey, 'base64')) : publicKey;\n    this.signature = typeof signature === 'string' ? new Uint8Array(Buffer.from(signature, 'base64')) : signature;\n    this.attribute_map = {\n      publicKey: 'public-key',\n      signature: 'signature'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new TransactionSignatureMultisigSubsignature({\n      publicKey: data['public-key'],\n      signature: data['signature']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n * Fields for a state proof transaction.\r\n * Definition:\r\n * data/transactions/stateproof.go : StateProofTxnFields\r\n */\nexport class TransactionStateProof extends BaseModel {\n  /**\r\n   * Creates a new `TransactionStateProof` object.\r\n   * @param message - (spmsg)\r\n   * @param stateProof - (sp) represents a state proof.\r\n   * Definition:\r\n   * crypto/stateproof/structs.go : StateProof\r\n   * @param stateProofType - (sptype) Type of the state proof. Integer representing an entry defined in\r\n   * protocol/stateproof.go\r\n   */\n  constructor({\n    message,\n    stateProof,\n    stateProofType\n  }) {\n    super();\n    this.message = message;\n    this.stateProof = stateProof;\n    this.stateProofType = stateProofType;\n    this.attribute_map = {\n      message: 'message',\n      stateProof: 'state-proof',\n      stateProofType: 'state-proof-type'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    return new TransactionStateProof({\n      message: typeof data['message'] !== 'undefined' ? IndexerStateProofMessage.from_obj_for_encoding(data['message']) : undefined,\n      stateProof: typeof data['state-proof'] !== 'undefined' ? StateProofFields.from_obj_for_encoding(data['state-proof']) : undefined,\n      stateProofType: data['state-proof-type']\n    });\n    /* eslint-enable dot-notation */\n  }\n}\n/**\r\n *\r\n */\nexport class TransactionsResponse extends BaseModel {\n  /**\r\n   * Creates a new `TransactionsResponse` object.\r\n   * @param currentRound - Round at which the results were computed.\r\n   * @param transactions -\r\n   * @param nextToken - Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\n  constructor({\n    currentRound,\n    transactions,\n    nextToken\n  }) {\n    super();\n    this.currentRound = currentRound;\n    this.transactions = transactions;\n    this.nextToken = nextToken;\n    this.attribute_map = {\n      currentRound: 'current-round',\n      transactions: 'transactions',\n      nextToken: 'next-token'\n    };\n  }\n  // eslint-disable-next-line camelcase\n  static from_obj_for_encoding(data) {\n    /* eslint-disable dot-notation */\n    if (typeof data['current-round'] === 'undefined') throw new Error(`Response is missing required field 'current-round': ${data}`);\n    if (!Array.isArray(data['transactions'])) throw new Error(`Response is missing required array field 'transactions': ${data}`);\n    return new TransactionsResponse({\n      currentRound: data['current-round'],\n      transactions: data['transactions'].map(Transaction.from_obj_for_encoding),\n      nextToken: data['next-token']\n    });\n    /* eslint-enable dot-notation */\n  }\n}","map":{"version":3,"names":["Buffer","BaseModel","Account","constructor","address","amount","amountWithoutPendingRewards","minBalance","pendingRewards","rewards","round","status","totalAppsOptedIn","totalAssetsOptedIn","totalBoxBytes","totalBoxes","totalCreatedApps","totalCreatedAssets","appsLocalState","appsTotalExtraPages","appsTotalSchema","assets","authAddr","closedAtRound","createdApps","createdAssets","createdAtRound","deleted","incentiveEligible","lastHeartbeat","lastProposed","participation","rewardBase","sigType","attribute_map","from_obj_for_encoding","data","Error","map","ApplicationLocalState","undefined","ApplicationStateSchema","AssetHolding","Application","Asset","AccountParticipation","selectionParticipationKey","voteFirstValid","voteKeyDilution","voteLastValid","voteParticipationKey","stateProofKey","Uint8Array","from","AccountResponse","account","currentRound","AccountStateDelta","delta","Array","isArray","EvalDeltaKeyValue","AccountsResponse","accounts","nextToken","id","params","deletedAtRound","ApplicationParams","schema","closedOutAtRound","keyValue","optedInAtRound","TealKeyValue","ApplicationLocalStatesResponse","appsLocalStates","ApplicationLogData","logs","txid","ApplicationLogsResponse","applicationId","logData","approvalProgram","clearStateProgram","creator","extraProgramPages","globalState","globalStateSchema","localStateSchema","ApplicationResponse","application","numByteSlice","numUint","ApplicationsResponse","applications","index","destroyedAtRound","AssetParams","AssetBalancesResponse","balances","MiniAssetHolding","assetId","isFrozen","optedOutAtRound","AssetHoldingsResponse","decimals","total","clawback","defaultFrozen","freeze","manager","metadataHash","name","nameB64","reserve","unitName","unitNameB64","url","urlB64","AssetResponse","asset","AssetsResponse","Block","genesisHash","genesisId","previousBlockHash","seed","timestamp","transactionsRoot","transactionsRootSha256","bonus","feesCollected","participationUpdates","proposer","proposerPayout","stateProofTracking","transactions","txnCounter","upgradeState","upgradeVote","ParticipationUpdates","BlockRewards","StateProofTracking","Transaction","BlockUpgradeState","BlockUpgradeVote","BlockHeadersResponse","blocks","feeSink","rewardsCalculationRound","rewardsLevel","rewardsPool","rewardsRate","rewardsResidue","currentProtocol","nextProtocol","nextProtocolApprovals","nextProtocolSwitchOn","nextProtocolVoteBefore","upgradeApprove","upgradeDelay","upgradePropose","Box","value","BoxDescriptor","BoxesResponse","boxes","ErrorResponse","message","EvalDelta","action","bytes","uint","key","HashFactory","hashType","HbProofFields","hbPk","hbPk1sig","hbPk2","hbPk2sig","hbSig","HealthCheck","dbAvailable","isMigrating","version","errors","IndexerStateProofMessage","blockHeadersCommitment","firstAttestedRound","latestAttestedRound","lnProvenWeight","votersCommitment","MerkleArrayProof","hashFactory","path","treeDepth","absentParticipationAccounts","expiredParticipationAccounts","StateProofFields","partProofs","positionsToReveal","reveals","saltVersion","sigCommit","sigProofs","signedWeight","StateProofReveal","StateProofParticipant","verifier","weight","StateProofVerifier","participant","position","sigSlot","StateProofSigSlot","lowerSigWeight","signature","StateProofSignature","falconSignature","merkleArrayIndex","proof","verifyingKey","nextRound","onlineTotalWeight","type","commitment","keyLifetime","StateSchema","TealValue","fee","firstValid","lastValid","sender","applicationTransaction","assetConfigTransaction","assetFreezeTransaction","assetTransferTransaction","closeRewards","closingAmount","confirmedRound","createdApplicationIndex","createdAssetIndex","globalStateDelta","group","heartbeatTransaction","innerTxns","intraRoundOffset","keyregTransaction","lease","localStateDelta","note","paymentTransaction","receiverRewards","rekeyTo","roundTime","senderRewards","stateProofTransaction","txType","TransactionApplication","TransactionAssetConfig","TransactionAssetFreeze","TransactionAssetTransfer","TransactionHeartbeat","TransactionKeyreg","TransactionPayment","TransactionSignature","TransactionStateProof","applicationArgs","foreignApps","foreignAssets","onCompletion","newFreezeStatus","receiver","closeAmount","closeTo","hbAddress","hbKeyDilution","hbProof","hbSeed","hbVoteId","nonParticipation","closeRemainderTo","TransactionResponse","transaction","logicsig","multisig","sig","TransactionSignatureLogicsig","TransactionSignatureMultisig","logic","args","multisigSignature","subsignature","threshold","TransactionSignatureMultisigSubsignature","publicKey","stateProof","stateProofType","TransactionsResponse"],"sources":["C:\\Users\\Aditya singh\\AlgoEase\\frontend\\node_modules\\algosdk\\src\\client\\v2\\indexer\\models\\types.ts"],"sourcesContent":["/**\r\n * NOTICE: This file was generated. Editing this file manually is not recommended.\r\n */\r\n\r\n/* eslint-disable no-use-before-define */\r\nimport { Buffer } from 'buffer';\r\nimport BaseModel from '../../basemodel';\r\n\r\n/**\r\n * Account information at a given round.\r\n * Definition:\r\n * data/basics/userBalance.go : AccountData\r\n */\r\nexport class Account extends BaseModel {\r\n  /**\r\n   * the account public key\r\n   */\r\n  public address: string;\r\n\r\n  /**\r\n   * total number of MicroAlgos in the account\r\n   */\r\n  public amount: number | bigint;\r\n\r\n  /**\r\n   * specifies the amount of MicroAlgos in the account, without the pending rewards.\r\n   */\r\n  public amountWithoutPendingRewards: number | bigint;\r\n\r\n  /**\r\n   * MicroAlgo balance required by the account.\r\n   * The requirement grows based on asset and application usage.\r\n   */\r\n  public minBalance: number | bigint;\r\n\r\n  /**\r\n   * amount of MicroAlgos of pending rewards in this account.\r\n   */\r\n  public pendingRewards: number | bigint;\r\n\r\n  /**\r\n   * total rewards of MicroAlgos the account has received, including pending rewards.\r\n   */\r\n  public rewards: number | bigint;\r\n\r\n  /**\r\n   * The round for which this information is relevant.\r\n   */\r\n  public round: number | bigint;\r\n\r\n  /**\r\n   * voting status of the account's MicroAlgos\r\n   * * Offline - indicates that the associated account is delegated.\r\n   * * Online - indicates that the associated account used as part of the delegation\r\n   * pool.\r\n   * * NotParticipating - indicates that the associated account is neither a\r\n   * delegator nor a delegate.\r\n   */\r\n  public status: string;\r\n\r\n  /**\r\n   * The count of all applications that have been opted in, equivalent to the count\r\n   * of application local data (AppLocalState objects) stored in this account.\r\n   */\r\n  public totalAppsOptedIn: number | bigint;\r\n\r\n  /**\r\n   * The count of all assets that have been opted in, equivalent to the count of\r\n   * AssetHolding objects held by this account.\r\n   */\r\n  public totalAssetsOptedIn: number | bigint;\r\n\r\n  /**\r\n   * For app-accounts only. The total number of bytes allocated for the keys and\r\n   * values of boxes which belong to the associated application.\r\n   */\r\n  public totalBoxBytes: number | bigint;\r\n\r\n  /**\r\n   * For app-accounts only. The total number of boxes which belong to the associated\r\n   * application.\r\n   */\r\n  public totalBoxes: number | bigint;\r\n\r\n  /**\r\n   * The count of all apps (AppParams objects) created by this account.\r\n   */\r\n  public totalCreatedApps: number | bigint;\r\n\r\n  /**\r\n   * The count of all assets (AssetParams objects) created by this account.\r\n   */\r\n  public totalCreatedAssets: number | bigint;\r\n\r\n  /**\r\n   * application local data stored in this account.\r\n   * Note the raw object uses `map[int] -> AppLocalState` for this type.\r\n   */\r\n  public appsLocalState?: ApplicationLocalState[];\r\n\r\n  /**\r\n   * the sum of all extra application program pages for this account.\r\n   */\r\n  public appsTotalExtraPages?: number | bigint;\r\n\r\n  /**\r\n   * the sum of all of the local schemas and global schemas in this account.\r\n   * Note: the raw account uses `StateSchema` for this type.\r\n   */\r\n  public appsTotalSchema?: ApplicationStateSchema;\r\n\r\n  /**\r\n   * assets held by this account.\r\n   * Note the raw object uses `map[int] -> AssetHolding` for this type.\r\n   */\r\n  public assets?: AssetHolding[];\r\n\r\n  /**\r\n   * The address against which signing should be checked. If empty, the address of\r\n   * the current account is used. This field can be updated in any transaction by\r\n   * setting the RekeyTo field.\r\n   */\r\n  public authAddr?: string;\r\n\r\n  /**\r\n   * Round during which this account was most recently closed.\r\n   */\r\n  public closedAtRound?: number | bigint;\r\n\r\n  /**\r\n   * parameters of applications created by this account including app global data.\r\n   * Note: the raw account uses `map[int] -> AppParams` for this type.\r\n   */\r\n  public createdApps?: Application[];\r\n\r\n  /**\r\n   * parameters of assets created by this account.\r\n   * Note: the raw account uses `map[int] -> Asset` for this type.\r\n   */\r\n  public createdAssets?: Asset[];\r\n\r\n  /**\r\n   * Round during which this account first appeared in a transaction.\r\n   */\r\n  public createdAtRound?: number | bigint;\r\n\r\n  /**\r\n   * Whether or not this account is currently closed.\r\n   */\r\n  public deleted?: boolean;\r\n\r\n  /**\r\n   * can the account receive block incentives if its balance is in range at proposal\r\n   * time.\r\n   */\r\n  public incentiveEligible?: boolean;\r\n\r\n  /**\r\n   * The round in which this account last went online, or explicitly renewed their\r\n   * online status.\r\n   */\r\n  public lastHeartbeat?: number | bigint;\r\n\r\n  /**\r\n   * The round in which this account last proposed the block.\r\n   */\r\n  public lastProposed?: number | bigint;\r\n\r\n  /**\r\n   * AccountParticipation describes the parameters used by this account in consensus\r\n   * protocol.\r\n   */\r\n  public participation?: AccountParticipation;\r\n\r\n  /**\r\n   * used as part of the rewards computation. Only applicable to accounts which are\r\n   * participating.\r\n   */\r\n  public rewardBase?: number | bigint;\r\n\r\n  /**\r\n   * the type of signature used by this account, must be one of:\r\n   * * sig\r\n   * * msig\r\n   * * lsig\r\n   * * or null if unknown\r\n   */\r\n  public sigType?: string;\r\n\r\n  /**\r\n   * Creates a new `Account` object.\r\n   * @param address - the account public key\r\n   * @param amount - total number of MicroAlgos in the account\r\n   * @param amountWithoutPendingRewards - specifies the amount of MicroAlgos in the account, without the pending rewards.\r\n   * @param minBalance - MicroAlgo balance required by the account.\r\n   * The requirement grows based on asset and application usage.\r\n   * @param pendingRewards - amount of MicroAlgos of pending rewards in this account.\r\n   * @param rewards - total rewards of MicroAlgos the account has received, including pending rewards.\r\n   * @param round - The round for which this information is relevant.\r\n   * @param status - voting status of the account's MicroAlgos\r\n   * * Offline - indicates that the associated account is delegated.\r\n   * * Online - indicates that the associated account used as part of the delegation\r\n   * pool.\r\n   * * NotParticipating - indicates that the associated account is neither a\r\n   * delegator nor a delegate.\r\n   * @param totalAppsOptedIn - The count of all applications that have been opted in, equivalent to the count\r\n   * of application local data (AppLocalState objects) stored in this account.\r\n   * @param totalAssetsOptedIn - The count of all assets that have been opted in, equivalent to the count of\r\n   * AssetHolding objects held by this account.\r\n   * @param totalBoxBytes - For app-accounts only. The total number of bytes allocated for the keys and\r\n   * values of boxes which belong to the associated application.\r\n   * @param totalBoxes - For app-accounts only. The total number of boxes which belong to the associated\r\n   * application.\r\n   * @param totalCreatedApps - The count of all apps (AppParams objects) created by this account.\r\n   * @param totalCreatedAssets - The count of all assets (AssetParams objects) created by this account.\r\n   * @param appsLocalState - application local data stored in this account.\r\n   * Note the raw object uses `map[int] -> AppLocalState` for this type.\r\n   * @param appsTotalExtraPages - the sum of all extra application program pages for this account.\r\n   * @param appsTotalSchema - the sum of all of the local schemas and global schemas in this account.\r\n   * Note: the raw account uses `StateSchema` for this type.\r\n   * @param assets - assets held by this account.\r\n   * Note the raw object uses `map[int] -> AssetHolding` for this type.\r\n   * @param authAddr - The address against which signing should be checked. If empty, the address of\r\n   * the current account is used. This field can be updated in any transaction by\r\n   * setting the RekeyTo field.\r\n   * @param closedAtRound - Round during which this account was most recently closed.\r\n   * @param createdApps - parameters of applications created by this account including app global data.\r\n   * Note: the raw account uses `map[int] -> AppParams` for this type.\r\n   * @param createdAssets - parameters of assets created by this account.\r\n   * Note: the raw account uses `map[int] -> Asset` for this type.\r\n   * @param createdAtRound - Round during which this account first appeared in a transaction.\r\n   * @param deleted - Whether or not this account is currently closed.\r\n   * @param incentiveEligible - can the account receive block incentives if its balance is in range at proposal\r\n   * time.\r\n   * @param lastHeartbeat - The round in which this account last went online, or explicitly renewed their\r\n   * online status.\r\n   * @param lastProposed - The round in which this account last proposed the block.\r\n   * @param participation - AccountParticipation describes the parameters used by this account in consensus\r\n   * protocol.\r\n   * @param rewardBase - used as part of the rewards computation. Only applicable to accounts which are\r\n   * participating.\r\n   * @param sigType - the type of signature used by this account, must be one of:\r\n   * * sig\r\n   * * msig\r\n   * * lsig\r\n   * * or null if unknown\r\n   */\r\n  constructor({\r\n    address,\r\n    amount,\r\n    amountWithoutPendingRewards,\r\n    minBalance,\r\n    pendingRewards,\r\n    rewards,\r\n    round,\r\n    status,\r\n    totalAppsOptedIn,\r\n    totalAssetsOptedIn,\r\n    totalBoxBytes,\r\n    totalBoxes,\r\n    totalCreatedApps,\r\n    totalCreatedAssets,\r\n    appsLocalState,\r\n    appsTotalExtraPages,\r\n    appsTotalSchema,\r\n    assets,\r\n    authAddr,\r\n    closedAtRound,\r\n    createdApps,\r\n    createdAssets,\r\n    createdAtRound,\r\n    deleted,\r\n    incentiveEligible,\r\n    lastHeartbeat,\r\n    lastProposed,\r\n    participation,\r\n    rewardBase,\r\n    sigType,\r\n  }: {\r\n    address: string;\r\n    amount: number | bigint;\r\n    amountWithoutPendingRewards: number | bigint;\r\n    minBalance: number | bigint;\r\n    pendingRewards: number | bigint;\r\n    rewards: number | bigint;\r\n    round: number | bigint;\r\n    status: string;\r\n    totalAppsOptedIn: number | bigint;\r\n    totalAssetsOptedIn: number | bigint;\r\n    totalBoxBytes: number | bigint;\r\n    totalBoxes: number | bigint;\r\n    totalCreatedApps: number | bigint;\r\n    totalCreatedAssets: number | bigint;\r\n    appsLocalState?: ApplicationLocalState[];\r\n    appsTotalExtraPages?: number | bigint;\r\n    appsTotalSchema?: ApplicationStateSchema;\r\n    assets?: AssetHolding[];\r\n    authAddr?: string;\r\n    closedAtRound?: number | bigint;\r\n    createdApps?: Application[];\r\n    createdAssets?: Asset[];\r\n    createdAtRound?: number | bigint;\r\n    deleted?: boolean;\r\n    incentiveEligible?: boolean;\r\n    lastHeartbeat?: number | bigint;\r\n    lastProposed?: number | bigint;\r\n    participation?: AccountParticipation;\r\n    rewardBase?: number | bigint;\r\n    sigType?: string;\r\n  }) {\r\n    super();\r\n    this.address = address;\r\n    this.amount = amount;\r\n    this.amountWithoutPendingRewards = amountWithoutPendingRewards;\r\n    this.minBalance = minBalance;\r\n    this.pendingRewards = pendingRewards;\r\n    this.rewards = rewards;\r\n    this.round = round;\r\n    this.status = status;\r\n    this.totalAppsOptedIn = totalAppsOptedIn;\r\n    this.totalAssetsOptedIn = totalAssetsOptedIn;\r\n    this.totalBoxBytes = totalBoxBytes;\r\n    this.totalBoxes = totalBoxes;\r\n    this.totalCreatedApps = totalCreatedApps;\r\n    this.totalCreatedAssets = totalCreatedAssets;\r\n    this.appsLocalState = appsLocalState;\r\n    this.appsTotalExtraPages = appsTotalExtraPages;\r\n    this.appsTotalSchema = appsTotalSchema;\r\n    this.assets = assets;\r\n    this.authAddr = authAddr;\r\n    this.closedAtRound = closedAtRound;\r\n    this.createdApps = createdApps;\r\n    this.createdAssets = createdAssets;\r\n    this.createdAtRound = createdAtRound;\r\n    this.deleted = deleted;\r\n    this.incentiveEligible = incentiveEligible;\r\n    this.lastHeartbeat = lastHeartbeat;\r\n    this.lastProposed = lastProposed;\r\n    this.participation = participation;\r\n    this.rewardBase = rewardBase;\r\n    this.sigType = sigType;\r\n\r\n    this.attribute_map = {\r\n      address: 'address',\r\n      amount: 'amount',\r\n      amountWithoutPendingRewards: 'amount-without-pending-rewards',\r\n      minBalance: 'min-balance',\r\n      pendingRewards: 'pending-rewards',\r\n      rewards: 'rewards',\r\n      round: 'round',\r\n      status: 'status',\r\n      totalAppsOptedIn: 'total-apps-opted-in',\r\n      totalAssetsOptedIn: 'total-assets-opted-in',\r\n      totalBoxBytes: 'total-box-bytes',\r\n      totalBoxes: 'total-boxes',\r\n      totalCreatedApps: 'total-created-apps',\r\n      totalCreatedAssets: 'total-created-assets',\r\n      appsLocalState: 'apps-local-state',\r\n      appsTotalExtraPages: 'apps-total-extra-pages',\r\n      appsTotalSchema: 'apps-total-schema',\r\n      assets: 'assets',\r\n      authAddr: 'auth-addr',\r\n      closedAtRound: 'closed-at-round',\r\n      createdApps: 'created-apps',\r\n      createdAssets: 'created-assets',\r\n      createdAtRound: 'created-at-round',\r\n      deleted: 'deleted',\r\n      incentiveEligible: 'incentive-eligible',\r\n      lastHeartbeat: 'last-heartbeat',\r\n      lastProposed: 'last-proposed',\r\n      participation: 'participation',\r\n      rewardBase: 'reward-base',\r\n      sigType: 'sig-type',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): Account {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['address'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'address': ${data}`);\r\n    if (typeof data['amount'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'amount': ${data}`);\r\n    if (typeof data['amount-without-pending-rewards'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'amount-without-pending-rewards': ${data}`\r\n      );\r\n    if (typeof data['min-balance'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'min-balance': ${data}`\r\n      );\r\n    if (typeof data['pending-rewards'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'pending-rewards': ${data}`\r\n      );\r\n    if (typeof data['rewards'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'rewards': ${data}`);\r\n    if (typeof data['round'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'round': ${data}`);\r\n    if (typeof data['status'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'status': ${data}`);\r\n    if (typeof data['total-apps-opted-in'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'total-apps-opted-in': ${data}`\r\n      );\r\n    if (typeof data['total-assets-opted-in'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'total-assets-opted-in': ${data}`\r\n      );\r\n    if (typeof data['total-box-bytes'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'total-box-bytes': ${data}`\r\n      );\r\n    if (typeof data['total-boxes'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'total-boxes': ${data}`\r\n      );\r\n    if (typeof data['total-created-apps'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'total-created-apps': ${data}`\r\n      );\r\n    if (typeof data['total-created-assets'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'total-created-assets': ${data}`\r\n      );\r\n    return new Account({\r\n      address: data['address'],\r\n      amount: data['amount'],\r\n      amountWithoutPendingRewards: data['amount-without-pending-rewards'],\r\n      minBalance: data['min-balance'],\r\n      pendingRewards: data['pending-rewards'],\r\n      rewards: data['rewards'],\r\n      round: data['round'],\r\n      status: data['status'],\r\n      totalAppsOptedIn: data['total-apps-opted-in'],\r\n      totalAssetsOptedIn: data['total-assets-opted-in'],\r\n      totalBoxBytes: data['total-box-bytes'],\r\n      totalBoxes: data['total-boxes'],\r\n      totalCreatedApps: data['total-created-apps'],\r\n      totalCreatedAssets: data['total-created-assets'],\r\n      appsLocalState:\r\n        typeof data['apps-local-state'] !== 'undefined'\r\n          ? data['apps-local-state'].map(\r\n              ApplicationLocalState.from_obj_for_encoding\r\n            )\r\n          : undefined,\r\n      appsTotalExtraPages: data['apps-total-extra-pages'],\r\n      appsTotalSchema:\r\n        typeof data['apps-total-schema'] !== 'undefined'\r\n          ? ApplicationStateSchema.from_obj_for_encoding(\r\n              data['apps-total-schema']\r\n            )\r\n          : undefined,\r\n      assets:\r\n        typeof data['assets'] !== 'undefined'\r\n          ? data['assets'].map(AssetHolding.from_obj_for_encoding)\r\n          : undefined,\r\n      authAddr: data['auth-addr'],\r\n      closedAtRound: data['closed-at-round'],\r\n      createdApps:\r\n        typeof data['created-apps'] !== 'undefined'\r\n          ? data['created-apps'].map(Application.from_obj_for_encoding)\r\n          : undefined,\r\n      createdAssets:\r\n        typeof data['created-assets'] !== 'undefined'\r\n          ? data['created-assets'].map(Asset.from_obj_for_encoding)\r\n          : undefined,\r\n      createdAtRound: data['created-at-round'],\r\n      deleted: data['deleted'],\r\n      incentiveEligible: data['incentive-eligible'],\r\n      lastHeartbeat: data['last-heartbeat'],\r\n      lastProposed: data['last-proposed'],\r\n      participation:\r\n        typeof data['participation'] !== 'undefined'\r\n          ? AccountParticipation.from_obj_for_encoding(data['participation'])\r\n          : undefined,\r\n      rewardBase: data['reward-base'],\r\n      sigType: data['sig-type'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * AccountParticipation describes the parameters used by this account in consensus\r\n * protocol.\r\n */\r\nexport class AccountParticipation extends BaseModel {\r\n  /**\r\n   * Selection public key (if any) currently registered for this round.\r\n   */\r\n  public selectionParticipationKey: Uint8Array;\r\n\r\n  /**\r\n   * First round for which this participation is valid.\r\n   */\r\n  public voteFirstValid: number | bigint;\r\n\r\n  /**\r\n   * Number of subkeys in each batch of participation keys.\r\n   */\r\n  public voteKeyDilution: number | bigint;\r\n\r\n  /**\r\n   * Last round for which this participation is valid.\r\n   */\r\n  public voteLastValid: number | bigint;\r\n\r\n  /**\r\n   * root participation public key (if any) currently registered for this round.\r\n   */\r\n  public voteParticipationKey: Uint8Array;\r\n\r\n  /**\r\n   * Root of the state proof key (if any)\r\n   */\r\n  public stateProofKey?: Uint8Array;\r\n\r\n  /**\r\n   * Creates a new `AccountParticipation` object.\r\n   * @param selectionParticipationKey - Selection public key (if any) currently registered for this round.\r\n   * @param voteFirstValid - First round for which this participation is valid.\r\n   * @param voteKeyDilution - Number of subkeys in each batch of participation keys.\r\n   * @param voteLastValid - Last round for which this participation is valid.\r\n   * @param voteParticipationKey - root participation public key (if any) currently registered for this round.\r\n   * @param stateProofKey - Root of the state proof key (if any)\r\n   */\r\n  constructor({\r\n    selectionParticipationKey,\r\n    voteFirstValid,\r\n    voteKeyDilution,\r\n    voteLastValid,\r\n    voteParticipationKey,\r\n    stateProofKey,\r\n  }: {\r\n    selectionParticipationKey: string | Uint8Array;\r\n    voteFirstValid: number | bigint;\r\n    voteKeyDilution: number | bigint;\r\n    voteLastValid: number | bigint;\r\n    voteParticipationKey: string | Uint8Array;\r\n    stateProofKey?: string | Uint8Array;\r\n  }) {\r\n    super();\r\n    this.selectionParticipationKey =\r\n      typeof selectionParticipationKey === 'string'\r\n        ? new Uint8Array(Buffer.from(selectionParticipationKey, 'base64'))\r\n        : selectionParticipationKey;\r\n    this.voteFirstValid = voteFirstValid;\r\n    this.voteKeyDilution = voteKeyDilution;\r\n    this.voteLastValid = voteLastValid;\r\n    this.voteParticipationKey =\r\n      typeof voteParticipationKey === 'string'\r\n        ? new Uint8Array(Buffer.from(voteParticipationKey, 'base64'))\r\n        : voteParticipationKey;\r\n    this.stateProofKey =\r\n      typeof stateProofKey === 'string'\r\n        ? new Uint8Array(Buffer.from(stateProofKey, 'base64'))\r\n        : stateProofKey;\r\n\r\n    this.attribute_map = {\r\n      selectionParticipationKey: 'selection-participation-key',\r\n      voteFirstValid: 'vote-first-valid',\r\n      voteKeyDilution: 'vote-key-dilution',\r\n      voteLastValid: 'vote-last-valid',\r\n      voteParticipationKey: 'vote-participation-key',\r\n      stateProofKey: 'state-proof-key',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): AccountParticipation {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['selection-participation-key'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'selection-participation-key': ${data}`\r\n      );\r\n    if (typeof data['vote-first-valid'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'vote-first-valid': ${data}`\r\n      );\r\n    if (typeof data['vote-key-dilution'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'vote-key-dilution': ${data}`\r\n      );\r\n    if (typeof data['vote-last-valid'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'vote-last-valid': ${data}`\r\n      );\r\n    if (typeof data['vote-participation-key'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'vote-participation-key': ${data}`\r\n      );\r\n    return new AccountParticipation({\r\n      selectionParticipationKey: data['selection-participation-key'],\r\n      voteFirstValid: data['vote-first-valid'],\r\n      voteKeyDilution: data['vote-key-dilution'],\r\n      voteLastValid: data['vote-last-valid'],\r\n      voteParticipationKey: data['vote-participation-key'],\r\n      stateProofKey: data['state-proof-key'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport class AccountResponse extends BaseModel {\r\n  /**\r\n   * Account information at a given round.\r\n   * Definition:\r\n   * data/basics/userBalance.go : AccountData\r\n   */\r\n  public account: Account;\r\n\r\n  /**\r\n   * Round at which the results were computed.\r\n   */\r\n  public currentRound: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `AccountResponse` object.\r\n   * @param account - Account information at a given round.\r\n   * Definition:\r\n   * data/basics/userBalance.go : AccountData\r\n   * @param currentRound - Round at which the results were computed.\r\n   */\r\n  constructor({\r\n    account,\r\n    currentRound,\r\n  }: {\r\n    account: Account;\r\n    currentRound: number | bigint;\r\n  }) {\r\n    super();\r\n    this.account = account;\r\n    this.currentRound = currentRound;\r\n\r\n    this.attribute_map = {\r\n      account: 'account',\r\n      currentRound: 'current-round',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): AccountResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['account'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'account': ${data}`);\r\n    if (typeof data['current-round'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'current-round': ${data}`\r\n      );\r\n    return new AccountResponse({\r\n      account: Account.from_obj_for_encoding(data['account']),\r\n      currentRound: data['current-round'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Application state delta.\r\n */\r\nexport class AccountStateDelta extends BaseModel {\r\n  public address: string;\r\n\r\n  /**\r\n   * Application state delta.\r\n   */\r\n  public delta: EvalDeltaKeyValue[];\r\n\r\n  /**\r\n   * Creates a new `AccountStateDelta` object.\r\n   * @param address -\r\n   * @param delta - Application state delta.\r\n   */\r\n  constructor({\r\n    address,\r\n    delta,\r\n  }: {\r\n    address: string;\r\n    delta: EvalDeltaKeyValue[];\r\n  }) {\r\n    super();\r\n    this.address = address;\r\n    this.delta = delta;\r\n\r\n    this.attribute_map = {\r\n      address: 'address',\r\n      delta: 'delta',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): AccountStateDelta {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['address'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'address': ${data}`);\r\n    if (!Array.isArray(data['delta']))\r\n      throw new Error(\r\n        `Response is missing required array field 'delta': ${data}`\r\n      );\r\n    return new AccountStateDelta({\r\n      address: data['address'],\r\n      delta: data['delta'].map(EvalDeltaKeyValue.from_obj_for_encoding),\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport class AccountsResponse extends BaseModel {\r\n  public accounts: Account[];\r\n\r\n  /**\r\n   * Round at which the results were computed.\r\n   */\r\n  public currentRound: number | bigint;\r\n\r\n  /**\r\n   * Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\r\n  public nextToken?: string;\r\n\r\n  /**\r\n   * Creates a new `AccountsResponse` object.\r\n   * @param accounts -\r\n   * @param currentRound - Round at which the results were computed.\r\n   * @param nextToken - Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\r\n  constructor({\r\n    accounts,\r\n    currentRound,\r\n    nextToken,\r\n  }: {\r\n    accounts: Account[];\r\n    currentRound: number | bigint;\r\n    nextToken?: string;\r\n  }) {\r\n    super();\r\n    this.accounts = accounts;\r\n    this.currentRound = currentRound;\r\n    this.nextToken = nextToken;\r\n\r\n    this.attribute_map = {\r\n      accounts: 'accounts',\r\n      currentRound: 'current-round',\r\n      nextToken: 'next-token',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): AccountsResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (!Array.isArray(data['accounts']))\r\n      throw new Error(\r\n        `Response is missing required array field 'accounts': ${data}`\r\n      );\r\n    if (typeof data['current-round'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'current-round': ${data}`\r\n      );\r\n    return new AccountsResponse({\r\n      accounts: data['accounts'].map(Account.from_obj_for_encoding),\r\n      currentRound: data['current-round'],\r\n      nextToken: data['next-token'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Application index and its parameters\r\n */\r\nexport class Application extends BaseModel {\r\n  /**\r\n   * application index.\r\n   */\r\n  public id: number | bigint;\r\n\r\n  /**\r\n   * application parameters.\r\n   */\r\n  public params: ApplicationParams;\r\n\r\n  /**\r\n   * Round when this application was created.\r\n   */\r\n  public createdAtRound?: number | bigint;\r\n\r\n  /**\r\n   * Whether or not this application is currently deleted.\r\n   */\r\n  public deleted?: boolean;\r\n\r\n  /**\r\n   * Round when this application was deleted.\r\n   */\r\n  public deletedAtRound?: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `Application` object.\r\n   * @param id - application index.\r\n   * @param params - application parameters.\r\n   * @param createdAtRound - Round when this application was created.\r\n   * @param deleted - Whether or not this application is currently deleted.\r\n   * @param deletedAtRound - Round when this application was deleted.\r\n   */\r\n  constructor({\r\n    id,\r\n    params,\r\n    createdAtRound,\r\n    deleted,\r\n    deletedAtRound,\r\n  }: {\r\n    id: number | bigint;\r\n    params: ApplicationParams;\r\n    createdAtRound?: number | bigint;\r\n    deleted?: boolean;\r\n    deletedAtRound?: number | bigint;\r\n  }) {\r\n    super();\r\n    this.id = id;\r\n    this.params = params;\r\n    this.createdAtRound = createdAtRound;\r\n    this.deleted = deleted;\r\n    this.deletedAtRound = deletedAtRound;\r\n\r\n    this.attribute_map = {\r\n      id: 'id',\r\n      params: 'params',\r\n      createdAtRound: 'created-at-round',\r\n      deleted: 'deleted',\r\n      deletedAtRound: 'deleted-at-round',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): Application {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['id'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'id': ${data}`);\r\n    if (typeof data['params'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'params': ${data}`);\r\n    return new Application({\r\n      id: data['id'],\r\n      params: ApplicationParams.from_obj_for_encoding(data['params']),\r\n      createdAtRound: data['created-at-round'],\r\n      deleted: data['deleted'],\r\n      deletedAtRound: data['deleted-at-round'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Stores local state associated with an application.\r\n */\r\nexport class ApplicationLocalState extends BaseModel {\r\n  /**\r\n   * The application which this local state is for.\r\n   */\r\n  public id: number | bigint;\r\n\r\n  /**\r\n   * schema.\r\n   */\r\n  public schema: ApplicationStateSchema;\r\n\r\n  /**\r\n   * Round when account closed out of the application.\r\n   */\r\n  public closedOutAtRound?: number | bigint;\r\n\r\n  /**\r\n   * Whether or not the application local state is currently deleted from its\r\n   * account.\r\n   */\r\n  public deleted?: boolean;\r\n\r\n  /**\r\n   * storage.\r\n   */\r\n  public keyValue?: TealKeyValue[];\r\n\r\n  /**\r\n   * Round when the account opted into the application.\r\n   */\r\n  public optedInAtRound?: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `ApplicationLocalState` object.\r\n   * @param id - The application which this local state is for.\r\n   * @param schema - schema.\r\n   * @param closedOutAtRound - Round when account closed out of the application.\r\n   * @param deleted - Whether or not the application local state is currently deleted from its\r\n   * account.\r\n   * @param keyValue - storage.\r\n   * @param optedInAtRound - Round when the account opted into the application.\r\n   */\r\n  constructor({\r\n    id,\r\n    schema,\r\n    closedOutAtRound,\r\n    deleted,\r\n    keyValue,\r\n    optedInAtRound,\r\n  }: {\r\n    id: number | bigint;\r\n    schema: ApplicationStateSchema;\r\n    closedOutAtRound?: number | bigint;\r\n    deleted?: boolean;\r\n    keyValue?: TealKeyValue[];\r\n    optedInAtRound?: number | bigint;\r\n  }) {\r\n    super();\r\n    this.id = id;\r\n    this.schema = schema;\r\n    this.closedOutAtRound = closedOutAtRound;\r\n    this.deleted = deleted;\r\n    this.keyValue = keyValue;\r\n    this.optedInAtRound = optedInAtRound;\r\n\r\n    this.attribute_map = {\r\n      id: 'id',\r\n      schema: 'schema',\r\n      closedOutAtRound: 'closed-out-at-round',\r\n      deleted: 'deleted',\r\n      keyValue: 'key-value',\r\n      optedInAtRound: 'opted-in-at-round',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): ApplicationLocalState {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['id'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'id': ${data}`);\r\n    if (typeof data['schema'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'schema': ${data}`);\r\n    return new ApplicationLocalState({\r\n      id: data['id'],\r\n      schema: ApplicationStateSchema.from_obj_for_encoding(data['schema']),\r\n      closedOutAtRound: data['closed-out-at-round'],\r\n      deleted: data['deleted'],\r\n      keyValue:\r\n        typeof data['key-value'] !== 'undefined'\r\n          ? data['key-value'].map(TealKeyValue.from_obj_for_encoding)\r\n          : undefined,\r\n      optedInAtRound: data['opted-in-at-round'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport class ApplicationLocalStatesResponse extends BaseModel {\r\n  public appsLocalStates: ApplicationLocalState[];\r\n\r\n  /**\r\n   * Round at which the results were computed.\r\n   */\r\n  public currentRound: number | bigint;\r\n\r\n  /**\r\n   * Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\r\n  public nextToken?: string;\r\n\r\n  /**\r\n   * Creates a new `ApplicationLocalStatesResponse` object.\r\n   * @param appsLocalStates -\r\n   * @param currentRound - Round at which the results were computed.\r\n   * @param nextToken - Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\r\n  constructor({\r\n    appsLocalStates,\r\n    currentRound,\r\n    nextToken,\r\n  }: {\r\n    appsLocalStates: ApplicationLocalState[];\r\n    currentRound: number | bigint;\r\n    nextToken?: string;\r\n  }) {\r\n    super();\r\n    this.appsLocalStates = appsLocalStates;\r\n    this.currentRound = currentRound;\r\n    this.nextToken = nextToken;\r\n\r\n    this.attribute_map = {\r\n      appsLocalStates: 'apps-local-states',\r\n      currentRound: 'current-round',\r\n      nextToken: 'next-token',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): ApplicationLocalStatesResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (!Array.isArray(data['apps-local-states']))\r\n      throw new Error(\r\n        `Response is missing required array field 'apps-local-states': ${data}`\r\n      );\r\n    if (typeof data['current-round'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'current-round': ${data}`\r\n      );\r\n    return new ApplicationLocalStatesResponse({\r\n      appsLocalStates: data['apps-local-states'].map(\r\n        ApplicationLocalState.from_obj_for_encoding\r\n      ),\r\n      currentRound: data['current-round'],\r\n      nextToken: data['next-token'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Stores the global information associated with an application.\r\n */\r\nexport class ApplicationLogData extends BaseModel {\r\n  /**\r\n   * Logs for the application being executed by the transaction.\r\n   */\r\n  public logs: Uint8Array[];\r\n\r\n  /**\r\n   * Transaction ID\r\n   */\r\n  public txid: string;\r\n\r\n  /**\r\n   * Creates a new `ApplicationLogData` object.\r\n   * @param logs - Logs for the application being executed by the transaction.\r\n   * @param txid - Transaction ID\r\n   */\r\n  constructor({ logs, txid }: { logs: Uint8Array[]; txid: string }) {\r\n    super();\r\n    this.logs = logs;\r\n    this.txid = txid;\r\n\r\n    this.attribute_map = {\r\n      logs: 'logs',\r\n      txid: 'txid',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): ApplicationLogData {\r\n    /* eslint-disable dot-notation */\r\n    if (!Array.isArray(data['logs']))\r\n      throw new Error(\r\n        `Response is missing required array field 'logs': ${data}`\r\n      );\r\n    if (typeof data['txid'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'txid': ${data}`);\r\n    return new ApplicationLogData({\r\n      logs: data['logs'],\r\n      txid: data['txid'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport class ApplicationLogsResponse extends BaseModel {\r\n  /**\r\n   * (appidx) application index.\r\n   */\r\n  public applicationId: number | bigint;\r\n\r\n  /**\r\n   * Round at which the results were computed.\r\n   */\r\n  public currentRound: number | bigint;\r\n\r\n  public logData?: ApplicationLogData[];\r\n\r\n  /**\r\n   * Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\r\n  public nextToken?: string;\r\n\r\n  /**\r\n   * Creates a new `ApplicationLogsResponse` object.\r\n   * @param applicationId - (appidx) application index.\r\n   * @param currentRound - Round at which the results were computed.\r\n   * @param logData -\r\n   * @param nextToken - Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\r\n  constructor({\r\n    applicationId,\r\n    currentRound,\r\n    logData,\r\n    nextToken,\r\n  }: {\r\n    applicationId: number | bigint;\r\n    currentRound: number | bigint;\r\n    logData?: ApplicationLogData[];\r\n    nextToken?: string;\r\n  }) {\r\n    super();\r\n    this.applicationId = applicationId;\r\n    this.currentRound = currentRound;\r\n    this.logData = logData;\r\n    this.nextToken = nextToken;\r\n\r\n    this.attribute_map = {\r\n      applicationId: 'application-id',\r\n      currentRound: 'current-round',\r\n      logData: 'log-data',\r\n      nextToken: 'next-token',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): ApplicationLogsResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['application-id'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'application-id': ${data}`\r\n      );\r\n    if (typeof data['current-round'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'current-round': ${data}`\r\n      );\r\n    return new ApplicationLogsResponse({\r\n      applicationId: data['application-id'],\r\n      currentRound: data['current-round'],\r\n      logData:\r\n        typeof data['log-data'] !== 'undefined'\r\n          ? data['log-data'].map(ApplicationLogData.from_obj_for_encoding)\r\n          : undefined,\r\n      nextToken: data['next-token'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Stores the global information associated with an application.\r\n */\r\nexport class ApplicationParams extends BaseModel {\r\n  /**\r\n   * approval program.\r\n   */\r\n  public approvalProgram: Uint8Array;\r\n\r\n  /**\r\n   * clear state program.\r\n   */\r\n  public clearStateProgram: Uint8Array;\r\n\r\n  /**\r\n   * The address that created this application. This is the address where the\r\n   * parameters and global state for this application can be found.\r\n   */\r\n  public creator?: string;\r\n\r\n  /**\r\n   * the number of extra program pages available to this app.\r\n   */\r\n  public extraProgramPages?: number | bigint;\r\n\r\n  /**\r\n   * global state\r\n   */\r\n  public globalState?: TealKeyValue[];\r\n\r\n  /**\r\n   * global schema\r\n   */\r\n  public globalStateSchema?: ApplicationStateSchema;\r\n\r\n  /**\r\n   * local schema\r\n   */\r\n  public localStateSchema?: ApplicationStateSchema;\r\n\r\n  /**\r\n   * Creates a new `ApplicationParams` object.\r\n   * @param approvalProgram - approval program.\r\n   * @param clearStateProgram - clear state program.\r\n   * @param creator - The address that created this application. This is the address where the\r\n   * parameters and global state for this application can be found.\r\n   * @param extraProgramPages - the number of extra program pages available to this app.\r\n   * @param globalState - global state\r\n   * @param globalStateSchema - global schema\r\n   * @param localStateSchema - local schema\r\n   */\r\n  constructor({\r\n    approvalProgram,\r\n    clearStateProgram,\r\n    creator,\r\n    extraProgramPages,\r\n    globalState,\r\n    globalStateSchema,\r\n    localStateSchema,\r\n  }: {\r\n    approvalProgram: string | Uint8Array;\r\n    clearStateProgram: string | Uint8Array;\r\n    creator?: string;\r\n    extraProgramPages?: number | bigint;\r\n    globalState?: TealKeyValue[];\r\n    globalStateSchema?: ApplicationStateSchema;\r\n    localStateSchema?: ApplicationStateSchema;\r\n  }) {\r\n    super();\r\n    this.approvalProgram =\r\n      typeof approvalProgram === 'string'\r\n        ? new Uint8Array(Buffer.from(approvalProgram, 'base64'))\r\n        : approvalProgram;\r\n    this.clearStateProgram =\r\n      typeof clearStateProgram === 'string'\r\n        ? new Uint8Array(Buffer.from(clearStateProgram, 'base64'))\r\n        : clearStateProgram;\r\n    this.creator = creator;\r\n    this.extraProgramPages = extraProgramPages;\r\n    this.globalState = globalState;\r\n    this.globalStateSchema = globalStateSchema;\r\n    this.localStateSchema = localStateSchema;\r\n\r\n    this.attribute_map = {\r\n      approvalProgram: 'approval-program',\r\n      clearStateProgram: 'clear-state-program',\r\n      creator: 'creator',\r\n      extraProgramPages: 'extra-program-pages',\r\n      globalState: 'global-state',\r\n      globalStateSchema: 'global-state-schema',\r\n      localStateSchema: 'local-state-schema',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): ApplicationParams {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['approval-program'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'approval-program': ${data}`\r\n      );\r\n    if (typeof data['clear-state-program'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'clear-state-program': ${data}`\r\n      );\r\n    return new ApplicationParams({\r\n      approvalProgram: data['approval-program'],\r\n      clearStateProgram: data['clear-state-program'],\r\n      creator: data['creator'],\r\n      extraProgramPages: data['extra-program-pages'],\r\n      globalState:\r\n        typeof data['global-state'] !== 'undefined'\r\n          ? data['global-state'].map(TealKeyValue.from_obj_for_encoding)\r\n          : undefined,\r\n      globalStateSchema:\r\n        typeof data['global-state-schema'] !== 'undefined'\r\n          ? ApplicationStateSchema.from_obj_for_encoding(\r\n              data['global-state-schema']\r\n            )\r\n          : undefined,\r\n      localStateSchema:\r\n        typeof data['local-state-schema'] !== 'undefined'\r\n          ? ApplicationStateSchema.from_obj_for_encoding(\r\n              data['local-state-schema']\r\n            )\r\n          : undefined,\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport class ApplicationResponse extends BaseModel {\r\n  /**\r\n   * Round at which the results were computed.\r\n   */\r\n  public currentRound: number | bigint;\r\n\r\n  /**\r\n   * Application index and its parameters\r\n   */\r\n  public application?: Application;\r\n\r\n  /**\r\n   * Creates a new `ApplicationResponse` object.\r\n   * @param currentRound - Round at which the results were computed.\r\n   * @param application - Application index and its parameters\r\n   */\r\n  constructor({\r\n    currentRound,\r\n    application,\r\n  }: {\r\n    currentRound: number | bigint;\r\n    application?: Application;\r\n  }) {\r\n    super();\r\n    this.currentRound = currentRound;\r\n    this.application = application;\r\n\r\n    this.attribute_map = {\r\n      currentRound: 'current-round',\r\n      application: 'application',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): ApplicationResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['current-round'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'current-round': ${data}`\r\n      );\r\n    return new ApplicationResponse({\r\n      currentRound: data['current-round'],\r\n      application:\r\n        typeof data['application'] !== 'undefined'\r\n          ? Application.from_obj_for_encoding(data['application'])\r\n          : undefined,\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Specifies maximums on the number of each type that may be stored.\r\n */\r\nexport class ApplicationStateSchema extends BaseModel {\r\n  /**\r\n   * number of byte slices.\r\n   */\r\n  public numByteSlice: number | bigint;\r\n\r\n  /**\r\n   * number of uints.\r\n   */\r\n  public numUint: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `ApplicationStateSchema` object.\r\n   * @param numByteSlice - number of byte slices.\r\n   * @param numUint - number of uints.\r\n   */\r\n  constructor({\r\n    numByteSlice,\r\n    numUint,\r\n  }: {\r\n    numByteSlice: number | bigint;\r\n    numUint: number | bigint;\r\n  }) {\r\n    super();\r\n    this.numByteSlice = numByteSlice;\r\n    this.numUint = numUint;\r\n\r\n    this.attribute_map = {\r\n      numByteSlice: 'num-byte-slice',\r\n      numUint: 'num-uint',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): ApplicationStateSchema {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['num-byte-slice'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'num-byte-slice': ${data}`\r\n      );\r\n    if (typeof data['num-uint'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'num-uint': ${data}`);\r\n    return new ApplicationStateSchema({\r\n      numByteSlice: data['num-byte-slice'],\r\n      numUint: data['num-uint'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport class ApplicationsResponse extends BaseModel {\r\n  public applications: Application[];\r\n\r\n  /**\r\n   * Round at which the results were computed.\r\n   */\r\n  public currentRound: number | bigint;\r\n\r\n  /**\r\n   * Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\r\n  public nextToken?: string;\r\n\r\n  /**\r\n   * Creates a new `ApplicationsResponse` object.\r\n   * @param applications -\r\n   * @param currentRound - Round at which the results were computed.\r\n   * @param nextToken - Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\r\n  constructor({\r\n    applications,\r\n    currentRound,\r\n    nextToken,\r\n  }: {\r\n    applications: Application[];\r\n    currentRound: number | bigint;\r\n    nextToken?: string;\r\n  }) {\r\n    super();\r\n    this.applications = applications;\r\n    this.currentRound = currentRound;\r\n    this.nextToken = nextToken;\r\n\r\n    this.attribute_map = {\r\n      applications: 'applications',\r\n      currentRound: 'current-round',\r\n      nextToken: 'next-token',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): ApplicationsResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (!Array.isArray(data['applications']))\r\n      throw new Error(\r\n        `Response is missing required array field 'applications': ${data}`\r\n      );\r\n    if (typeof data['current-round'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'current-round': ${data}`\r\n      );\r\n    return new ApplicationsResponse({\r\n      applications: data['applications'].map(Application.from_obj_for_encoding),\r\n      currentRound: data['current-round'],\r\n      nextToken: data['next-token'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Specifies both the unique identifier and the parameters for an asset\r\n */\r\nexport class Asset extends BaseModel {\r\n  /**\r\n   * unique asset identifier\r\n   */\r\n  public index: number | bigint;\r\n\r\n  /**\r\n   * AssetParams specifies the parameters for an asset.\r\n   * (apar) when part of an AssetConfig transaction.\r\n   * Definition:\r\n   * data/transactions/asset.go : AssetParams\r\n   */\r\n  public params: AssetParams;\r\n\r\n  /**\r\n   * Round during which this asset was created.\r\n   */\r\n  public createdAtRound?: number | bigint;\r\n\r\n  /**\r\n   * Whether or not this asset is currently deleted.\r\n   */\r\n  public deleted?: boolean;\r\n\r\n  /**\r\n   * Round during which this asset was destroyed.\r\n   */\r\n  public destroyedAtRound?: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `Asset` object.\r\n   * @param index - unique asset identifier\r\n   * @param params - AssetParams specifies the parameters for an asset.\r\n   * (apar) when part of an AssetConfig transaction.\r\n   * Definition:\r\n   * data/transactions/asset.go : AssetParams\r\n   * @param createdAtRound - Round during which this asset was created.\r\n   * @param deleted - Whether or not this asset is currently deleted.\r\n   * @param destroyedAtRound - Round during which this asset was destroyed.\r\n   */\r\n  constructor({\r\n    index,\r\n    params,\r\n    createdAtRound,\r\n    deleted,\r\n    destroyedAtRound,\r\n  }: {\r\n    index: number | bigint;\r\n    params: AssetParams;\r\n    createdAtRound?: number | bigint;\r\n    deleted?: boolean;\r\n    destroyedAtRound?: number | bigint;\r\n  }) {\r\n    super();\r\n    this.index = index;\r\n    this.params = params;\r\n    this.createdAtRound = createdAtRound;\r\n    this.deleted = deleted;\r\n    this.destroyedAtRound = destroyedAtRound;\r\n\r\n    this.attribute_map = {\r\n      index: 'index',\r\n      params: 'params',\r\n      createdAtRound: 'created-at-round',\r\n      deleted: 'deleted',\r\n      destroyedAtRound: 'destroyed-at-round',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): Asset {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['index'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'index': ${data}`);\r\n    if (typeof data['params'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'params': ${data}`);\r\n    return new Asset({\r\n      index: data['index'],\r\n      params: AssetParams.from_obj_for_encoding(data['params']),\r\n      createdAtRound: data['created-at-round'],\r\n      deleted: data['deleted'],\r\n      destroyedAtRound: data['destroyed-at-round'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport class AssetBalancesResponse extends BaseModel {\r\n  public balances: MiniAssetHolding[];\r\n\r\n  /**\r\n   * Round at which the results were computed.\r\n   */\r\n  public currentRound: number | bigint;\r\n\r\n  /**\r\n   * Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\r\n  public nextToken?: string;\r\n\r\n  /**\r\n   * Creates a new `AssetBalancesResponse` object.\r\n   * @param balances -\r\n   * @param currentRound - Round at which the results were computed.\r\n   * @param nextToken - Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\r\n  constructor({\r\n    balances,\r\n    currentRound,\r\n    nextToken,\r\n  }: {\r\n    balances: MiniAssetHolding[];\r\n    currentRound: number | bigint;\r\n    nextToken?: string;\r\n  }) {\r\n    super();\r\n    this.balances = balances;\r\n    this.currentRound = currentRound;\r\n    this.nextToken = nextToken;\r\n\r\n    this.attribute_map = {\r\n      balances: 'balances',\r\n      currentRound: 'current-round',\r\n      nextToken: 'next-token',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): AssetBalancesResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (!Array.isArray(data['balances']))\r\n      throw new Error(\r\n        `Response is missing required array field 'balances': ${data}`\r\n      );\r\n    if (typeof data['current-round'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'current-round': ${data}`\r\n      );\r\n    return new AssetBalancesResponse({\r\n      balances: data['balances'].map(MiniAssetHolding.from_obj_for_encoding),\r\n      currentRound: data['current-round'],\r\n      nextToken: data['next-token'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Describes an asset held by an account.\r\n * Definition:\r\n * data/basics/userBalance.go : AssetHolding\r\n */\r\nexport class AssetHolding extends BaseModel {\r\n  /**\r\n   * number of units held.\r\n   */\r\n  public amount: number | bigint;\r\n\r\n  /**\r\n   * Asset ID of the holding.\r\n   */\r\n  public assetId: number | bigint;\r\n\r\n  /**\r\n   * whether or not the holding is frozen.\r\n   */\r\n  public isFrozen: boolean;\r\n\r\n  /**\r\n   * Whether or not the asset holding is currently deleted from its account.\r\n   */\r\n  public deleted?: boolean;\r\n\r\n  /**\r\n   * Round during which the account opted into this asset holding.\r\n   */\r\n  public optedInAtRound?: number | bigint;\r\n\r\n  /**\r\n   * Round during which the account opted out of this asset holding.\r\n   */\r\n  public optedOutAtRound?: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `AssetHolding` object.\r\n   * @param amount - number of units held.\r\n   * @param assetId - Asset ID of the holding.\r\n   * @param isFrozen - whether or not the holding is frozen.\r\n   * @param deleted - Whether or not the asset holding is currently deleted from its account.\r\n   * @param optedInAtRound - Round during which the account opted into this asset holding.\r\n   * @param optedOutAtRound - Round during which the account opted out of this asset holding.\r\n   */\r\n  constructor({\r\n    amount,\r\n    assetId,\r\n    isFrozen,\r\n    deleted,\r\n    optedInAtRound,\r\n    optedOutAtRound,\r\n  }: {\r\n    amount: number | bigint;\r\n    assetId: number | bigint;\r\n    isFrozen: boolean;\r\n    deleted?: boolean;\r\n    optedInAtRound?: number | bigint;\r\n    optedOutAtRound?: number | bigint;\r\n  }) {\r\n    super();\r\n    this.amount = amount;\r\n    this.assetId = assetId;\r\n    this.isFrozen = isFrozen;\r\n    this.deleted = deleted;\r\n    this.optedInAtRound = optedInAtRound;\r\n    this.optedOutAtRound = optedOutAtRound;\r\n\r\n    this.attribute_map = {\r\n      amount: 'amount',\r\n      assetId: 'asset-id',\r\n      isFrozen: 'is-frozen',\r\n      deleted: 'deleted',\r\n      optedInAtRound: 'opted-in-at-round',\r\n      optedOutAtRound: 'opted-out-at-round',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): AssetHolding {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['amount'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'amount': ${data}`);\r\n    if (typeof data['asset-id'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'asset-id': ${data}`);\r\n    if (typeof data['is-frozen'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'is-frozen': ${data}`\r\n      );\r\n    return new AssetHolding({\r\n      amount: data['amount'],\r\n      assetId: data['asset-id'],\r\n      isFrozen: data['is-frozen'],\r\n      deleted: data['deleted'],\r\n      optedInAtRound: data['opted-in-at-round'],\r\n      optedOutAtRound: data['opted-out-at-round'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport class AssetHoldingsResponse extends BaseModel {\r\n  public assets: AssetHolding[];\r\n\r\n  /**\r\n   * Round at which the results were computed.\r\n   */\r\n  public currentRound: number | bigint;\r\n\r\n  /**\r\n   * Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\r\n  public nextToken?: string;\r\n\r\n  /**\r\n   * Creates a new `AssetHoldingsResponse` object.\r\n   * @param assets -\r\n   * @param currentRound - Round at which the results were computed.\r\n   * @param nextToken - Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\r\n  constructor({\r\n    assets,\r\n    currentRound,\r\n    nextToken,\r\n  }: {\r\n    assets: AssetHolding[];\r\n    currentRound: number | bigint;\r\n    nextToken?: string;\r\n  }) {\r\n    super();\r\n    this.assets = assets;\r\n    this.currentRound = currentRound;\r\n    this.nextToken = nextToken;\r\n\r\n    this.attribute_map = {\r\n      assets: 'assets',\r\n      currentRound: 'current-round',\r\n      nextToken: 'next-token',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): AssetHoldingsResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (!Array.isArray(data['assets']))\r\n      throw new Error(\r\n        `Response is missing required array field 'assets': ${data}`\r\n      );\r\n    if (typeof data['current-round'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'current-round': ${data}`\r\n      );\r\n    return new AssetHoldingsResponse({\r\n      assets: data['assets'].map(AssetHolding.from_obj_for_encoding),\r\n      currentRound: data['current-round'],\r\n      nextToken: data['next-token'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * AssetParams specifies the parameters for an asset.\r\n * (apar) when part of an AssetConfig transaction.\r\n * Definition:\r\n * data/transactions/asset.go : AssetParams\r\n */\r\nexport class AssetParams extends BaseModel {\r\n  /**\r\n   * The address that created this asset. This is the address where the parameters\r\n   * for this asset can be found, and also the address where unwanted asset units can\r\n   * be sent in the worst case.\r\n   */\r\n  public creator: string;\r\n\r\n  /**\r\n   * The number of digits to use after the decimal point when displaying this asset.\r\n   * If 0, the asset is not divisible. If 1, the base unit of the asset is in tenths.\r\n   * If 2, the base unit of the asset is in hundredths, and so on. This value must be\r\n   * between 0 and 19 (inclusive).\r\n   */\r\n  public decimals: number | bigint;\r\n\r\n  /**\r\n   * The total number of units of this asset.\r\n   */\r\n  public total: number | bigint;\r\n\r\n  /**\r\n   * Address of account used to clawback holdings of this asset. If empty, clawback\r\n   * is not permitted.\r\n   */\r\n  public clawback?: string;\r\n\r\n  /**\r\n   * Whether holdings of this asset are frozen by default.\r\n   */\r\n  public defaultFrozen?: boolean;\r\n\r\n  /**\r\n   * Address of account used to freeze holdings of this asset. If empty, freezing is\r\n   * not permitted.\r\n   */\r\n  public freeze?: string;\r\n\r\n  /**\r\n   * Address of account used to manage the keys of this asset and to destroy it.\r\n   */\r\n  public manager?: string;\r\n\r\n  /**\r\n   * A commitment to some unspecified asset metadata. The format of this metadata is\r\n   * up to the application.\r\n   */\r\n  public metadataHash?: Uint8Array;\r\n\r\n  /**\r\n   * Name of this asset, as supplied by the creator. Included only when the asset\r\n   * name is composed of printable utf-8 characters.\r\n   */\r\n  public name?: string;\r\n\r\n  /**\r\n   * Base64 encoded name of this asset, as supplied by the creator.\r\n   */\r\n  public nameB64?: Uint8Array;\r\n\r\n  /**\r\n   * Address of account holding reserve (non-minted) units of this asset.\r\n   */\r\n  public reserve?: string;\r\n\r\n  /**\r\n   * Name of a unit of this asset, as supplied by the creator. Included only when the\r\n   * name of a unit of this asset is composed of printable utf-8 characters.\r\n   */\r\n  public unitName?: string;\r\n\r\n  /**\r\n   * Base64 encoded name of a unit of this asset, as supplied by the creator.\r\n   */\r\n  public unitNameB64?: Uint8Array;\r\n\r\n  /**\r\n   * URL where more information about the asset can be retrieved. Included only when\r\n   * the URL is composed of printable utf-8 characters.\r\n   */\r\n  public url?: string;\r\n\r\n  /**\r\n   * Base64 encoded URL where more information about the asset can be retrieved.\r\n   */\r\n  public urlB64?: Uint8Array;\r\n\r\n  /**\r\n   * Creates a new `AssetParams` object.\r\n   * @param creator - The address that created this asset. This is the address where the parameters\r\n   * for this asset can be found, and also the address where unwanted asset units can\r\n   * be sent in the worst case.\r\n   * @param decimals - The number of digits to use after the decimal point when displaying this asset.\r\n   * If 0, the asset is not divisible. If 1, the base unit of the asset is in tenths.\r\n   * If 2, the base unit of the asset is in hundredths, and so on. This value must be\r\n   * between 0 and 19 (inclusive).\r\n   * @param total - The total number of units of this asset.\r\n   * @param clawback - Address of account used to clawback holdings of this asset. If empty, clawback\r\n   * is not permitted.\r\n   * @param defaultFrozen - Whether holdings of this asset are frozen by default.\r\n   * @param freeze - Address of account used to freeze holdings of this asset. If empty, freezing is\r\n   * not permitted.\r\n   * @param manager - Address of account used to manage the keys of this asset and to destroy it.\r\n   * @param metadataHash - A commitment to some unspecified asset metadata. The format of this metadata is\r\n   * up to the application.\r\n   * @param name - Name of this asset, as supplied by the creator. Included only when the asset\r\n   * name is composed of printable utf-8 characters.\r\n   * @param nameB64 - Base64 encoded name of this asset, as supplied by the creator.\r\n   * @param reserve - Address of account holding reserve (non-minted) units of this asset.\r\n   * @param unitName - Name of a unit of this asset, as supplied by the creator. Included only when the\r\n   * name of a unit of this asset is composed of printable utf-8 characters.\r\n   * @param unitNameB64 - Base64 encoded name of a unit of this asset, as supplied by the creator.\r\n   * @param url - URL where more information about the asset can be retrieved. Included only when\r\n   * the URL is composed of printable utf-8 characters.\r\n   * @param urlB64 - Base64 encoded URL where more information about the asset can be retrieved.\r\n   */\r\n  constructor({\r\n    creator,\r\n    decimals,\r\n    total,\r\n    clawback,\r\n    defaultFrozen,\r\n    freeze,\r\n    manager,\r\n    metadataHash,\r\n    name,\r\n    nameB64,\r\n    reserve,\r\n    unitName,\r\n    unitNameB64,\r\n    url,\r\n    urlB64,\r\n  }: {\r\n    creator: string;\r\n    decimals: number | bigint;\r\n    total: number | bigint;\r\n    clawback?: string;\r\n    defaultFrozen?: boolean;\r\n    freeze?: string;\r\n    manager?: string;\r\n    metadataHash?: string | Uint8Array;\r\n    name?: string;\r\n    nameB64?: string | Uint8Array;\r\n    reserve?: string;\r\n    unitName?: string;\r\n    unitNameB64?: string | Uint8Array;\r\n    url?: string;\r\n    urlB64?: string | Uint8Array;\r\n  }) {\r\n    super();\r\n    this.creator = creator;\r\n    this.decimals = decimals;\r\n    this.total = total;\r\n    this.clawback = clawback;\r\n    this.defaultFrozen = defaultFrozen;\r\n    this.freeze = freeze;\r\n    this.manager = manager;\r\n    this.metadataHash =\r\n      typeof metadataHash === 'string'\r\n        ? new Uint8Array(Buffer.from(metadataHash, 'base64'))\r\n        : metadataHash;\r\n    this.name = name;\r\n    this.nameB64 =\r\n      typeof nameB64 === 'string'\r\n        ? new Uint8Array(Buffer.from(nameB64, 'base64'))\r\n        : nameB64;\r\n    this.reserve = reserve;\r\n    this.unitName = unitName;\r\n    this.unitNameB64 =\r\n      typeof unitNameB64 === 'string'\r\n        ? new Uint8Array(Buffer.from(unitNameB64, 'base64'))\r\n        : unitNameB64;\r\n    this.url = url;\r\n    this.urlB64 =\r\n      typeof urlB64 === 'string'\r\n        ? new Uint8Array(Buffer.from(urlB64, 'base64'))\r\n        : urlB64;\r\n\r\n    this.attribute_map = {\r\n      creator: 'creator',\r\n      decimals: 'decimals',\r\n      total: 'total',\r\n      clawback: 'clawback',\r\n      defaultFrozen: 'default-frozen',\r\n      freeze: 'freeze',\r\n      manager: 'manager',\r\n      metadataHash: 'metadata-hash',\r\n      name: 'name',\r\n      nameB64: 'name-b64',\r\n      reserve: 'reserve',\r\n      unitName: 'unit-name',\r\n      unitNameB64: 'unit-name-b64',\r\n      url: 'url',\r\n      urlB64: 'url-b64',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): AssetParams {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['creator'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'creator': ${data}`);\r\n    if (typeof data['decimals'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'decimals': ${data}`);\r\n    if (typeof data['total'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'total': ${data}`);\r\n    return new AssetParams({\r\n      creator: data['creator'],\r\n      decimals: data['decimals'],\r\n      total: data['total'],\r\n      clawback: data['clawback'],\r\n      defaultFrozen: data['default-frozen'],\r\n      freeze: data['freeze'],\r\n      manager: data['manager'],\r\n      metadataHash: data['metadata-hash'],\r\n      name: data['name'],\r\n      nameB64: data['name-b64'],\r\n      reserve: data['reserve'],\r\n      unitName: data['unit-name'],\r\n      unitNameB64: data['unit-name-b64'],\r\n      url: data['url'],\r\n      urlB64: data['url-b64'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport class AssetResponse extends BaseModel {\r\n  /**\r\n   * Specifies both the unique identifier and the parameters for an asset\r\n   */\r\n  public asset: Asset;\r\n\r\n  /**\r\n   * Round at which the results were computed.\r\n   */\r\n  public currentRound: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `AssetResponse` object.\r\n   * @param asset - Specifies both the unique identifier and the parameters for an asset\r\n   * @param currentRound - Round at which the results were computed.\r\n   */\r\n  constructor({\r\n    asset,\r\n    currentRound,\r\n  }: {\r\n    asset: Asset;\r\n    currentRound: number | bigint;\r\n  }) {\r\n    super();\r\n    this.asset = asset;\r\n    this.currentRound = currentRound;\r\n\r\n    this.attribute_map = {\r\n      asset: 'asset',\r\n      currentRound: 'current-round',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): AssetResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['asset'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'asset': ${data}`);\r\n    if (typeof data['current-round'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'current-round': ${data}`\r\n      );\r\n    return new AssetResponse({\r\n      asset: Asset.from_obj_for_encoding(data['asset']),\r\n      currentRound: data['current-round'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport class AssetsResponse extends BaseModel {\r\n  public assets: Asset[];\r\n\r\n  /**\r\n   * Round at which the results were computed.\r\n   */\r\n  public currentRound: number | bigint;\r\n\r\n  /**\r\n   * Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\r\n  public nextToken?: string;\r\n\r\n  /**\r\n   * Creates a new `AssetsResponse` object.\r\n   * @param assets -\r\n   * @param currentRound - Round at which the results were computed.\r\n   * @param nextToken - Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\r\n  constructor({\r\n    assets,\r\n    currentRound,\r\n    nextToken,\r\n  }: {\r\n    assets: Asset[];\r\n    currentRound: number | bigint;\r\n    nextToken?: string;\r\n  }) {\r\n    super();\r\n    this.assets = assets;\r\n    this.currentRound = currentRound;\r\n    this.nextToken = nextToken;\r\n\r\n    this.attribute_map = {\r\n      assets: 'assets',\r\n      currentRound: 'current-round',\r\n      nextToken: 'next-token',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): AssetsResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (!Array.isArray(data['assets']))\r\n      throw new Error(\r\n        `Response is missing required array field 'assets': ${data}`\r\n      );\r\n    if (typeof data['current-round'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'current-round': ${data}`\r\n      );\r\n    return new AssetsResponse({\r\n      assets: data['assets'].map(Asset.from_obj_for_encoding),\r\n      currentRound: data['current-round'],\r\n      nextToken: data['next-token'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Block information.\r\n * Definition:\r\n * data/bookkeeping/block.go : Block\r\n */\r\nexport class Block extends BaseModel {\r\n  /**\r\n   * (gh) hash to which this block belongs.\r\n   */\r\n  public genesisHash: Uint8Array;\r\n\r\n  /**\r\n   * (gen) ID to which this block belongs.\r\n   */\r\n  public genesisId: string;\r\n\r\n  /**\r\n   * (prev) Previous block hash.\r\n   */\r\n  public previousBlockHash: Uint8Array;\r\n\r\n  /**\r\n   * (rnd) Current round on which this block was appended to the chain.\r\n   */\r\n  public round: number | bigint;\r\n\r\n  /**\r\n   * (seed) Sortition seed.\r\n   */\r\n  public seed: Uint8Array;\r\n\r\n  /**\r\n   * (ts) Block creation timestamp in seconds since eposh\r\n   */\r\n  public timestamp: number | bigint;\r\n\r\n  /**\r\n   * (txn) TransactionsRoot authenticates the set of transactions appearing in the\r\n   * block. More specifically, it's the root of a merkle tree whose leaves are the\r\n   * block's Txids, in lexicographic order. For the empty block, it's 0. Note that\r\n   * the TxnRoot does not authenticate the signatures on the transactions, only the\r\n   * transactions themselves. Two blocks with the same transactions but in a\r\n   * different order and with different signatures will have the same TxnRoot.\r\n   */\r\n  public transactionsRoot: Uint8Array;\r\n\r\n  /**\r\n   * (txn256) TransactionsRootSHA256 is an auxiliary TransactionRoot, built using a\r\n   * vector commitment instead of a merkle tree, and SHA256 hash function instead of\r\n   * the default SHA512_256. This commitment can be used on environments where only\r\n   * the SHA256 function exists.\r\n   */\r\n  public transactionsRootSha256: Uint8Array;\r\n\r\n  /**\r\n   * the potential bonus payout for this block.\r\n   */\r\n  public bonus?: number | bigint;\r\n\r\n  /**\r\n   * the sum of all fees paid by transactions in this block.\r\n   */\r\n  public feesCollected?: number | bigint;\r\n\r\n  /**\r\n   * Participation account data that needs to be checked/acted on by the network.\r\n   */\r\n  public participationUpdates?: ParticipationUpdates;\r\n\r\n  /**\r\n   * the proposer of this block.\r\n   */\r\n  public proposer?: string;\r\n\r\n  /**\r\n   * the actual amount transferred to the proposer from the fee sink.\r\n   */\r\n  public proposerPayout?: number | bigint;\r\n\r\n  /**\r\n   * Fields relating to rewards,\r\n   */\r\n  public rewards?: BlockRewards;\r\n\r\n  /**\r\n   * Tracks the status of state proofs.\r\n   */\r\n  public stateProofTracking?: StateProofTracking[];\r\n\r\n  /**\r\n   * (txns) list of transactions corresponding to a given round.\r\n   */\r\n  public transactions?: Transaction[];\r\n\r\n  /**\r\n   * (tc) TxnCounter counts the number of transactions committed in the ledger, from\r\n   * the time at which support for this feature was introduced.\r\n   * Specifically, TxnCounter is the number of the next transaction that will be\r\n   * committed after this block. It is 0 when no transactions have ever been\r\n   * committed (since TxnCounter started being supported).\r\n   */\r\n  public txnCounter?: number | bigint;\r\n\r\n  /**\r\n   * Fields relating to a protocol upgrade.\r\n   */\r\n  public upgradeState?: BlockUpgradeState;\r\n\r\n  /**\r\n   * Fields relating to voting for a protocol upgrade.\r\n   */\r\n  public upgradeVote?: BlockUpgradeVote;\r\n\r\n  /**\r\n   * Creates a new `Block` object.\r\n   * @param genesisHash - (gh) hash to which this block belongs.\r\n   * @param genesisId - (gen) ID to which this block belongs.\r\n   * @param previousBlockHash - (prev) Previous block hash.\r\n   * @param round - (rnd) Current round on which this block was appended to the chain.\r\n   * @param seed - (seed) Sortition seed.\r\n   * @param timestamp - (ts) Block creation timestamp in seconds since eposh\r\n   * @param transactionsRoot - (txn) TransactionsRoot authenticates the set of transactions appearing in the\r\n   * block. More specifically, it's the root of a merkle tree whose leaves are the\r\n   * block's Txids, in lexicographic order. For the empty block, it's 0. Note that\r\n   * the TxnRoot does not authenticate the signatures on the transactions, only the\r\n   * transactions themselves. Two blocks with the same transactions but in a\r\n   * different order and with different signatures will have the same TxnRoot.\r\n   * @param transactionsRootSha256 - (txn256) TransactionsRootSHA256 is an auxiliary TransactionRoot, built using a\r\n   * vector commitment instead of a merkle tree, and SHA256 hash function instead of\r\n   * the default SHA512_256. This commitment can be used on environments where only\r\n   * the SHA256 function exists.\r\n   * @param bonus - the potential bonus payout for this block.\r\n   * @param feesCollected - the sum of all fees paid by transactions in this block.\r\n   * @param participationUpdates - Participation account data that needs to be checked/acted on by the network.\r\n   * @param proposer - the proposer of this block.\r\n   * @param proposerPayout - the actual amount transferred to the proposer from the fee sink.\r\n   * @param rewards - Fields relating to rewards,\r\n   * @param stateProofTracking - Tracks the status of state proofs.\r\n   * @param transactions - (txns) list of transactions corresponding to a given round.\r\n   * @param txnCounter - (tc) TxnCounter counts the number of transactions committed in the ledger, from\r\n   * the time at which support for this feature was introduced.\r\n   * Specifically, TxnCounter is the number of the next transaction that will be\r\n   * committed after this block. It is 0 when no transactions have ever been\r\n   * committed (since TxnCounter started being supported).\r\n   * @param upgradeState - Fields relating to a protocol upgrade.\r\n   * @param upgradeVote - Fields relating to voting for a protocol upgrade.\r\n   */\r\n  constructor({\r\n    genesisHash,\r\n    genesisId,\r\n    previousBlockHash,\r\n    round,\r\n    seed,\r\n    timestamp,\r\n    transactionsRoot,\r\n    transactionsRootSha256,\r\n    bonus,\r\n    feesCollected,\r\n    participationUpdates,\r\n    proposer,\r\n    proposerPayout,\r\n    rewards,\r\n    stateProofTracking,\r\n    transactions,\r\n    txnCounter,\r\n    upgradeState,\r\n    upgradeVote,\r\n  }: {\r\n    genesisHash: string | Uint8Array;\r\n    genesisId: string;\r\n    previousBlockHash: string | Uint8Array;\r\n    round: number | bigint;\r\n    seed: string | Uint8Array;\r\n    timestamp: number | bigint;\r\n    transactionsRoot: string | Uint8Array;\r\n    transactionsRootSha256: string | Uint8Array;\r\n    bonus?: number | bigint;\r\n    feesCollected?: number | bigint;\r\n    participationUpdates?: ParticipationUpdates;\r\n    proposer?: string;\r\n    proposerPayout?: number | bigint;\r\n    rewards?: BlockRewards;\r\n    stateProofTracking?: StateProofTracking[];\r\n    transactions?: Transaction[];\r\n    txnCounter?: number | bigint;\r\n    upgradeState?: BlockUpgradeState;\r\n    upgradeVote?: BlockUpgradeVote;\r\n  }) {\r\n    super();\r\n    this.genesisHash =\r\n      typeof genesisHash === 'string'\r\n        ? new Uint8Array(Buffer.from(genesisHash, 'base64'))\r\n        : genesisHash;\r\n    this.genesisId = genesisId;\r\n    this.previousBlockHash =\r\n      typeof previousBlockHash === 'string'\r\n        ? new Uint8Array(Buffer.from(previousBlockHash, 'base64'))\r\n        : previousBlockHash;\r\n    this.round = round;\r\n    this.seed =\r\n      typeof seed === 'string'\r\n        ? new Uint8Array(Buffer.from(seed, 'base64'))\r\n        : seed;\r\n    this.timestamp = timestamp;\r\n    this.transactionsRoot =\r\n      typeof transactionsRoot === 'string'\r\n        ? new Uint8Array(Buffer.from(transactionsRoot, 'base64'))\r\n        : transactionsRoot;\r\n    this.transactionsRootSha256 =\r\n      typeof transactionsRootSha256 === 'string'\r\n        ? new Uint8Array(Buffer.from(transactionsRootSha256, 'base64'))\r\n        : transactionsRootSha256;\r\n    this.bonus = bonus;\r\n    this.feesCollected = feesCollected;\r\n    this.participationUpdates = participationUpdates;\r\n    this.proposer = proposer;\r\n    this.proposerPayout = proposerPayout;\r\n    this.rewards = rewards;\r\n    this.stateProofTracking = stateProofTracking;\r\n    this.transactions = transactions;\r\n    this.txnCounter = txnCounter;\r\n    this.upgradeState = upgradeState;\r\n    this.upgradeVote = upgradeVote;\r\n\r\n    this.attribute_map = {\r\n      genesisHash: 'genesis-hash',\r\n      genesisId: 'genesis-id',\r\n      previousBlockHash: 'previous-block-hash',\r\n      round: 'round',\r\n      seed: 'seed',\r\n      timestamp: 'timestamp',\r\n      transactionsRoot: 'transactions-root',\r\n      transactionsRootSha256: 'transactions-root-sha256',\r\n      bonus: 'bonus',\r\n      feesCollected: 'fees-collected',\r\n      participationUpdates: 'participation-updates',\r\n      proposer: 'proposer',\r\n      proposerPayout: 'proposer-payout',\r\n      rewards: 'rewards',\r\n      stateProofTracking: 'state-proof-tracking',\r\n      transactions: 'transactions',\r\n      txnCounter: 'txn-counter',\r\n      upgradeState: 'upgrade-state',\r\n      upgradeVote: 'upgrade-vote',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): Block {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['genesis-hash'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'genesis-hash': ${data}`\r\n      );\r\n    if (typeof data['genesis-id'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'genesis-id': ${data}`\r\n      );\r\n    if (typeof data['previous-block-hash'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'previous-block-hash': ${data}`\r\n      );\r\n    if (typeof data['round'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'round': ${data}`);\r\n    if (typeof data['seed'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'seed': ${data}`);\r\n    if (typeof data['timestamp'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'timestamp': ${data}`\r\n      );\r\n    if (typeof data['transactions-root'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'transactions-root': ${data}`\r\n      );\r\n    if (typeof data['transactions-root-sha256'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'transactions-root-sha256': ${data}`\r\n      );\r\n    return new Block({\r\n      genesisHash: data['genesis-hash'],\r\n      genesisId: data['genesis-id'],\r\n      previousBlockHash: data['previous-block-hash'],\r\n      round: data['round'],\r\n      seed: data['seed'],\r\n      timestamp: data['timestamp'],\r\n      transactionsRoot: data['transactions-root'],\r\n      transactionsRootSha256: data['transactions-root-sha256'],\r\n      bonus: data['bonus'],\r\n      feesCollected: data['fees-collected'],\r\n      participationUpdates:\r\n        typeof data['participation-updates'] !== 'undefined'\r\n          ? ParticipationUpdates.from_obj_for_encoding(\r\n              data['participation-updates']\r\n            )\r\n          : undefined,\r\n      proposer: data['proposer'],\r\n      proposerPayout: data['proposer-payout'],\r\n      rewards:\r\n        typeof data['rewards'] !== 'undefined'\r\n          ? BlockRewards.from_obj_for_encoding(data['rewards'])\r\n          : undefined,\r\n      stateProofTracking:\r\n        typeof data['state-proof-tracking'] !== 'undefined'\r\n          ? data['state-proof-tracking'].map(\r\n              StateProofTracking.from_obj_for_encoding\r\n            )\r\n          : undefined,\r\n      transactions:\r\n        typeof data['transactions'] !== 'undefined'\r\n          ? data['transactions'].map(Transaction.from_obj_for_encoding)\r\n          : undefined,\r\n      txnCounter: data['txn-counter'],\r\n      upgradeState:\r\n        typeof data['upgrade-state'] !== 'undefined'\r\n          ? BlockUpgradeState.from_obj_for_encoding(data['upgrade-state'])\r\n          : undefined,\r\n      upgradeVote:\r\n        typeof data['upgrade-vote'] !== 'undefined'\r\n          ? BlockUpgradeVote.from_obj_for_encoding(data['upgrade-vote'])\r\n          : undefined,\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport class BlockHeadersResponse extends BaseModel {\r\n  public blocks?: Block[];\r\n\r\n  /**\r\n   * Round at which the results were computed.\r\n   */\r\n  public currentRound?: number | bigint;\r\n\r\n  /**\r\n   * Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\r\n  public nextToken?: string;\r\n\r\n  /**\r\n   * Creates a new `BlockHeadersResponse` object.\r\n   * @param blocks -\r\n   * @param currentRound - Round at which the results were computed.\r\n   * @param nextToken - Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\r\n  constructor({\r\n    blocks,\r\n    currentRound,\r\n    nextToken,\r\n  }: {\r\n    blocks?: Block[];\r\n    currentRound?: number | bigint;\r\n    nextToken?: string;\r\n  }) {\r\n    super();\r\n    this.blocks = blocks;\r\n    this.currentRound = currentRound;\r\n    this.nextToken = nextToken;\r\n\r\n    this.attribute_map = {\r\n      blocks: 'blocks',\r\n      currentRound: 'current-round',\r\n      nextToken: 'next-token',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): BlockHeadersResponse {\r\n    /* eslint-disable dot-notation */\r\n    return new BlockHeadersResponse({\r\n      blocks:\r\n        typeof data['blocks'] !== 'undefined'\r\n          ? data['blocks'].map(Block.from_obj_for_encoding)\r\n          : undefined,\r\n      currentRound: data['current-round'],\r\n      nextToken: data['next-token'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Fields relating to rewards,\r\n */\r\nexport class BlockRewards extends BaseModel {\r\n  /**\r\n   * (fees) accepts transaction fees, it can only spend to the incentive pool.\r\n   */\r\n  public feeSink: string;\r\n\r\n  /**\r\n   * (rwcalr) number of leftover MicroAlgos after the distribution of rewards-rate\r\n   * MicroAlgos for every reward unit in the next round.\r\n   */\r\n  public rewardsCalculationRound: number | bigint;\r\n\r\n  /**\r\n   * (earn) How many rewards, in MicroAlgos, have been distributed to each RewardUnit\r\n   * of MicroAlgos since genesis.\r\n   */\r\n  public rewardsLevel: number | bigint;\r\n\r\n  /**\r\n   * (rwd) accepts periodic injections from the fee-sink and continually\r\n   * redistributes them as rewards.\r\n   */\r\n  public rewardsPool: string;\r\n\r\n  /**\r\n   * (rate) Number of new MicroAlgos added to the participation stake from rewards at\r\n   * the next round.\r\n   */\r\n  public rewardsRate: number | bigint;\r\n\r\n  /**\r\n   * (frac) Number of leftover MicroAlgos after the distribution of\r\n   * RewardsRate/rewardUnits MicroAlgos for every reward unit in the next round.\r\n   */\r\n  public rewardsResidue: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `BlockRewards` object.\r\n   * @param feeSink - (fees) accepts transaction fees, it can only spend to the incentive pool.\r\n   * @param rewardsCalculationRound - (rwcalr) number of leftover MicroAlgos after the distribution of rewards-rate\r\n   * MicroAlgos for every reward unit in the next round.\r\n   * @param rewardsLevel - (earn) How many rewards, in MicroAlgos, have been distributed to each RewardUnit\r\n   * of MicroAlgos since genesis.\r\n   * @param rewardsPool - (rwd) accepts periodic injections from the fee-sink and continually\r\n   * redistributes them as rewards.\r\n   * @param rewardsRate - (rate) Number of new MicroAlgos added to the participation stake from rewards at\r\n   * the next round.\r\n   * @param rewardsResidue - (frac) Number of leftover MicroAlgos after the distribution of\r\n   * RewardsRate/rewardUnits MicroAlgos for every reward unit in the next round.\r\n   */\r\n  constructor({\r\n    feeSink,\r\n    rewardsCalculationRound,\r\n    rewardsLevel,\r\n    rewardsPool,\r\n    rewardsRate,\r\n    rewardsResidue,\r\n  }: {\r\n    feeSink: string;\r\n    rewardsCalculationRound: number | bigint;\r\n    rewardsLevel: number | bigint;\r\n    rewardsPool: string;\r\n    rewardsRate: number | bigint;\r\n    rewardsResidue: number | bigint;\r\n  }) {\r\n    super();\r\n    this.feeSink = feeSink;\r\n    this.rewardsCalculationRound = rewardsCalculationRound;\r\n    this.rewardsLevel = rewardsLevel;\r\n    this.rewardsPool = rewardsPool;\r\n    this.rewardsRate = rewardsRate;\r\n    this.rewardsResidue = rewardsResidue;\r\n\r\n    this.attribute_map = {\r\n      feeSink: 'fee-sink',\r\n      rewardsCalculationRound: 'rewards-calculation-round',\r\n      rewardsLevel: 'rewards-level',\r\n      rewardsPool: 'rewards-pool',\r\n      rewardsRate: 'rewards-rate',\r\n      rewardsResidue: 'rewards-residue',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): BlockRewards {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['fee-sink'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'fee-sink': ${data}`);\r\n    if (typeof data['rewards-calculation-round'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'rewards-calculation-round': ${data}`\r\n      );\r\n    if (typeof data['rewards-level'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'rewards-level': ${data}`\r\n      );\r\n    if (typeof data['rewards-pool'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'rewards-pool': ${data}`\r\n      );\r\n    if (typeof data['rewards-rate'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'rewards-rate': ${data}`\r\n      );\r\n    if (typeof data['rewards-residue'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'rewards-residue': ${data}`\r\n      );\r\n    return new BlockRewards({\r\n      feeSink: data['fee-sink'],\r\n      rewardsCalculationRound: data['rewards-calculation-round'],\r\n      rewardsLevel: data['rewards-level'],\r\n      rewardsPool: data['rewards-pool'],\r\n      rewardsRate: data['rewards-rate'],\r\n      rewardsResidue: data['rewards-residue'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Fields relating to a protocol upgrade.\r\n */\r\nexport class BlockUpgradeState extends BaseModel {\r\n  /**\r\n   * (proto) The current protocol version.\r\n   */\r\n  public currentProtocol: string;\r\n\r\n  /**\r\n   * (nextproto) The next proposed protocol version.\r\n   */\r\n  public nextProtocol?: string;\r\n\r\n  /**\r\n   * (nextyes) Number of blocks which approved the protocol upgrade.\r\n   */\r\n  public nextProtocolApprovals?: number | bigint;\r\n\r\n  /**\r\n   * (nextswitch) Round on which the protocol upgrade will take effect.\r\n   */\r\n  public nextProtocolSwitchOn?: number | bigint;\r\n\r\n  /**\r\n   * (nextbefore) Deadline round for this protocol upgrade (No votes will be consider\r\n   * after this round).\r\n   */\r\n  public nextProtocolVoteBefore?: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `BlockUpgradeState` object.\r\n   * @param currentProtocol - (proto) The current protocol version.\r\n   * @param nextProtocol - (nextproto) The next proposed protocol version.\r\n   * @param nextProtocolApprovals - (nextyes) Number of blocks which approved the protocol upgrade.\r\n   * @param nextProtocolSwitchOn - (nextswitch) Round on which the protocol upgrade will take effect.\r\n   * @param nextProtocolVoteBefore - (nextbefore) Deadline round for this protocol upgrade (No votes will be consider\r\n   * after this round).\r\n   */\r\n  constructor({\r\n    currentProtocol,\r\n    nextProtocol,\r\n    nextProtocolApprovals,\r\n    nextProtocolSwitchOn,\r\n    nextProtocolVoteBefore,\r\n  }: {\r\n    currentProtocol: string;\r\n    nextProtocol?: string;\r\n    nextProtocolApprovals?: number | bigint;\r\n    nextProtocolSwitchOn?: number | bigint;\r\n    nextProtocolVoteBefore?: number | bigint;\r\n  }) {\r\n    super();\r\n    this.currentProtocol = currentProtocol;\r\n    this.nextProtocol = nextProtocol;\r\n    this.nextProtocolApprovals = nextProtocolApprovals;\r\n    this.nextProtocolSwitchOn = nextProtocolSwitchOn;\r\n    this.nextProtocolVoteBefore = nextProtocolVoteBefore;\r\n\r\n    this.attribute_map = {\r\n      currentProtocol: 'current-protocol',\r\n      nextProtocol: 'next-protocol',\r\n      nextProtocolApprovals: 'next-protocol-approvals',\r\n      nextProtocolSwitchOn: 'next-protocol-switch-on',\r\n      nextProtocolVoteBefore: 'next-protocol-vote-before',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): BlockUpgradeState {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['current-protocol'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'current-protocol': ${data}`\r\n      );\r\n    return new BlockUpgradeState({\r\n      currentProtocol: data['current-protocol'],\r\n      nextProtocol: data['next-protocol'],\r\n      nextProtocolApprovals: data['next-protocol-approvals'],\r\n      nextProtocolSwitchOn: data['next-protocol-switch-on'],\r\n      nextProtocolVoteBefore: data['next-protocol-vote-before'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Fields relating to voting for a protocol upgrade.\r\n */\r\nexport class BlockUpgradeVote extends BaseModel {\r\n  /**\r\n   * (upgradeyes) Indicates a yes vote for the current proposal.\r\n   */\r\n  public upgradeApprove?: boolean;\r\n\r\n  /**\r\n   * (upgradedelay) Indicates the time between acceptance and execution.\r\n   */\r\n  public upgradeDelay?: number | bigint;\r\n\r\n  /**\r\n   * (upgradeprop) Indicates a proposed upgrade.\r\n   */\r\n  public upgradePropose?: string;\r\n\r\n  /**\r\n   * Creates a new `BlockUpgradeVote` object.\r\n   * @param upgradeApprove - (upgradeyes) Indicates a yes vote for the current proposal.\r\n   * @param upgradeDelay - (upgradedelay) Indicates the time between acceptance and execution.\r\n   * @param upgradePropose - (upgradeprop) Indicates a proposed upgrade.\r\n   */\r\n  constructor({\r\n    upgradeApprove,\r\n    upgradeDelay,\r\n    upgradePropose,\r\n  }: {\r\n    upgradeApprove?: boolean;\r\n    upgradeDelay?: number | bigint;\r\n    upgradePropose?: string;\r\n  }) {\r\n    super();\r\n    this.upgradeApprove = upgradeApprove;\r\n    this.upgradeDelay = upgradeDelay;\r\n    this.upgradePropose = upgradePropose;\r\n\r\n    this.attribute_map = {\r\n      upgradeApprove: 'upgrade-approve',\r\n      upgradeDelay: 'upgrade-delay',\r\n      upgradePropose: 'upgrade-propose',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): BlockUpgradeVote {\r\n    /* eslint-disable dot-notation */\r\n    return new BlockUpgradeVote({\r\n      upgradeApprove: data['upgrade-approve'],\r\n      upgradeDelay: data['upgrade-delay'],\r\n      upgradePropose: data['upgrade-propose'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Box name and its content.\r\n */\r\nexport class Box extends BaseModel {\r\n  /**\r\n   * (name) box name, base64 encoded\r\n   */\r\n  public name: Uint8Array;\r\n\r\n  /**\r\n   * The round for which this information is relevant\r\n   */\r\n  public round: number | bigint;\r\n\r\n  /**\r\n   * (value) box value, base64 encoded.\r\n   */\r\n  public value: Uint8Array;\r\n\r\n  /**\r\n   * Creates a new `Box` object.\r\n   * @param name - (name) box name, base64 encoded\r\n   * @param round - The round for which this information is relevant\r\n   * @param value - (value) box value, base64 encoded.\r\n   */\r\n  constructor({\r\n    name,\r\n    round,\r\n    value,\r\n  }: {\r\n    name: string | Uint8Array;\r\n    round: number | bigint;\r\n    value: string | Uint8Array;\r\n  }) {\r\n    super();\r\n    this.name =\r\n      typeof name === 'string'\r\n        ? new Uint8Array(Buffer.from(name, 'base64'))\r\n        : name;\r\n    this.round = round;\r\n    this.value =\r\n      typeof value === 'string'\r\n        ? new Uint8Array(Buffer.from(value, 'base64'))\r\n        : value;\r\n\r\n    this.attribute_map = {\r\n      name: 'name',\r\n      round: 'round',\r\n      value: 'value',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): Box {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['name'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'name': ${data}`);\r\n    if (typeof data['round'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'round': ${data}`);\r\n    if (typeof data['value'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'value': ${data}`);\r\n    return new Box({\r\n      name: data['name'],\r\n      round: data['round'],\r\n      value: data['value'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Box descriptor describes an app box without a value.\r\n */\r\nexport class BoxDescriptor extends BaseModel {\r\n  /**\r\n   * Base64 encoded box name\r\n   */\r\n  public name: Uint8Array;\r\n\r\n  /**\r\n   * Creates a new `BoxDescriptor` object.\r\n   * @param name - Base64 encoded box name\r\n   */\r\n  constructor({ name }: { name: string | Uint8Array }) {\r\n    super();\r\n    this.name =\r\n      typeof name === 'string'\r\n        ? new Uint8Array(Buffer.from(name, 'base64'))\r\n        : name;\r\n\r\n    this.attribute_map = {\r\n      name: 'name',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): BoxDescriptor {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['name'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'name': ${data}`);\r\n    return new BoxDescriptor({\r\n      name: data['name'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Box names of an application\r\n */\r\nexport class BoxesResponse extends BaseModel {\r\n  /**\r\n   * (appidx) application index.\r\n   */\r\n  public applicationId: number | bigint;\r\n\r\n  public boxes: BoxDescriptor[];\r\n\r\n  /**\r\n   * Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\r\n  public nextToken?: string;\r\n\r\n  /**\r\n   * Creates a new `BoxesResponse` object.\r\n   * @param applicationId - (appidx) application index.\r\n   * @param boxes -\r\n   * @param nextToken - Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\r\n  constructor({\r\n    applicationId,\r\n    boxes,\r\n    nextToken,\r\n  }: {\r\n    applicationId: number | bigint;\r\n    boxes: BoxDescriptor[];\r\n    nextToken?: string;\r\n  }) {\r\n    super();\r\n    this.applicationId = applicationId;\r\n    this.boxes = boxes;\r\n    this.nextToken = nextToken;\r\n\r\n    this.attribute_map = {\r\n      applicationId: 'application-id',\r\n      boxes: 'boxes',\r\n      nextToken: 'next-token',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): BoxesResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['application-id'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'application-id': ${data}`\r\n      );\r\n    if (!Array.isArray(data['boxes']))\r\n      throw new Error(\r\n        `Response is missing required array field 'boxes': ${data}`\r\n      );\r\n    return new BoxesResponse({\r\n      applicationId: data['application-id'],\r\n      boxes: data['boxes'].map(BoxDescriptor.from_obj_for_encoding),\r\n      nextToken: data['next-token'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Response for errors\r\n */\r\nexport class ErrorResponse extends BaseModel {\r\n  public message: string;\r\n\r\n  public data?: Record<string, any>;\r\n\r\n  /**\r\n   * Creates a new `ErrorResponse` object.\r\n   * @param message -\r\n   * @param data -\r\n   */\r\n  constructor({\r\n    message,\r\n    data,\r\n  }: {\r\n    message: string;\r\n    data?: Record<string, any>;\r\n  }) {\r\n    super();\r\n    this.message = message;\r\n    this.data = data;\r\n\r\n    this.attribute_map = {\r\n      message: 'message',\r\n      data: 'data',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): ErrorResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['message'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'message': ${data}`);\r\n    return new ErrorResponse({\r\n      message: data['message'],\r\n      data: data['data'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Represents a TEAL value delta.\r\n */\r\nexport class EvalDelta extends BaseModel {\r\n  /**\r\n   * (at) delta action.\r\n   */\r\n  public action: number | bigint;\r\n\r\n  /**\r\n   * (bs) bytes value.\r\n   */\r\n  public bytes?: string;\r\n\r\n  /**\r\n   * (ui) uint value.\r\n   */\r\n  public uint?: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `EvalDelta` object.\r\n   * @param action - (at) delta action.\r\n   * @param bytes - (bs) bytes value.\r\n   * @param uint - (ui) uint value.\r\n   */\r\n  constructor({\r\n    action,\r\n    bytes,\r\n    uint,\r\n  }: {\r\n    action: number | bigint;\r\n    bytes?: string;\r\n    uint?: number | bigint;\r\n  }) {\r\n    super();\r\n    this.action = action;\r\n    this.bytes = bytes;\r\n    this.uint = uint;\r\n\r\n    this.attribute_map = {\r\n      action: 'action',\r\n      bytes: 'bytes',\r\n      uint: 'uint',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): EvalDelta {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['action'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'action': ${data}`);\r\n    return new EvalDelta({\r\n      action: data['action'],\r\n      bytes: data['bytes'],\r\n      uint: data['uint'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Key-value pairs for StateDelta.\r\n */\r\nexport class EvalDeltaKeyValue extends BaseModel {\r\n  public key: string;\r\n\r\n  /**\r\n   * Represents a TEAL value delta.\r\n   */\r\n  public value: EvalDelta;\r\n\r\n  /**\r\n   * Creates a new `EvalDeltaKeyValue` object.\r\n   * @param key -\r\n   * @param value - Represents a TEAL value delta.\r\n   */\r\n  constructor({ key, value }: { key: string; value: EvalDelta }) {\r\n    super();\r\n    this.key = key;\r\n    this.value = value;\r\n\r\n    this.attribute_map = {\r\n      key: 'key',\r\n      value: 'value',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): EvalDeltaKeyValue {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['key'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'key': ${data}`);\r\n    if (typeof data['value'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'value': ${data}`);\r\n    return new EvalDeltaKeyValue({\r\n      key: data['key'],\r\n      value: EvalDelta.from_obj_for_encoding(data['value']),\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\nexport class HashFactory extends BaseModel {\r\n  /**\r\n   * (t)\r\n   */\r\n  public hashType?: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `HashFactory` object.\r\n   * @param hashType - (t)\r\n   */\r\n  constructor({ hashType }: { hashType?: number | bigint }) {\r\n    super();\r\n    this.hashType = hashType;\r\n\r\n    this.attribute_map = {\r\n      hashType: 'hash-type',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): HashFactory {\r\n    /* eslint-disable dot-notation */\r\n    return new HashFactory({\r\n      hashType: data['hash-type'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * (hbprf) HbProof is a signature using HeartbeatAddress's partkey, thereby showing\r\n * it is online.\r\n */\r\nexport class HbProofFields extends BaseModel {\r\n  /**\r\n   * (p) Public key of the heartbeat message.\r\n   */\r\n  public hbPk?: Uint8Array;\r\n\r\n  /**\r\n   * (p1s) Signature of OneTimeSignatureSubkeyOffsetID(PK, Batch, Offset) under the\r\n   * key PK2.\r\n   */\r\n  public hbPk1sig?: Uint8Array;\r\n\r\n  /**\r\n   * (p2) Key for new-style two-level ephemeral signature.\r\n   */\r\n  public hbPk2?: Uint8Array;\r\n\r\n  /**\r\n   * (p2s) Signature of OneTimeSignatureSubkeyBatchID(PK2, Batch) under the master\r\n   * key (OneTimeSignatureVerifier).\r\n   */\r\n  public hbPk2sig?: Uint8Array;\r\n\r\n  /**\r\n   * (s) Signature of the heartbeat message.\r\n   */\r\n  public hbSig?: Uint8Array;\r\n\r\n  /**\r\n   * Creates a new `HbProofFields` object.\r\n   * @param hbPk - (p) Public key of the heartbeat message.\r\n   * @param hbPk1sig - (p1s) Signature of OneTimeSignatureSubkeyOffsetID(PK, Batch, Offset) under the\r\n   * key PK2.\r\n   * @param hbPk2 - (p2) Key for new-style two-level ephemeral signature.\r\n   * @param hbPk2sig - (p2s) Signature of OneTimeSignatureSubkeyBatchID(PK2, Batch) under the master\r\n   * key (OneTimeSignatureVerifier).\r\n   * @param hbSig - (s) Signature of the heartbeat message.\r\n   */\r\n  constructor({\r\n    hbPk,\r\n    hbPk1sig,\r\n    hbPk2,\r\n    hbPk2sig,\r\n    hbSig,\r\n  }: {\r\n    hbPk?: string | Uint8Array;\r\n    hbPk1sig?: string | Uint8Array;\r\n    hbPk2?: string | Uint8Array;\r\n    hbPk2sig?: string | Uint8Array;\r\n    hbSig?: string | Uint8Array;\r\n  }) {\r\n    super();\r\n    this.hbPk =\r\n      typeof hbPk === 'string'\r\n        ? new Uint8Array(Buffer.from(hbPk, 'base64'))\r\n        : hbPk;\r\n    this.hbPk1sig =\r\n      typeof hbPk1sig === 'string'\r\n        ? new Uint8Array(Buffer.from(hbPk1sig, 'base64'))\r\n        : hbPk1sig;\r\n    this.hbPk2 =\r\n      typeof hbPk2 === 'string'\r\n        ? new Uint8Array(Buffer.from(hbPk2, 'base64'))\r\n        : hbPk2;\r\n    this.hbPk2sig =\r\n      typeof hbPk2sig === 'string'\r\n        ? new Uint8Array(Buffer.from(hbPk2sig, 'base64'))\r\n        : hbPk2sig;\r\n    this.hbSig =\r\n      typeof hbSig === 'string'\r\n        ? new Uint8Array(Buffer.from(hbSig, 'base64'))\r\n        : hbSig;\r\n\r\n    this.attribute_map = {\r\n      hbPk: 'hb-pk',\r\n      hbPk1sig: 'hb-pk1sig',\r\n      hbPk2: 'hb-pk2',\r\n      hbPk2sig: 'hb-pk2sig',\r\n      hbSig: 'hb-sig',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): HbProofFields {\r\n    /* eslint-disable dot-notation */\r\n    return new HbProofFields({\r\n      hbPk: data['hb-pk'],\r\n      hbPk1sig: data['hb-pk1sig'],\r\n      hbPk2: data['hb-pk2'],\r\n      hbPk2sig: data['hb-pk2sig'],\r\n      hbSig: data['hb-sig'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * A health check response.\r\n */\r\nexport class HealthCheck extends BaseModel {\r\n  public dbAvailable: boolean;\r\n\r\n  public isMigrating: boolean;\r\n\r\n  public message: string;\r\n\r\n  public round: number | bigint;\r\n\r\n  /**\r\n   * Current version.\r\n   */\r\n  public version: string;\r\n\r\n  public data?: Record<string, any>;\r\n\r\n  public errors?: string[];\r\n\r\n  /**\r\n   * Creates a new `HealthCheck` object.\r\n   * @param dbAvailable -\r\n   * @param isMigrating -\r\n   * @param message -\r\n   * @param round -\r\n   * @param version - Current version.\r\n   * @param data -\r\n   * @param errors -\r\n   */\r\n  constructor({\r\n    dbAvailable,\r\n    isMigrating,\r\n    message,\r\n    round,\r\n    version,\r\n    data,\r\n    errors,\r\n  }: {\r\n    dbAvailable: boolean;\r\n    isMigrating: boolean;\r\n    message: string;\r\n    round: number | bigint;\r\n    version: string;\r\n    data?: Record<string, any>;\r\n    errors?: string[];\r\n  }) {\r\n    super();\r\n    this.dbAvailable = dbAvailable;\r\n    this.isMigrating = isMigrating;\r\n    this.message = message;\r\n    this.round = round;\r\n    this.version = version;\r\n    this.data = data;\r\n    this.errors = errors;\r\n\r\n    this.attribute_map = {\r\n      dbAvailable: 'db-available',\r\n      isMigrating: 'is-migrating',\r\n      message: 'message',\r\n      round: 'round',\r\n      version: 'version',\r\n      data: 'data',\r\n      errors: 'errors',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): HealthCheck {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['db-available'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'db-available': ${data}`\r\n      );\r\n    if (typeof data['is-migrating'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'is-migrating': ${data}`\r\n      );\r\n    if (typeof data['message'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'message': ${data}`);\r\n    if (typeof data['round'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'round': ${data}`);\r\n    if (typeof data['version'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'version': ${data}`);\r\n    return new HealthCheck({\r\n      dbAvailable: data['db-available'],\r\n      isMigrating: data['is-migrating'],\r\n      message: data['message'],\r\n      round: data['round'],\r\n      version: data['version'],\r\n      data: data['data'],\r\n      errors: data['errors'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\nexport class IndexerStateProofMessage extends BaseModel {\r\n  /**\r\n   * (b)\r\n   */\r\n  public blockHeadersCommitment?: Uint8Array;\r\n\r\n  /**\r\n   * (f)\r\n   */\r\n  public firstAttestedRound?: number | bigint;\r\n\r\n  /**\r\n   * (l)\r\n   */\r\n  public latestAttestedRound?: number | bigint;\r\n\r\n  /**\r\n   * (P)\r\n   */\r\n  public lnProvenWeight?: number | bigint;\r\n\r\n  /**\r\n   * (v)\r\n   */\r\n  public votersCommitment?: Uint8Array;\r\n\r\n  /**\r\n   * Creates a new `IndexerStateProofMessage` object.\r\n   * @param blockHeadersCommitment - (b)\r\n   * @param firstAttestedRound - (f)\r\n   * @param latestAttestedRound - (l)\r\n   * @param lnProvenWeight - (P)\r\n   * @param votersCommitment - (v)\r\n   */\r\n  constructor({\r\n    blockHeadersCommitment,\r\n    firstAttestedRound,\r\n    latestAttestedRound,\r\n    lnProvenWeight,\r\n    votersCommitment,\r\n  }: {\r\n    blockHeadersCommitment?: string | Uint8Array;\r\n    firstAttestedRound?: number | bigint;\r\n    latestAttestedRound?: number | bigint;\r\n    lnProvenWeight?: number | bigint;\r\n    votersCommitment?: string | Uint8Array;\r\n  }) {\r\n    super();\r\n    this.blockHeadersCommitment =\r\n      typeof blockHeadersCommitment === 'string'\r\n        ? new Uint8Array(Buffer.from(blockHeadersCommitment, 'base64'))\r\n        : blockHeadersCommitment;\r\n    this.firstAttestedRound = firstAttestedRound;\r\n    this.latestAttestedRound = latestAttestedRound;\r\n    this.lnProvenWeight = lnProvenWeight;\r\n    this.votersCommitment =\r\n      typeof votersCommitment === 'string'\r\n        ? new Uint8Array(Buffer.from(votersCommitment, 'base64'))\r\n        : votersCommitment;\r\n\r\n    this.attribute_map = {\r\n      blockHeadersCommitment: 'block-headers-commitment',\r\n      firstAttestedRound: 'first-attested-round',\r\n      latestAttestedRound: 'latest-attested-round',\r\n      lnProvenWeight: 'ln-proven-weight',\r\n      votersCommitment: 'voters-commitment',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): IndexerStateProofMessage {\r\n    /* eslint-disable dot-notation */\r\n    return new IndexerStateProofMessage({\r\n      blockHeadersCommitment: data['block-headers-commitment'],\r\n      firstAttestedRound: data['first-attested-round'],\r\n      latestAttestedRound: data['latest-attested-round'],\r\n      lnProvenWeight: data['ln-proven-weight'],\r\n      votersCommitment: data['voters-commitment'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\nexport class MerkleArrayProof extends BaseModel {\r\n  public hashFactory?: HashFactory;\r\n\r\n  /**\r\n   * (pth)\r\n   */\r\n  public path?: Uint8Array[];\r\n\r\n  /**\r\n   * (td)\r\n   */\r\n  public treeDepth?: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `MerkleArrayProof` object.\r\n   * @param hashFactory -\r\n   * @param path - (pth)\r\n   * @param treeDepth - (td)\r\n   */\r\n  constructor({\r\n    hashFactory,\r\n    path,\r\n    treeDepth,\r\n  }: {\r\n    hashFactory?: HashFactory;\r\n    path?: Uint8Array[];\r\n    treeDepth?: number | bigint;\r\n  }) {\r\n    super();\r\n    this.hashFactory = hashFactory;\r\n    this.path = path;\r\n    this.treeDepth = treeDepth;\r\n\r\n    this.attribute_map = {\r\n      hashFactory: 'hash-factory',\r\n      path: 'path',\r\n      treeDepth: 'tree-depth',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): MerkleArrayProof {\r\n    /* eslint-disable dot-notation */\r\n    return new MerkleArrayProof({\r\n      hashFactory:\r\n        typeof data['hash-factory'] !== 'undefined'\r\n          ? HashFactory.from_obj_for_encoding(data['hash-factory'])\r\n          : undefined,\r\n      path: data['path'],\r\n      treeDepth: data['tree-depth'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * A simplified version of AssetHolding\r\n */\r\nexport class MiniAssetHolding extends BaseModel {\r\n  public address: string;\r\n\r\n  public amount: number | bigint;\r\n\r\n  public isFrozen: boolean;\r\n\r\n  /**\r\n   * Whether or not this asset holding is currently deleted from its account.\r\n   */\r\n  public deleted?: boolean;\r\n\r\n  /**\r\n   * Round during which the account opted into the asset.\r\n   */\r\n  public optedInAtRound?: number | bigint;\r\n\r\n  /**\r\n   * Round during which the account opted out of the asset.\r\n   */\r\n  public optedOutAtRound?: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `MiniAssetHolding` object.\r\n   * @param address -\r\n   * @param amount -\r\n   * @param isFrozen -\r\n   * @param deleted - Whether or not this asset holding is currently deleted from its account.\r\n   * @param optedInAtRound - Round during which the account opted into the asset.\r\n   * @param optedOutAtRound - Round during which the account opted out of the asset.\r\n   */\r\n  constructor({\r\n    address,\r\n    amount,\r\n    isFrozen,\r\n    deleted,\r\n    optedInAtRound,\r\n    optedOutAtRound,\r\n  }: {\r\n    address: string;\r\n    amount: number | bigint;\r\n    isFrozen: boolean;\r\n    deleted?: boolean;\r\n    optedInAtRound?: number | bigint;\r\n    optedOutAtRound?: number | bigint;\r\n  }) {\r\n    super();\r\n    this.address = address;\r\n    this.amount = amount;\r\n    this.isFrozen = isFrozen;\r\n    this.deleted = deleted;\r\n    this.optedInAtRound = optedInAtRound;\r\n    this.optedOutAtRound = optedOutAtRound;\r\n\r\n    this.attribute_map = {\r\n      address: 'address',\r\n      amount: 'amount',\r\n      isFrozen: 'is-frozen',\r\n      deleted: 'deleted',\r\n      optedInAtRound: 'opted-in-at-round',\r\n      optedOutAtRound: 'opted-out-at-round',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): MiniAssetHolding {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['address'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'address': ${data}`);\r\n    if (typeof data['amount'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'amount': ${data}`);\r\n    if (typeof data['is-frozen'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'is-frozen': ${data}`\r\n      );\r\n    return new MiniAssetHolding({\r\n      address: data['address'],\r\n      amount: data['amount'],\r\n      isFrozen: data['is-frozen'],\r\n      deleted: data['deleted'],\r\n      optedInAtRound: data['opted-in-at-round'],\r\n      optedOutAtRound: data['opted-out-at-round'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Participation account data that needs to be checked/acted on by the network.\r\n */\r\nexport class ParticipationUpdates extends BaseModel {\r\n  /**\r\n   * (partupabs) a list of online accounts that need to be suspended.\r\n   */\r\n  public absentParticipationAccounts?: string[];\r\n\r\n  /**\r\n   * (partupdrmv) a list of online accounts that needs to be converted to offline\r\n   * since their participation key expired.\r\n   */\r\n  public expiredParticipationAccounts?: string[];\r\n\r\n  /**\r\n   * Creates a new `ParticipationUpdates` object.\r\n   * @param absentParticipationAccounts - (partupabs) a list of online accounts that need to be suspended.\r\n   * @param expiredParticipationAccounts - (partupdrmv) a list of online accounts that needs to be converted to offline\r\n   * since their participation key expired.\r\n   */\r\n  constructor({\r\n    absentParticipationAccounts,\r\n    expiredParticipationAccounts,\r\n  }: {\r\n    absentParticipationAccounts?: string[];\r\n    expiredParticipationAccounts?: string[];\r\n  }) {\r\n    super();\r\n    this.absentParticipationAccounts = absentParticipationAccounts;\r\n    this.expiredParticipationAccounts = expiredParticipationAccounts;\r\n\r\n    this.attribute_map = {\r\n      absentParticipationAccounts: 'absent-participation-accounts',\r\n      expiredParticipationAccounts: 'expired-participation-accounts',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): ParticipationUpdates {\r\n    /* eslint-disable dot-notation */\r\n    return new ParticipationUpdates({\r\n      absentParticipationAccounts: data['absent-participation-accounts'],\r\n      expiredParticipationAccounts: data['expired-participation-accounts'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * (sp) represents a state proof.\r\n * Definition:\r\n * crypto/stateproof/structs.go : StateProof\r\n */\r\nexport class StateProofFields extends BaseModel {\r\n  /**\r\n   * (P)\r\n   */\r\n  public partProofs?: MerkleArrayProof;\r\n\r\n  /**\r\n   * (pr) Sequence of reveal positions.\r\n   */\r\n  public positionsToReveal?: (number | bigint)[];\r\n\r\n  /**\r\n   * (r) Note that this is actually stored as a map[uint64] - Reveal in the actual\r\n   * msgp\r\n   */\r\n  public reveals?: StateProofReveal[];\r\n\r\n  /**\r\n   * (v) Salt version of the merkle signature.\r\n   */\r\n  public saltVersion?: number | bigint;\r\n\r\n  /**\r\n   * (c)\r\n   */\r\n  public sigCommit?: Uint8Array;\r\n\r\n  /**\r\n   * (S)\r\n   */\r\n  public sigProofs?: MerkleArrayProof;\r\n\r\n  /**\r\n   * (w)\r\n   */\r\n  public signedWeight?: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `StateProofFields` object.\r\n   * @param partProofs - (P)\r\n   * @param positionsToReveal - (pr) Sequence of reveal positions.\r\n   * @param reveals - (r) Note that this is actually stored as a map[uint64] - Reveal in the actual\r\n   * msgp\r\n   * @param saltVersion - (v) Salt version of the merkle signature.\r\n   * @param sigCommit - (c)\r\n   * @param sigProofs - (S)\r\n   * @param signedWeight - (w)\r\n   */\r\n  constructor({\r\n    partProofs,\r\n    positionsToReveal,\r\n    reveals,\r\n    saltVersion,\r\n    sigCommit,\r\n    sigProofs,\r\n    signedWeight,\r\n  }: {\r\n    partProofs?: MerkleArrayProof;\r\n    positionsToReveal?: (number | bigint)[];\r\n    reveals?: StateProofReveal[];\r\n    saltVersion?: number | bigint;\r\n    sigCommit?: string | Uint8Array;\r\n    sigProofs?: MerkleArrayProof;\r\n    signedWeight?: number | bigint;\r\n  }) {\r\n    super();\r\n    this.partProofs = partProofs;\r\n    this.positionsToReveal = positionsToReveal;\r\n    this.reveals = reveals;\r\n    this.saltVersion = saltVersion;\r\n    this.sigCommit =\r\n      typeof sigCommit === 'string'\r\n        ? new Uint8Array(Buffer.from(sigCommit, 'base64'))\r\n        : sigCommit;\r\n    this.sigProofs = sigProofs;\r\n    this.signedWeight = signedWeight;\r\n\r\n    this.attribute_map = {\r\n      partProofs: 'part-proofs',\r\n      positionsToReveal: 'positions-to-reveal',\r\n      reveals: 'reveals',\r\n      saltVersion: 'salt-version',\r\n      sigCommit: 'sig-commit',\r\n      sigProofs: 'sig-proofs',\r\n      signedWeight: 'signed-weight',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): StateProofFields {\r\n    /* eslint-disable dot-notation */\r\n    return new StateProofFields({\r\n      partProofs:\r\n        typeof data['part-proofs'] !== 'undefined'\r\n          ? MerkleArrayProof.from_obj_for_encoding(data['part-proofs'])\r\n          : undefined,\r\n      positionsToReveal: data['positions-to-reveal'],\r\n      reveals:\r\n        typeof data['reveals'] !== 'undefined'\r\n          ? data['reveals'].map(StateProofReveal.from_obj_for_encoding)\r\n          : undefined,\r\n      saltVersion: data['salt-version'],\r\n      sigCommit: data['sig-commit'],\r\n      sigProofs:\r\n        typeof data['sig-proofs'] !== 'undefined'\r\n          ? MerkleArrayProof.from_obj_for_encoding(data['sig-proofs'])\r\n          : undefined,\r\n      signedWeight: data['signed-weight'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\nexport class StateProofParticipant extends BaseModel {\r\n  /**\r\n   * (p)\r\n   */\r\n  public verifier?: StateProofVerifier;\r\n\r\n  /**\r\n   * (w)\r\n   */\r\n  public weight?: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `StateProofParticipant` object.\r\n   * @param verifier - (p)\r\n   * @param weight - (w)\r\n   */\r\n  constructor({\r\n    verifier,\r\n    weight,\r\n  }: {\r\n    verifier?: StateProofVerifier;\r\n    weight?: number | bigint;\r\n  }) {\r\n    super();\r\n    this.verifier = verifier;\r\n    this.weight = weight;\r\n\r\n    this.attribute_map = {\r\n      verifier: 'verifier',\r\n      weight: 'weight',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): StateProofParticipant {\r\n    /* eslint-disable dot-notation */\r\n    return new StateProofParticipant({\r\n      verifier:\r\n        typeof data['verifier'] !== 'undefined'\r\n          ? StateProofVerifier.from_obj_for_encoding(data['verifier'])\r\n          : undefined,\r\n      weight: data['weight'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\nexport class StateProofReveal extends BaseModel {\r\n  /**\r\n   * (p)\r\n   */\r\n  public participant?: StateProofParticipant;\r\n\r\n  /**\r\n   * The position in the signature and participants arrays corresponding to this\r\n   * entry.\r\n   */\r\n  public position?: number | bigint;\r\n\r\n  /**\r\n   * (s)\r\n   */\r\n  public sigSlot?: StateProofSigSlot;\r\n\r\n  /**\r\n   * Creates a new `StateProofReveal` object.\r\n   * @param participant - (p)\r\n   * @param position - The position in the signature and participants arrays corresponding to this\r\n   * entry.\r\n   * @param sigSlot - (s)\r\n   */\r\n  constructor({\r\n    participant,\r\n    position,\r\n    sigSlot,\r\n  }: {\r\n    participant?: StateProofParticipant;\r\n    position?: number | bigint;\r\n    sigSlot?: StateProofSigSlot;\r\n  }) {\r\n    super();\r\n    this.participant = participant;\r\n    this.position = position;\r\n    this.sigSlot = sigSlot;\r\n\r\n    this.attribute_map = {\r\n      participant: 'participant',\r\n      position: 'position',\r\n      sigSlot: 'sig-slot',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): StateProofReveal {\r\n    /* eslint-disable dot-notation */\r\n    return new StateProofReveal({\r\n      participant:\r\n        typeof data['participant'] !== 'undefined'\r\n          ? StateProofParticipant.from_obj_for_encoding(data['participant'])\r\n          : undefined,\r\n      position: data['position'],\r\n      sigSlot:\r\n        typeof data['sig-slot'] !== 'undefined'\r\n          ? StateProofSigSlot.from_obj_for_encoding(data['sig-slot'])\r\n          : undefined,\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\nexport class StateProofSigSlot extends BaseModel {\r\n  /**\r\n   * (l) The total weight of signatures in the lower-numbered slots.\r\n   */\r\n  public lowerSigWeight?: number | bigint;\r\n\r\n  public signature?: StateProofSignature;\r\n\r\n  /**\r\n   * Creates a new `StateProofSigSlot` object.\r\n   * @param lowerSigWeight - (l) The total weight of signatures in the lower-numbered slots.\r\n   * @param signature -\r\n   */\r\n  constructor({\r\n    lowerSigWeight,\r\n    signature,\r\n  }: {\r\n    lowerSigWeight?: number | bigint;\r\n    signature?: StateProofSignature;\r\n  }) {\r\n    super();\r\n    this.lowerSigWeight = lowerSigWeight;\r\n    this.signature = signature;\r\n\r\n    this.attribute_map = {\r\n      lowerSigWeight: 'lower-sig-weight',\r\n      signature: 'signature',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): StateProofSigSlot {\r\n    /* eslint-disable dot-notation */\r\n    return new StateProofSigSlot({\r\n      lowerSigWeight: data['lower-sig-weight'],\r\n      signature:\r\n        typeof data['signature'] !== 'undefined'\r\n          ? StateProofSignature.from_obj_for_encoding(data['signature'])\r\n          : undefined,\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\nexport class StateProofSignature extends BaseModel {\r\n  public falconSignature?: Uint8Array;\r\n\r\n  public merkleArrayIndex?: number | bigint;\r\n\r\n  public proof?: MerkleArrayProof;\r\n\r\n  /**\r\n   * (vkey)\r\n   */\r\n  public verifyingKey?: Uint8Array;\r\n\r\n  /**\r\n   * Creates a new `StateProofSignature` object.\r\n   * @param falconSignature -\r\n   * @param merkleArrayIndex -\r\n   * @param proof -\r\n   * @param verifyingKey - (vkey)\r\n   */\r\n  constructor({\r\n    falconSignature,\r\n    merkleArrayIndex,\r\n    proof,\r\n    verifyingKey,\r\n  }: {\r\n    falconSignature?: string | Uint8Array;\r\n    merkleArrayIndex?: number | bigint;\r\n    proof?: MerkleArrayProof;\r\n    verifyingKey?: string | Uint8Array;\r\n  }) {\r\n    super();\r\n    this.falconSignature =\r\n      typeof falconSignature === 'string'\r\n        ? new Uint8Array(Buffer.from(falconSignature, 'base64'))\r\n        : falconSignature;\r\n    this.merkleArrayIndex = merkleArrayIndex;\r\n    this.proof = proof;\r\n    this.verifyingKey =\r\n      typeof verifyingKey === 'string'\r\n        ? new Uint8Array(Buffer.from(verifyingKey, 'base64'))\r\n        : verifyingKey;\r\n\r\n    this.attribute_map = {\r\n      falconSignature: 'falcon-signature',\r\n      merkleArrayIndex: 'merkle-array-index',\r\n      proof: 'proof',\r\n      verifyingKey: 'verifying-key',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): StateProofSignature {\r\n    /* eslint-disable dot-notation */\r\n    return new StateProofSignature({\r\n      falconSignature: data['falcon-signature'],\r\n      merkleArrayIndex: data['merkle-array-index'],\r\n      proof:\r\n        typeof data['proof'] !== 'undefined'\r\n          ? MerkleArrayProof.from_obj_for_encoding(data['proof'])\r\n          : undefined,\r\n      verifyingKey: data['verifying-key'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\nexport class StateProofTracking extends BaseModel {\r\n  /**\r\n   * (n) Next round for which we will accept a state proof transaction.\r\n   */\r\n  public nextRound?: number | bigint;\r\n\r\n  /**\r\n   * (t) The total number of microalgos held by the online accounts during the\r\n   * StateProof round.\r\n   */\r\n  public onlineTotalWeight?: number | bigint;\r\n\r\n  /**\r\n   * State Proof Type. Note the raw object uses map with this as key.\r\n   */\r\n  public type?: number | bigint;\r\n\r\n  /**\r\n   * (v) Root of a vector commitment containing online accounts that will help sign\r\n   * the proof.\r\n   */\r\n  public votersCommitment?: Uint8Array;\r\n\r\n  /**\r\n   * Creates a new `StateProofTracking` object.\r\n   * @param nextRound - (n) Next round for which we will accept a state proof transaction.\r\n   * @param onlineTotalWeight - (t) The total number of microalgos held by the online accounts during the\r\n   * StateProof round.\r\n   * @param type - State Proof Type. Note the raw object uses map with this as key.\r\n   * @param votersCommitment - (v) Root of a vector commitment containing online accounts that will help sign\r\n   * the proof.\r\n   */\r\n  constructor({\r\n    nextRound,\r\n    onlineTotalWeight,\r\n    type,\r\n    votersCommitment,\r\n  }: {\r\n    nextRound?: number | bigint;\r\n    onlineTotalWeight?: number | bigint;\r\n    type?: number | bigint;\r\n    votersCommitment?: string | Uint8Array;\r\n  }) {\r\n    super();\r\n    this.nextRound = nextRound;\r\n    this.onlineTotalWeight = onlineTotalWeight;\r\n    this.type = type;\r\n    this.votersCommitment =\r\n      typeof votersCommitment === 'string'\r\n        ? new Uint8Array(Buffer.from(votersCommitment, 'base64'))\r\n        : votersCommitment;\r\n\r\n    this.attribute_map = {\r\n      nextRound: 'next-round',\r\n      onlineTotalWeight: 'online-total-weight',\r\n      type: 'type',\r\n      votersCommitment: 'voters-commitment',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): StateProofTracking {\r\n    /* eslint-disable dot-notation */\r\n    return new StateProofTracking({\r\n      nextRound: data['next-round'],\r\n      onlineTotalWeight: data['online-total-weight'],\r\n      type: data['type'],\r\n      votersCommitment: data['voters-commitment'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\nexport class StateProofVerifier extends BaseModel {\r\n  /**\r\n   * (cmt) Represents the root of the vector commitment tree.\r\n   */\r\n  public commitment?: Uint8Array;\r\n\r\n  /**\r\n   * (lf) Key lifetime.\r\n   */\r\n  public keyLifetime?: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `StateProofVerifier` object.\r\n   * @param commitment - (cmt) Represents the root of the vector commitment tree.\r\n   * @param keyLifetime - (lf) Key lifetime.\r\n   */\r\n  constructor({\r\n    commitment,\r\n    keyLifetime,\r\n  }: {\r\n    commitment?: string | Uint8Array;\r\n    keyLifetime?: number | bigint;\r\n  }) {\r\n    super();\r\n    this.commitment =\r\n      typeof commitment === 'string'\r\n        ? new Uint8Array(Buffer.from(commitment, 'base64'))\r\n        : commitment;\r\n    this.keyLifetime = keyLifetime;\r\n\r\n    this.attribute_map = {\r\n      commitment: 'commitment',\r\n      keyLifetime: 'key-lifetime',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): StateProofVerifier {\r\n    /* eslint-disable dot-notation */\r\n    return new StateProofVerifier({\r\n      commitment: data['commitment'],\r\n      keyLifetime: data['key-lifetime'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Represents a (apls) local-state or (apgs) global-state schema. These schemas\r\n * determine how much storage may be used in a local-state or global-state for an\r\n * application. The more space used, the larger minimum balance must be maintained\r\n * in the account holding the data.\r\n */\r\nexport class StateSchema extends BaseModel {\r\n  /**\r\n   * Maximum number of TEAL byte slices that may be stored in the key/value store.\r\n   */\r\n  public numByteSlice: number | bigint;\r\n\r\n  /**\r\n   * Maximum number of TEAL uints that may be stored in the key/value store.\r\n   */\r\n  public numUint: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `StateSchema` object.\r\n   * @param numByteSlice - Maximum number of TEAL byte slices that may be stored in the key/value store.\r\n   * @param numUint - Maximum number of TEAL uints that may be stored in the key/value store.\r\n   */\r\n  constructor({\r\n    numByteSlice,\r\n    numUint,\r\n  }: {\r\n    numByteSlice: number | bigint;\r\n    numUint: number | bigint;\r\n  }) {\r\n    super();\r\n    this.numByteSlice = numByteSlice;\r\n    this.numUint = numUint;\r\n\r\n    this.attribute_map = {\r\n      numByteSlice: 'num-byte-slice',\r\n      numUint: 'num-uint',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): StateSchema {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['num-byte-slice'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'num-byte-slice': ${data}`\r\n      );\r\n    if (typeof data['num-uint'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'num-uint': ${data}`);\r\n    return new StateSchema({\r\n      numByteSlice: data['num-byte-slice'],\r\n      numUint: data['num-uint'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Represents a key-value pair in an application store.\r\n */\r\nexport class TealKeyValue extends BaseModel {\r\n  public key: string;\r\n\r\n  /**\r\n   * Represents a TEAL value.\r\n   */\r\n  public value: TealValue;\r\n\r\n  /**\r\n   * Creates a new `TealKeyValue` object.\r\n   * @param key -\r\n   * @param value - Represents a TEAL value.\r\n   */\r\n  constructor({ key, value }: { key: string; value: TealValue }) {\r\n    super();\r\n    this.key = key;\r\n    this.value = value;\r\n\r\n    this.attribute_map = {\r\n      key: 'key',\r\n      value: 'value',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): TealKeyValue {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['key'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'key': ${data}`);\r\n    if (typeof data['value'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'value': ${data}`);\r\n    return new TealKeyValue({\r\n      key: data['key'],\r\n      value: TealValue.from_obj_for_encoding(data['value']),\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Represents a TEAL value.\r\n */\r\nexport class TealValue extends BaseModel {\r\n  /**\r\n   * bytes value.\r\n   */\r\n  public bytes: string;\r\n\r\n  /**\r\n   * type of the value. Value `1` refers to **bytes**, value `2` refers to **uint**\r\n   */\r\n  public type: number | bigint;\r\n\r\n  /**\r\n   * uint value.\r\n   */\r\n  public uint: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `TealValue` object.\r\n   * @param bytes - bytes value.\r\n   * @param type - type of the value. Value `1` refers to **bytes**, value `2` refers to **uint**\r\n   * @param uint - uint value.\r\n   */\r\n  constructor({\r\n    bytes,\r\n    type,\r\n    uint,\r\n  }: {\r\n    bytes: string;\r\n    type: number | bigint;\r\n    uint: number | bigint;\r\n  }) {\r\n    super();\r\n    this.bytes = bytes;\r\n    this.type = type;\r\n    this.uint = uint;\r\n\r\n    this.attribute_map = {\r\n      bytes: 'bytes',\r\n      type: 'type',\r\n      uint: 'uint',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): TealValue {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['bytes'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'bytes': ${data}`);\r\n    if (typeof data['type'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'type': ${data}`);\r\n    if (typeof data['uint'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'uint': ${data}`);\r\n    return new TealValue({\r\n      bytes: data['bytes'],\r\n      type: data['type'],\r\n      uint: data['uint'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Contains all fields common to all transactions and serves as an envelope to all\r\n * transactions type. Represents both regular and inner transactions.\r\n * Definition:\r\n * data/transactions/signedtxn.go : SignedTxn\r\n * data/transactions/transaction.go : Transaction\r\n */\r\nexport class Transaction extends BaseModel {\r\n  /**\r\n   * (fee) Transaction fee.\r\n   */\r\n  public fee: number | bigint;\r\n\r\n  /**\r\n   * (fv) First valid round for this transaction.\r\n   */\r\n  public firstValid: number | bigint;\r\n\r\n  /**\r\n   * (lv) Last valid round for this transaction.\r\n   */\r\n  public lastValid: number | bigint;\r\n\r\n  /**\r\n   * (snd) Sender's address.\r\n   */\r\n  public sender: string;\r\n\r\n  /**\r\n   * Fields for application transactions.\r\n   * Definition:\r\n   * data/transactions/application.go : ApplicationCallTxnFields\r\n   */\r\n  public applicationTransaction?: TransactionApplication;\r\n\r\n  /**\r\n   * Fields for asset allocation, re-configuration, and destruction.\r\n   * A zero value for asset-id indicates asset creation.\r\n   * A zero value for the params indicates asset destruction.\r\n   * Definition:\r\n   * data/transactions/asset.go : AssetConfigTxnFields\r\n   */\r\n  public assetConfigTransaction?: TransactionAssetConfig;\r\n\r\n  /**\r\n   * Fields for an asset freeze transaction.\r\n   * Definition:\r\n   * data/transactions/asset.go : AssetFreezeTxnFields\r\n   */\r\n  public assetFreezeTransaction?: TransactionAssetFreeze;\r\n\r\n  /**\r\n   * Fields for an asset transfer transaction.\r\n   * Definition:\r\n   * data/transactions/asset.go : AssetTransferTxnFields\r\n   */\r\n  public assetTransferTransaction?: TransactionAssetTransfer;\r\n\r\n  /**\r\n   * (sgnr) this is included with signed transactions when the signing address does\r\n   * not equal the sender. The backend can use this to ensure that auth addr is equal\r\n   * to the accounts auth addr.\r\n   */\r\n  public authAddr?: string;\r\n\r\n  /**\r\n   * (rc) rewards applied to close-remainder-to account.\r\n   */\r\n  public closeRewards?: number | bigint;\r\n\r\n  /**\r\n   * (ca) closing amount for transaction.\r\n   */\r\n  public closingAmount?: number | bigint;\r\n\r\n  /**\r\n   * Round when the transaction was confirmed.\r\n   */\r\n  public confirmedRound?: number | bigint;\r\n\r\n  /**\r\n   * Specifies an application index (ID) if an application was created with this\r\n   * transaction.\r\n   */\r\n  public createdApplicationIndex?: number | bigint;\r\n\r\n  /**\r\n   * Specifies an asset index (ID) if an asset was created with this transaction.\r\n   */\r\n  public createdAssetIndex?: number | bigint;\r\n\r\n  /**\r\n   * (gh) Hash of genesis block.\r\n   */\r\n  public genesisHash?: Uint8Array;\r\n\r\n  /**\r\n   * (gen) genesis block ID.\r\n   */\r\n  public genesisId?: string;\r\n\r\n  /**\r\n   * (gd) Global state key/value changes for the application being executed by this\r\n   * transaction.\r\n   */\r\n  public globalStateDelta?: EvalDeltaKeyValue[];\r\n\r\n  /**\r\n   * (grp) Base64 encoded byte array of a sha512/256 digest. When present indicates\r\n   * that this transaction is part of a transaction group and the value is the\r\n   * sha512/256 hash of the transactions in that group.\r\n   */\r\n  public group?: Uint8Array;\r\n\r\n  /**\r\n   * Fields for a heartbeat transaction.\r\n   * Definition:\r\n   * data/transactions/heartbeat.go : HeartbeatTxnFields\r\n   */\r\n  public heartbeatTransaction?: TransactionHeartbeat;\r\n\r\n  /**\r\n   * Transaction ID\r\n   */\r\n  public id?: string;\r\n\r\n  /**\r\n   * Inner transactions produced by application execution.\r\n   */\r\n  public innerTxns?: Transaction[];\r\n\r\n  /**\r\n   * Offset into the round where this transaction was confirmed.\r\n   */\r\n  public intraRoundOffset?: number | bigint;\r\n\r\n  /**\r\n   * Fields for a keyreg transaction.\r\n   * Definition:\r\n   * data/transactions/keyreg.go : KeyregTxnFields\r\n   */\r\n  public keyregTransaction?: TransactionKeyreg;\r\n\r\n  /**\r\n   * (lx) Base64 encoded 32-byte array. Lease enforces mutual exclusion of\r\n   * transactions. If this field is nonzero, then once the transaction is confirmed,\r\n   * it acquires the lease identified by the (Sender, Lease) pair of the transaction\r\n   * until the LastValid round passes. While this transaction possesses the lease, no\r\n   * other transaction specifying this lease can be confirmed.\r\n   */\r\n  public lease?: Uint8Array;\r\n\r\n  /**\r\n   * (ld) Local state key/value changes for the application being executed by this\r\n   * transaction.\r\n   */\r\n  public localStateDelta?: AccountStateDelta[];\r\n\r\n  /**\r\n   * (lg) Logs for the application being executed by this transaction.\r\n   */\r\n  public logs?: Uint8Array[];\r\n\r\n  /**\r\n   * (note) Free form data.\r\n   */\r\n  public note?: Uint8Array;\r\n\r\n  /**\r\n   * Fields for a payment transaction.\r\n   * Definition:\r\n   * data/transactions/payment.go : PaymentTxnFields\r\n   */\r\n  public paymentTransaction?: TransactionPayment;\r\n\r\n  /**\r\n   * (rr) rewards applied to receiver account.\r\n   */\r\n  public receiverRewards?: number | bigint;\r\n\r\n  /**\r\n   * (rekey) when included in a valid transaction, the accounts auth addr will be\r\n   * updated with this value and future signatures must be signed with the key\r\n   * represented by this address.\r\n   */\r\n  public rekeyTo?: string;\r\n\r\n  /**\r\n   * Time when the block this transaction is in was confirmed.\r\n   */\r\n  public roundTime?: number | bigint;\r\n\r\n  /**\r\n   * (rs) rewards applied to sender account.\r\n   */\r\n  public senderRewards?: number | bigint;\r\n\r\n  /**\r\n   * Validation signature associated with some data. Only one of the signatures\r\n   * should be provided.\r\n   */\r\n  public signature?: TransactionSignature;\r\n\r\n  /**\r\n   * Fields for a state proof transaction.\r\n   * Definition:\r\n   * data/transactions/stateproof.go : StateProofTxnFields\r\n   */\r\n  public stateProofTransaction?: TransactionStateProof;\r\n\r\n  /**\r\n   * (type) Indicates what type of transaction this is. Different types have\r\n   * different fields.\r\n   * Valid types, and where their fields are stored:\r\n   * * (pay) payment-transaction\r\n   * * (keyreg) keyreg-transaction\r\n   * * (acfg) asset-config-transaction\r\n   * * (axfer) asset-transfer-transaction\r\n   * * (afrz) asset-freeze-transaction\r\n   * * (appl) application-transaction\r\n   * * (stpf) state-proof-transaction\r\n   * * (hb) heartbeat-transaction\r\n   */\r\n  public txType?: string;\r\n\r\n  /**\r\n   * Creates a new `Transaction` object.\r\n   * @param fee - (fee) Transaction fee.\r\n   * @param firstValid - (fv) First valid round for this transaction.\r\n   * @param lastValid - (lv) Last valid round for this transaction.\r\n   * @param sender - (snd) Sender's address.\r\n   * @param applicationTransaction - Fields for application transactions.\r\n   * Definition:\r\n   * data/transactions/application.go : ApplicationCallTxnFields\r\n   * @param assetConfigTransaction - Fields for asset allocation, re-configuration, and destruction.\r\n   * A zero value for asset-id indicates asset creation.\r\n   * A zero value for the params indicates asset destruction.\r\n   * Definition:\r\n   * data/transactions/asset.go : AssetConfigTxnFields\r\n   * @param assetFreezeTransaction - Fields for an asset freeze transaction.\r\n   * Definition:\r\n   * data/transactions/asset.go : AssetFreezeTxnFields\r\n   * @param assetTransferTransaction - Fields for an asset transfer transaction.\r\n   * Definition:\r\n   * data/transactions/asset.go : AssetTransferTxnFields\r\n   * @param authAddr - (sgnr) this is included with signed transactions when the signing address does\r\n   * not equal the sender. The backend can use this to ensure that auth addr is equal\r\n   * to the accounts auth addr.\r\n   * @param closeRewards - (rc) rewards applied to close-remainder-to account.\r\n   * @param closingAmount - (ca) closing amount for transaction.\r\n   * @param confirmedRound - Round when the transaction was confirmed.\r\n   * @param createdApplicationIndex - Specifies an application index (ID) if an application was created with this\r\n   * transaction.\r\n   * @param createdAssetIndex - Specifies an asset index (ID) if an asset was created with this transaction.\r\n   * @param genesisHash - (gh) Hash of genesis block.\r\n   * @param genesisId - (gen) genesis block ID.\r\n   * @param globalStateDelta - (gd) Global state key/value changes for the application being executed by this\r\n   * transaction.\r\n   * @param group - (grp) Base64 encoded byte array of a sha512/256 digest. When present indicates\r\n   * that this transaction is part of a transaction group and the value is the\r\n   * sha512/256 hash of the transactions in that group.\r\n   * @param heartbeatTransaction - Fields for a heartbeat transaction.\r\n   * Definition:\r\n   * data/transactions/heartbeat.go : HeartbeatTxnFields\r\n   * @param id - Transaction ID\r\n   * @param innerTxns - Inner transactions produced by application execution.\r\n   * @param intraRoundOffset - Offset into the round where this transaction was confirmed.\r\n   * @param keyregTransaction - Fields for a keyreg transaction.\r\n   * Definition:\r\n   * data/transactions/keyreg.go : KeyregTxnFields\r\n   * @param lease - (lx) Base64 encoded 32-byte array. Lease enforces mutual exclusion of\r\n   * transactions. If this field is nonzero, then once the transaction is confirmed,\r\n   * it acquires the lease identified by the (Sender, Lease) pair of the transaction\r\n   * until the LastValid round passes. While this transaction possesses the lease, no\r\n   * other transaction specifying this lease can be confirmed.\r\n   * @param localStateDelta - (ld) Local state key/value changes for the application being executed by this\r\n   * transaction.\r\n   * @param logs - (lg) Logs for the application being executed by this transaction.\r\n   * @param note - (note) Free form data.\r\n   * @param paymentTransaction - Fields for a payment transaction.\r\n   * Definition:\r\n   * data/transactions/payment.go : PaymentTxnFields\r\n   * @param receiverRewards - (rr) rewards applied to receiver account.\r\n   * @param rekeyTo - (rekey) when included in a valid transaction, the accounts auth addr will be\r\n   * updated with this value and future signatures must be signed with the key\r\n   * represented by this address.\r\n   * @param roundTime - Time when the block this transaction is in was confirmed.\r\n   * @param senderRewards - (rs) rewards applied to sender account.\r\n   * @param signature - Validation signature associated with some data. Only one of the signatures\r\n   * should be provided.\r\n   * @param stateProofTransaction - Fields for a state proof transaction.\r\n   * Definition:\r\n   * data/transactions/stateproof.go : StateProofTxnFields\r\n   * @param txType - (type) Indicates what type of transaction this is. Different types have\r\n   * different fields.\r\n   * Valid types, and where their fields are stored:\r\n   * * (pay) payment-transaction\r\n   * * (keyreg) keyreg-transaction\r\n   * * (acfg) asset-config-transaction\r\n   * * (axfer) asset-transfer-transaction\r\n   * * (afrz) asset-freeze-transaction\r\n   * * (appl) application-transaction\r\n   * * (stpf) state-proof-transaction\r\n   * * (hb) heartbeat-transaction\r\n   */\r\n  constructor({\r\n    fee,\r\n    firstValid,\r\n    lastValid,\r\n    sender,\r\n    applicationTransaction,\r\n    assetConfigTransaction,\r\n    assetFreezeTransaction,\r\n    assetTransferTransaction,\r\n    authAddr,\r\n    closeRewards,\r\n    closingAmount,\r\n    confirmedRound,\r\n    createdApplicationIndex,\r\n    createdAssetIndex,\r\n    genesisHash,\r\n    genesisId,\r\n    globalStateDelta,\r\n    group,\r\n    heartbeatTransaction,\r\n    id,\r\n    innerTxns,\r\n    intraRoundOffset,\r\n    keyregTransaction,\r\n    lease,\r\n    localStateDelta,\r\n    logs,\r\n    note,\r\n    paymentTransaction,\r\n    receiverRewards,\r\n    rekeyTo,\r\n    roundTime,\r\n    senderRewards,\r\n    signature,\r\n    stateProofTransaction,\r\n    txType,\r\n  }: {\r\n    fee: number | bigint;\r\n    firstValid: number | bigint;\r\n    lastValid: number | bigint;\r\n    sender: string;\r\n    applicationTransaction?: TransactionApplication;\r\n    assetConfigTransaction?: TransactionAssetConfig;\r\n    assetFreezeTransaction?: TransactionAssetFreeze;\r\n    assetTransferTransaction?: TransactionAssetTransfer;\r\n    authAddr?: string;\r\n    closeRewards?: number | bigint;\r\n    closingAmount?: number | bigint;\r\n    confirmedRound?: number | bigint;\r\n    createdApplicationIndex?: number | bigint;\r\n    createdAssetIndex?: number | bigint;\r\n    genesisHash?: string | Uint8Array;\r\n    genesisId?: string;\r\n    globalStateDelta?: EvalDeltaKeyValue[];\r\n    group?: string | Uint8Array;\r\n    heartbeatTransaction?: TransactionHeartbeat;\r\n    id?: string;\r\n    innerTxns?: Transaction[];\r\n    intraRoundOffset?: number | bigint;\r\n    keyregTransaction?: TransactionKeyreg;\r\n    lease?: string | Uint8Array;\r\n    localStateDelta?: AccountStateDelta[];\r\n    logs?: Uint8Array[];\r\n    note?: string | Uint8Array;\r\n    paymentTransaction?: TransactionPayment;\r\n    receiverRewards?: number | bigint;\r\n    rekeyTo?: string;\r\n    roundTime?: number | bigint;\r\n    senderRewards?: number | bigint;\r\n    signature?: TransactionSignature;\r\n    stateProofTransaction?: TransactionStateProof;\r\n    txType?: string;\r\n  }) {\r\n    super();\r\n    this.fee = fee;\r\n    this.firstValid = firstValid;\r\n    this.lastValid = lastValid;\r\n    this.sender = sender;\r\n    this.applicationTransaction = applicationTransaction;\r\n    this.assetConfigTransaction = assetConfigTransaction;\r\n    this.assetFreezeTransaction = assetFreezeTransaction;\r\n    this.assetTransferTransaction = assetTransferTransaction;\r\n    this.authAddr = authAddr;\r\n    this.closeRewards = closeRewards;\r\n    this.closingAmount = closingAmount;\r\n    this.confirmedRound = confirmedRound;\r\n    this.createdApplicationIndex = createdApplicationIndex;\r\n    this.createdAssetIndex = createdAssetIndex;\r\n    this.genesisHash =\r\n      typeof genesisHash === 'string'\r\n        ? new Uint8Array(Buffer.from(genesisHash, 'base64'))\r\n        : genesisHash;\r\n    this.genesisId = genesisId;\r\n    this.globalStateDelta = globalStateDelta;\r\n    this.group =\r\n      typeof group === 'string'\r\n        ? new Uint8Array(Buffer.from(group, 'base64'))\r\n        : group;\r\n    this.heartbeatTransaction = heartbeatTransaction;\r\n    this.id = id;\r\n    this.innerTxns = innerTxns;\r\n    this.intraRoundOffset = intraRoundOffset;\r\n    this.keyregTransaction = keyregTransaction;\r\n    this.lease =\r\n      typeof lease === 'string'\r\n        ? new Uint8Array(Buffer.from(lease, 'base64'))\r\n        : lease;\r\n    this.localStateDelta = localStateDelta;\r\n    this.logs = logs;\r\n    this.note =\r\n      typeof note === 'string'\r\n        ? new Uint8Array(Buffer.from(note, 'base64'))\r\n        : note;\r\n    this.paymentTransaction = paymentTransaction;\r\n    this.receiverRewards = receiverRewards;\r\n    this.rekeyTo = rekeyTo;\r\n    this.roundTime = roundTime;\r\n    this.senderRewards = senderRewards;\r\n    this.signature = signature;\r\n    this.stateProofTransaction = stateProofTransaction;\r\n    this.txType = txType;\r\n\r\n    this.attribute_map = {\r\n      fee: 'fee',\r\n      firstValid: 'first-valid',\r\n      lastValid: 'last-valid',\r\n      sender: 'sender',\r\n      applicationTransaction: 'application-transaction',\r\n      assetConfigTransaction: 'asset-config-transaction',\r\n      assetFreezeTransaction: 'asset-freeze-transaction',\r\n      assetTransferTransaction: 'asset-transfer-transaction',\r\n      authAddr: 'auth-addr',\r\n      closeRewards: 'close-rewards',\r\n      closingAmount: 'closing-amount',\r\n      confirmedRound: 'confirmed-round',\r\n      createdApplicationIndex: 'created-application-index',\r\n      createdAssetIndex: 'created-asset-index',\r\n      genesisHash: 'genesis-hash',\r\n      genesisId: 'genesis-id',\r\n      globalStateDelta: 'global-state-delta',\r\n      group: 'group',\r\n      heartbeatTransaction: 'heartbeat-transaction',\r\n      id: 'id',\r\n      innerTxns: 'inner-txns',\r\n      intraRoundOffset: 'intra-round-offset',\r\n      keyregTransaction: 'keyreg-transaction',\r\n      lease: 'lease',\r\n      localStateDelta: 'local-state-delta',\r\n      logs: 'logs',\r\n      note: 'note',\r\n      paymentTransaction: 'payment-transaction',\r\n      receiverRewards: 'receiver-rewards',\r\n      rekeyTo: 'rekey-to',\r\n      roundTime: 'round-time',\r\n      senderRewards: 'sender-rewards',\r\n      signature: 'signature',\r\n      stateProofTransaction: 'state-proof-transaction',\r\n      txType: 'tx-type',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): Transaction {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['fee'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'fee': ${data}`);\r\n    if (typeof data['first-valid'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'first-valid': ${data}`\r\n      );\r\n    if (typeof data['last-valid'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'last-valid': ${data}`\r\n      );\r\n    if (typeof data['sender'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'sender': ${data}`);\r\n    return new Transaction({\r\n      fee: data['fee'],\r\n      firstValid: data['first-valid'],\r\n      lastValid: data['last-valid'],\r\n      sender: data['sender'],\r\n      applicationTransaction:\r\n        typeof data['application-transaction'] !== 'undefined'\r\n          ? TransactionApplication.from_obj_for_encoding(\r\n              data['application-transaction']\r\n            )\r\n          : undefined,\r\n      assetConfigTransaction:\r\n        typeof data['asset-config-transaction'] !== 'undefined'\r\n          ? TransactionAssetConfig.from_obj_for_encoding(\r\n              data['asset-config-transaction']\r\n            )\r\n          : undefined,\r\n      assetFreezeTransaction:\r\n        typeof data['asset-freeze-transaction'] !== 'undefined'\r\n          ? TransactionAssetFreeze.from_obj_for_encoding(\r\n              data['asset-freeze-transaction']\r\n            )\r\n          : undefined,\r\n      assetTransferTransaction:\r\n        typeof data['asset-transfer-transaction'] !== 'undefined'\r\n          ? TransactionAssetTransfer.from_obj_for_encoding(\r\n              data['asset-transfer-transaction']\r\n            )\r\n          : undefined,\r\n      authAddr: data['auth-addr'],\r\n      closeRewards: data['close-rewards'],\r\n      closingAmount: data['closing-amount'],\r\n      confirmedRound: data['confirmed-round'],\r\n      createdApplicationIndex: data['created-application-index'],\r\n      createdAssetIndex: data['created-asset-index'],\r\n      genesisHash: data['genesis-hash'],\r\n      genesisId: data['genesis-id'],\r\n      globalStateDelta:\r\n        typeof data['global-state-delta'] !== 'undefined'\r\n          ? data['global-state-delta'].map(\r\n              EvalDeltaKeyValue.from_obj_for_encoding\r\n            )\r\n          : undefined,\r\n      group: data['group'],\r\n      heartbeatTransaction:\r\n        typeof data['heartbeat-transaction'] !== 'undefined'\r\n          ? TransactionHeartbeat.from_obj_for_encoding(\r\n              data['heartbeat-transaction']\r\n            )\r\n          : undefined,\r\n      id: data['id'],\r\n      innerTxns:\r\n        typeof data['inner-txns'] !== 'undefined'\r\n          ? data['inner-txns'].map(Transaction.from_obj_for_encoding)\r\n          : undefined,\r\n      intraRoundOffset: data['intra-round-offset'],\r\n      keyregTransaction:\r\n        typeof data['keyreg-transaction'] !== 'undefined'\r\n          ? TransactionKeyreg.from_obj_for_encoding(data['keyreg-transaction'])\r\n          : undefined,\r\n      lease: data['lease'],\r\n      localStateDelta:\r\n        typeof data['local-state-delta'] !== 'undefined'\r\n          ? data['local-state-delta'].map(\r\n              AccountStateDelta.from_obj_for_encoding\r\n            )\r\n          : undefined,\r\n      logs: data['logs'],\r\n      note: data['note'],\r\n      paymentTransaction:\r\n        typeof data['payment-transaction'] !== 'undefined'\r\n          ? TransactionPayment.from_obj_for_encoding(\r\n              data['payment-transaction']\r\n            )\r\n          : undefined,\r\n      receiverRewards: data['receiver-rewards'],\r\n      rekeyTo: data['rekey-to'],\r\n      roundTime: data['round-time'],\r\n      senderRewards: data['sender-rewards'],\r\n      signature:\r\n        typeof data['signature'] !== 'undefined'\r\n          ? TransactionSignature.from_obj_for_encoding(data['signature'])\r\n          : undefined,\r\n      stateProofTransaction:\r\n        typeof data['state-proof-transaction'] !== 'undefined'\r\n          ? TransactionStateProof.from_obj_for_encoding(\r\n              data['state-proof-transaction']\r\n            )\r\n          : undefined,\r\n      txType: data['tx-type'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Fields for application transactions.\r\n * Definition:\r\n * data/transactions/application.go : ApplicationCallTxnFields\r\n */\r\nexport class TransactionApplication extends BaseModel {\r\n  /**\r\n   * (apid) ID of the application being configured or empty if creating.\r\n   */\r\n  public applicationId: number | bigint;\r\n\r\n  /**\r\n   * (apat) List of accounts in addition to the sender that may be accessed from the\r\n   * application's approval-program and clear-state-program.\r\n   */\r\n  public accounts?: string[];\r\n\r\n  /**\r\n   * (apaa) transaction specific arguments accessed from the application's\r\n   * approval-program and clear-state-program.\r\n   */\r\n  public applicationArgs?: Uint8Array[];\r\n\r\n  /**\r\n   * (apap) Logic executed for every application transaction, except when\r\n   * on-completion is set to \"clear\". It can read and write global state for the\r\n   * application, as well as account-specific local state. Approval programs may\r\n   * reject the transaction.\r\n   */\r\n  public approvalProgram?: Uint8Array;\r\n\r\n  /**\r\n   * (apsu) Logic executed for application transactions with on-completion set to\r\n   * \"clear\". It can read and write global state for the application, as well as\r\n   * account-specific local state. Clear state programs cannot reject the\r\n   * transaction.\r\n   */\r\n  public clearStateProgram?: Uint8Array;\r\n\r\n  /**\r\n   * (epp) specifies the additional app program len requested in pages.\r\n   */\r\n  public extraProgramPages?: number | bigint;\r\n\r\n  /**\r\n   * (apfa) Lists the applications in addition to the application-id whose global\r\n   * states may be accessed by this application's approval-program and\r\n   * clear-state-program. The access is read-only.\r\n   */\r\n  public foreignApps?: (number | bigint)[];\r\n\r\n  /**\r\n   * (apas) lists the assets whose parameters may be accessed by this application's\r\n   * ApprovalProgram and ClearStateProgram. The access is read-only.\r\n   */\r\n  public foreignAssets?: (number | bigint)[];\r\n\r\n  /**\r\n   * Represents a (apls) local-state or (apgs) global-state schema. These schemas\r\n   * determine how much storage may be used in a local-state or global-state for an\r\n   * application. The more space used, the larger minimum balance must be maintained\r\n   * in the account holding the data.\r\n   */\r\n  public globalStateSchema?: StateSchema;\r\n\r\n  /**\r\n   * Represents a (apls) local-state or (apgs) global-state schema. These schemas\r\n   * determine how much storage may be used in a local-state or global-state for an\r\n   * application. The more space used, the larger minimum balance must be maintained\r\n   * in the account holding the data.\r\n   */\r\n  public localStateSchema?: StateSchema;\r\n\r\n  /**\r\n   * (apan) defines the what additional actions occur with the transaction.\r\n   * Valid types:\r\n   * * noop\r\n   * * optin\r\n   * * closeout\r\n   * * clear\r\n   * * update\r\n   * * update\r\n   * * delete\r\n   */\r\n  public onCompletion?: string;\r\n\r\n  /**\r\n   * Creates a new `TransactionApplication` object.\r\n   * @param applicationId - (apid) ID of the application being configured or empty if creating.\r\n   * @param accounts - (apat) List of accounts in addition to the sender that may be accessed from the\r\n   * application's approval-program and clear-state-program.\r\n   * @param applicationArgs - (apaa) transaction specific arguments accessed from the application's\r\n   * approval-program and clear-state-program.\r\n   * @param approvalProgram - (apap) Logic executed for every application transaction, except when\r\n   * on-completion is set to \"clear\". It can read and write global state for the\r\n   * application, as well as account-specific local state. Approval programs may\r\n   * reject the transaction.\r\n   * @param clearStateProgram - (apsu) Logic executed for application transactions with on-completion set to\r\n   * \"clear\". It can read and write global state for the application, as well as\r\n   * account-specific local state. Clear state programs cannot reject the\r\n   * transaction.\r\n   * @param extraProgramPages - (epp) specifies the additional app program len requested in pages.\r\n   * @param foreignApps - (apfa) Lists the applications in addition to the application-id whose global\r\n   * states may be accessed by this application's approval-program and\r\n   * clear-state-program. The access is read-only.\r\n   * @param foreignAssets - (apas) lists the assets whose parameters may be accessed by this application's\r\n   * ApprovalProgram and ClearStateProgram. The access is read-only.\r\n   * @param globalStateSchema - Represents a (apls) local-state or (apgs) global-state schema. These schemas\r\n   * determine how much storage may be used in a local-state or global-state for an\r\n   * application. The more space used, the larger minimum balance must be maintained\r\n   * in the account holding the data.\r\n   * @param localStateSchema - Represents a (apls) local-state or (apgs) global-state schema. These schemas\r\n   * determine how much storage may be used in a local-state or global-state for an\r\n   * application. The more space used, the larger minimum balance must be maintained\r\n   * in the account holding the data.\r\n   * @param onCompletion - (apan) defines the what additional actions occur with the transaction.\r\n   * Valid types:\r\n   * * noop\r\n   * * optin\r\n   * * closeout\r\n   * * clear\r\n   * * update\r\n   * * update\r\n   * * delete\r\n   */\r\n  constructor({\r\n    applicationId,\r\n    accounts,\r\n    applicationArgs,\r\n    approvalProgram,\r\n    clearStateProgram,\r\n    extraProgramPages,\r\n    foreignApps,\r\n    foreignAssets,\r\n    globalStateSchema,\r\n    localStateSchema,\r\n    onCompletion,\r\n  }: {\r\n    applicationId: number | bigint;\r\n    accounts?: string[];\r\n    applicationArgs?: Uint8Array[];\r\n    approvalProgram?: string | Uint8Array;\r\n    clearStateProgram?: string | Uint8Array;\r\n    extraProgramPages?: number | bigint;\r\n    foreignApps?: (number | bigint)[];\r\n    foreignAssets?: (number | bigint)[];\r\n    globalStateSchema?: StateSchema;\r\n    localStateSchema?: StateSchema;\r\n    onCompletion?: string;\r\n  }) {\r\n    super();\r\n    this.applicationId = applicationId;\r\n    this.accounts = accounts;\r\n    this.applicationArgs = applicationArgs;\r\n    this.approvalProgram =\r\n      typeof approvalProgram === 'string'\r\n        ? new Uint8Array(Buffer.from(approvalProgram, 'base64'))\r\n        : approvalProgram;\r\n    this.clearStateProgram =\r\n      typeof clearStateProgram === 'string'\r\n        ? new Uint8Array(Buffer.from(clearStateProgram, 'base64'))\r\n        : clearStateProgram;\r\n    this.extraProgramPages = extraProgramPages;\r\n    this.foreignApps = foreignApps;\r\n    this.foreignAssets = foreignAssets;\r\n    this.globalStateSchema = globalStateSchema;\r\n    this.localStateSchema = localStateSchema;\r\n    this.onCompletion = onCompletion;\r\n\r\n    this.attribute_map = {\r\n      applicationId: 'application-id',\r\n      accounts: 'accounts',\r\n      applicationArgs: 'application-args',\r\n      approvalProgram: 'approval-program',\r\n      clearStateProgram: 'clear-state-program',\r\n      extraProgramPages: 'extra-program-pages',\r\n      foreignApps: 'foreign-apps',\r\n      foreignAssets: 'foreign-assets',\r\n      globalStateSchema: 'global-state-schema',\r\n      localStateSchema: 'local-state-schema',\r\n      onCompletion: 'on-completion',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): TransactionApplication {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['application-id'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'application-id': ${data}`\r\n      );\r\n    return new TransactionApplication({\r\n      applicationId: data['application-id'],\r\n      accounts: data['accounts'],\r\n      applicationArgs: data['application-args'],\r\n      approvalProgram: data['approval-program'],\r\n      clearStateProgram: data['clear-state-program'],\r\n      extraProgramPages: data['extra-program-pages'],\r\n      foreignApps: data['foreign-apps'],\r\n      foreignAssets: data['foreign-assets'],\r\n      globalStateSchema:\r\n        typeof data['global-state-schema'] !== 'undefined'\r\n          ? StateSchema.from_obj_for_encoding(data['global-state-schema'])\r\n          : undefined,\r\n      localStateSchema:\r\n        typeof data['local-state-schema'] !== 'undefined'\r\n          ? StateSchema.from_obj_for_encoding(data['local-state-schema'])\r\n          : undefined,\r\n      onCompletion: data['on-completion'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Fields for asset allocation, re-configuration, and destruction.\r\n * A zero value for asset-id indicates asset creation.\r\n * A zero value for the params indicates asset destruction.\r\n * Definition:\r\n * data/transactions/asset.go : AssetConfigTxnFields\r\n */\r\nexport class TransactionAssetConfig extends BaseModel {\r\n  /**\r\n   * (xaid) ID of the asset being configured or empty if creating.\r\n   */\r\n  public assetId?: number | bigint;\r\n\r\n  /**\r\n   * AssetParams specifies the parameters for an asset.\r\n   * (apar) when part of an AssetConfig transaction.\r\n   * Definition:\r\n   * data/transactions/asset.go : AssetParams\r\n   */\r\n  public params?: AssetParams;\r\n\r\n  /**\r\n   * Creates a new `TransactionAssetConfig` object.\r\n   * @param assetId - (xaid) ID of the asset being configured or empty if creating.\r\n   * @param params - AssetParams specifies the parameters for an asset.\r\n   * (apar) when part of an AssetConfig transaction.\r\n   * Definition:\r\n   * data/transactions/asset.go : AssetParams\r\n   */\r\n  constructor({\r\n    assetId,\r\n    params,\r\n  }: {\r\n    assetId?: number | bigint;\r\n    params?: AssetParams;\r\n  }) {\r\n    super();\r\n    this.assetId = assetId;\r\n    this.params = params;\r\n\r\n    this.attribute_map = {\r\n      assetId: 'asset-id',\r\n      params: 'params',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): TransactionAssetConfig {\r\n    /* eslint-disable dot-notation */\r\n    return new TransactionAssetConfig({\r\n      assetId: data['asset-id'],\r\n      params:\r\n        typeof data['params'] !== 'undefined'\r\n          ? AssetParams.from_obj_for_encoding(data['params'])\r\n          : undefined,\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Fields for an asset freeze transaction.\r\n * Definition:\r\n * data/transactions/asset.go : AssetFreezeTxnFields\r\n */\r\nexport class TransactionAssetFreeze extends BaseModel {\r\n  /**\r\n   * (fadd) Address of the account whose asset is being frozen or thawed.\r\n   */\r\n  public address: string;\r\n\r\n  /**\r\n   * (faid) ID of the asset being frozen or thawed.\r\n   */\r\n  public assetId: number | bigint;\r\n\r\n  /**\r\n   * (afrz) The new freeze status.\r\n   */\r\n  public newFreezeStatus: boolean;\r\n\r\n  /**\r\n   * Creates a new `TransactionAssetFreeze` object.\r\n   * @param address - (fadd) Address of the account whose asset is being frozen or thawed.\r\n   * @param assetId - (faid) ID of the asset being frozen or thawed.\r\n   * @param newFreezeStatus - (afrz) The new freeze status.\r\n   */\r\n  constructor({\r\n    address,\r\n    assetId,\r\n    newFreezeStatus,\r\n  }: {\r\n    address: string;\r\n    assetId: number | bigint;\r\n    newFreezeStatus: boolean;\r\n  }) {\r\n    super();\r\n    this.address = address;\r\n    this.assetId = assetId;\r\n    this.newFreezeStatus = newFreezeStatus;\r\n\r\n    this.attribute_map = {\r\n      address: 'address',\r\n      assetId: 'asset-id',\r\n      newFreezeStatus: 'new-freeze-status',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): TransactionAssetFreeze {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['address'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'address': ${data}`);\r\n    if (typeof data['asset-id'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'asset-id': ${data}`);\r\n    if (typeof data['new-freeze-status'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'new-freeze-status': ${data}`\r\n      );\r\n    return new TransactionAssetFreeze({\r\n      address: data['address'],\r\n      assetId: data['asset-id'],\r\n      newFreezeStatus: data['new-freeze-status'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Fields for an asset transfer transaction.\r\n * Definition:\r\n * data/transactions/asset.go : AssetTransferTxnFields\r\n */\r\nexport class TransactionAssetTransfer extends BaseModel {\r\n  /**\r\n   * (aamt) Amount of asset to transfer. A zero amount transferred to self allocates\r\n   * that asset in the account's Assets map.\r\n   */\r\n  public amount: number | bigint;\r\n\r\n  /**\r\n   * (xaid) ID of the asset being transferred.\r\n   */\r\n  public assetId: number | bigint;\r\n\r\n  /**\r\n   * (arcv) Recipient address of the transfer.\r\n   */\r\n  public receiver: string;\r\n\r\n  /**\r\n   * Number of assets transferred to the close-to account as part of the transaction.\r\n   */\r\n  public closeAmount?: number | bigint;\r\n\r\n  /**\r\n   * (aclose) Indicates that the asset should be removed from the account's Assets\r\n   * map, and specifies where the remaining asset holdings should be transferred.\r\n   * It's always valid to transfer remaining asset holdings to the creator account.\r\n   */\r\n  public closeTo?: string;\r\n\r\n  /**\r\n   * (asnd) The effective sender during a clawback transactions. If this is not a\r\n   * zero value, the real transaction sender must be the Clawback address from the\r\n   * AssetParams.\r\n   */\r\n  public sender?: string;\r\n\r\n  /**\r\n   * Creates a new `TransactionAssetTransfer` object.\r\n   * @param amount - (aamt) Amount of asset to transfer. A zero amount transferred to self allocates\r\n   * that asset in the account's Assets map.\r\n   * @param assetId - (xaid) ID of the asset being transferred.\r\n   * @param receiver - (arcv) Recipient address of the transfer.\r\n   * @param closeAmount - Number of assets transferred to the close-to account as part of the transaction.\r\n   * @param closeTo - (aclose) Indicates that the asset should be removed from the account's Assets\r\n   * map, and specifies where the remaining asset holdings should be transferred.\r\n   * It's always valid to transfer remaining asset holdings to the creator account.\r\n   * @param sender - (asnd) The effective sender during a clawback transactions. If this is not a\r\n   * zero value, the real transaction sender must be the Clawback address from the\r\n   * AssetParams.\r\n   */\r\n  constructor({\r\n    amount,\r\n    assetId,\r\n    receiver,\r\n    closeAmount,\r\n    closeTo,\r\n    sender,\r\n  }: {\r\n    amount: number | bigint;\r\n    assetId: number | bigint;\r\n    receiver: string;\r\n    closeAmount?: number | bigint;\r\n    closeTo?: string;\r\n    sender?: string;\r\n  }) {\r\n    super();\r\n    this.amount = amount;\r\n    this.assetId = assetId;\r\n    this.receiver = receiver;\r\n    this.closeAmount = closeAmount;\r\n    this.closeTo = closeTo;\r\n    this.sender = sender;\r\n\r\n    this.attribute_map = {\r\n      amount: 'amount',\r\n      assetId: 'asset-id',\r\n      receiver: 'receiver',\r\n      closeAmount: 'close-amount',\r\n      closeTo: 'close-to',\r\n      sender: 'sender',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): TransactionAssetTransfer {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['amount'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'amount': ${data}`);\r\n    if (typeof data['asset-id'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'asset-id': ${data}`);\r\n    if (typeof data['receiver'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'receiver': ${data}`);\r\n    return new TransactionAssetTransfer({\r\n      amount: data['amount'],\r\n      assetId: data['asset-id'],\r\n      receiver: data['receiver'],\r\n      closeAmount: data['close-amount'],\r\n      closeTo: data['close-to'],\r\n      sender: data['sender'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Fields for a heartbeat transaction.\r\n * Definition:\r\n * data/transactions/heartbeat.go : HeartbeatTxnFields\r\n */\r\nexport class TransactionHeartbeat extends BaseModel {\r\n  /**\r\n   * (hbad) HbAddress is the account this txn is proving onlineness for.\r\n   */\r\n  public hbAddress: string;\r\n\r\n  /**\r\n   * (hbkd) HbKeyDilution must match HbAddress account's current KeyDilution.\r\n   */\r\n  public hbKeyDilution: number | bigint;\r\n\r\n  /**\r\n   * (hbprf) HbProof is a signature using HeartbeatAddress's partkey, thereby showing\r\n   * it is online.\r\n   */\r\n  public hbProof: HbProofFields;\r\n\r\n  /**\r\n   * (hbsd) HbSeed must be the block seed for the this transaction's firstValid\r\n   * block.\r\n   */\r\n  public hbSeed: Uint8Array;\r\n\r\n  /**\r\n   * (hbvid) HbVoteID must match the HbAddress account's current VoteID.\r\n   */\r\n  public hbVoteId: Uint8Array;\r\n\r\n  /**\r\n   * Creates a new `TransactionHeartbeat` object.\r\n   * @param hbAddress - (hbad) HbAddress is the account this txn is proving onlineness for.\r\n   * @param hbKeyDilution - (hbkd) HbKeyDilution must match HbAddress account's current KeyDilution.\r\n   * @param hbProof - (hbprf) HbProof is a signature using HeartbeatAddress's partkey, thereby showing\r\n   * it is online.\r\n   * @param hbSeed - (hbsd) HbSeed must be the block seed for the this transaction's firstValid\r\n   * block.\r\n   * @param hbVoteId - (hbvid) HbVoteID must match the HbAddress account's current VoteID.\r\n   */\r\n  constructor({\r\n    hbAddress,\r\n    hbKeyDilution,\r\n    hbProof,\r\n    hbSeed,\r\n    hbVoteId,\r\n  }: {\r\n    hbAddress: string;\r\n    hbKeyDilution: number | bigint;\r\n    hbProof: HbProofFields;\r\n    hbSeed: string | Uint8Array;\r\n    hbVoteId: string | Uint8Array;\r\n  }) {\r\n    super();\r\n    this.hbAddress = hbAddress;\r\n    this.hbKeyDilution = hbKeyDilution;\r\n    this.hbProof = hbProof;\r\n    this.hbSeed =\r\n      typeof hbSeed === 'string'\r\n        ? new Uint8Array(Buffer.from(hbSeed, 'base64'))\r\n        : hbSeed;\r\n    this.hbVoteId =\r\n      typeof hbVoteId === 'string'\r\n        ? new Uint8Array(Buffer.from(hbVoteId, 'base64'))\r\n        : hbVoteId;\r\n\r\n    this.attribute_map = {\r\n      hbAddress: 'hb-address',\r\n      hbKeyDilution: 'hb-key-dilution',\r\n      hbProof: 'hb-proof',\r\n      hbSeed: 'hb-seed',\r\n      hbVoteId: 'hb-vote-id',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): TransactionHeartbeat {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['hb-address'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'hb-address': ${data}`\r\n      );\r\n    if (typeof data['hb-key-dilution'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'hb-key-dilution': ${data}`\r\n      );\r\n    if (typeof data['hb-proof'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'hb-proof': ${data}`);\r\n    if (typeof data['hb-seed'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'hb-seed': ${data}`);\r\n    if (typeof data['hb-vote-id'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'hb-vote-id': ${data}`\r\n      );\r\n    return new TransactionHeartbeat({\r\n      hbAddress: data['hb-address'],\r\n      hbKeyDilution: data['hb-key-dilution'],\r\n      hbProof: HbProofFields.from_obj_for_encoding(data['hb-proof']),\r\n      hbSeed: data['hb-seed'],\r\n      hbVoteId: data['hb-vote-id'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Fields for a keyreg transaction.\r\n * Definition:\r\n * data/transactions/keyreg.go : KeyregTxnFields\r\n */\r\nexport class TransactionKeyreg extends BaseModel {\r\n  /**\r\n   * (nonpart) Mark the account as participating or non-participating.\r\n   */\r\n  public nonParticipation?: boolean;\r\n\r\n  /**\r\n   * (selkey) Public key used with the Verified Random Function (VRF) result during\r\n   * committee selection.\r\n   */\r\n  public selectionParticipationKey?: Uint8Array;\r\n\r\n  /**\r\n   * (sprfkey) State proof key used in key registration transactions.\r\n   */\r\n  public stateProofKey?: Uint8Array;\r\n\r\n  /**\r\n   * (votefst) First round this participation key is valid.\r\n   */\r\n  public voteFirstValid?: number | bigint;\r\n\r\n  /**\r\n   * (votekd) Number of subkeys in each batch of participation keys.\r\n   */\r\n  public voteKeyDilution?: number | bigint;\r\n\r\n  /**\r\n   * (votelst) Last round this participation key is valid.\r\n   */\r\n  public voteLastValid?: number | bigint;\r\n\r\n  /**\r\n   * (votekey) Participation public key used in key registration transactions.\r\n   */\r\n  public voteParticipationKey?: Uint8Array;\r\n\r\n  /**\r\n   * Creates a new `TransactionKeyreg` object.\r\n   * @param nonParticipation - (nonpart) Mark the account as participating or non-participating.\r\n   * @param selectionParticipationKey - (selkey) Public key used with the Verified Random Function (VRF) result during\r\n   * committee selection.\r\n   * @param stateProofKey - (sprfkey) State proof key used in key registration transactions.\r\n   * @param voteFirstValid - (votefst) First round this participation key is valid.\r\n   * @param voteKeyDilution - (votekd) Number of subkeys in each batch of participation keys.\r\n   * @param voteLastValid - (votelst) Last round this participation key is valid.\r\n   * @param voteParticipationKey - (votekey) Participation public key used in key registration transactions.\r\n   */\r\n  constructor({\r\n    nonParticipation,\r\n    selectionParticipationKey,\r\n    stateProofKey,\r\n    voteFirstValid,\r\n    voteKeyDilution,\r\n    voteLastValid,\r\n    voteParticipationKey,\r\n  }: {\r\n    nonParticipation?: boolean;\r\n    selectionParticipationKey?: string | Uint8Array;\r\n    stateProofKey?: string | Uint8Array;\r\n    voteFirstValid?: number | bigint;\r\n    voteKeyDilution?: number | bigint;\r\n    voteLastValid?: number | bigint;\r\n    voteParticipationKey?: string | Uint8Array;\r\n  }) {\r\n    super();\r\n    this.nonParticipation = nonParticipation;\r\n    this.selectionParticipationKey =\r\n      typeof selectionParticipationKey === 'string'\r\n        ? new Uint8Array(Buffer.from(selectionParticipationKey, 'base64'))\r\n        : selectionParticipationKey;\r\n    this.stateProofKey =\r\n      typeof stateProofKey === 'string'\r\n        ? new Uint8Array(Buffer.from(stateProofKey, 'base64'))\r\n        : stateProofKey;\r\n    this.voteFirstValid = voteFirstValid;\r\n    this.voteKeyDilution = voteKeyDilution;\r\n    this.voteLastValid = voteLastValid;\r\n    this.voteParticipationKey =\r\n      typeof voteParticipationKey === 'string'\r\n        ? new Uint8Array(Buffer.from(voteParticipationKey, 'base64'))\r\n        : voteParticipationKey;\r\n\r\n    this.attribute_map = {\r\n      nonParticipation: 'non-participation',\r\n      selectionParticipationKey: 'selection-participation-key',\r\n      stateProofKey: 'state-proof-key',\r\n      voteFirstValid: 'vote-first-valid',\r\n      voteKeyDilution: 'vote-key-dilution',\r\n      voteLastValid: 'vote-last-valid',\r\n      voteParticipationKey: 'vote-participation-key',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): TransactionKeyreg {\r\n    /* eslint-disable dot-notation */\r\n    return new TransactionKeyreg({\r\n      nonParticipation: data['non-participation'],\r\n      selectionParticipationKey: data['selection-participation-key'],\r\n      stateProofKey: data['state-proof-key'],\r\n      voteFirstValid: data['vote-first-valid'],\r\n      voteKeyDilution: data['vote-key-dilution'],\r\n      voteLastValid: data['vote-last-valid'],\r\n      voteParticipationKey: data['vote-participation-key'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Fields for a payment transaction.\r\n * Definition:\r\n * data/transactions/payment.go : PaymentTxnFields\r\n */\r\nexport class TransactionPayment extends BaseModel {\r\n  /**\r\n   * (amt) number of MicroAlgos intended to be transferred.\r\n   */\r\n  public amount: number | bigint;\r\n\r\n  /**\r\n   * (rcv) receiver's address.\r\n   */\r\n  public receiver: string;\r\n\r\n  /**\r\n   * Number of MicroAlgos that were sent to the close-remainder-to address when\r\n   * closing the sender account.\r\n   */\r\n  public closeAmount?: number | bigint;\r\n\r\n  /**\r\n   * (close) when set, indicates that the sending account should be closed and all\r\n   * remaining funds be transferred to this address.\r\n   */\r\n  public closeRemainderTo?: string;\r\n\r\n  /**\r\n   * Creates a new `TransactionPayment` object.\r\n   * @param amount - (amt) number of MicroAlgos intended to be transferred.\r\n   * @param receiver - (rcv) receiver's address.\r\n   * @param closeAmount - Number of MicroAlgos that were sent to the close-remainder-to address when\r\n   * closing the sender account.\r\n   * @param closeRemainderTo - (close) when set, indicates that the sending account should be closed and all\r\n   * remaining funds be transferred to this address.\r\n   */\r\n  constructor({\r\n    amount,\r\n    receiver,\r\n    closeAmount,\r\n    closeRemainderTo,\r\n  }: {\r\n    amount: number | bigint;\r\n    receiver: string;\r\n    closeAmount?: number | bigint;\r\n    closeRemainderTo?: string;\r\n  }) {\r\n    super();\r\n    this.amount = amount;\r\n    this.receiver = receiver;\r\n    this.closeAmount = closeAmount;\r\n    this.closeRemainderTo = closeRemainderTo;\r\n\r\n    this.attribute_map = {\r\n      amount: 'amount',\r\n      receiver: 'receiver',\r\n      closeAmount: 'close-amount',\r\n      closeRemainderTo: 'close-remainder-to',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): TransactionPayment {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['amount'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'amount': ${data}`);\r\n    if (typeof data['receiver'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'receiver': ${data}`);\r\n    return new TransactionPayment({\r\n      amount: data['amount'],\r\n      receiver: data['receiver'],\r\n      closeAmount: data['close-amount'],\r\n      closeRemainderTo: data['close-remainder-to'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport class TransactionResponse extends BaseModel {\r\n  /**\r\n   * Round at which the results were computed.\r\n   */\r\n  public currentRound: number | bigint;\r\n\r\n  /**\r\n   * Contains all fields common to all transactions and serves as an envelope to all\r\n   * transactions type. Represents both regular and inner transactions.\r\n   * Definition:\r\n   * data/transactions/signedtxn.go : SignedTxn\r\n   * data/transactions/transaction.go : Transaction\r\n   */\r\n  public transaction: Transaction;\r\n\r\n  /**\r\n   * Creates a new `TransactionResponse` object.\r\n   * @param currentRound - Round at which the results were computed.\r\n   * @param transaction - Contains all fields common to all transactions and serves as an envelope to all\r\n   * transactions type. Represents both regular and inner transactions.\r\n   * Definition:\r\n   * data/transactions/signedtxn.go : SignedTxn\r\n   * data/transactions/transaction.go : Transaction\r\n   */\r\n  constructor({\r\n    currentRound,\r\n    transaction,\r\n  }: {\r\n    currentRound: number | bigint;\r\n    transaction: Transaction;\r\n  }) {\r\n    super();\r\n    this.currentRound = currentRound;\r\n    this.transaction = transaction;\r\n\r\n    this.attribute_map = {\r\n      currentRound: 'current-round',\r\n      transaction: 'transaction',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(data: Record<string, any>): TransactionResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['current-round'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'current-round': ${data}`\r\n      );\r\n    if (typeof data['transaction'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'transaction': ${data}`\r\n      );\r\n    return new TransactionResponse({\r\n      currentRound: data['current-round'],\r\n      transaction: Transaction.from_obj_for_encoding(data['transaction']),\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Validation signature associated with some data. Only one of the signatures\r\n * should be provided.\r\n */\r\nexport class TransactionSignature extends BaseModel {\r\n  /**\r\n   * (lsig) Programatic transaction signature.\r\n   * Definition:\r\n   * data/transactions/logicsig.go\r\n   */\r\n  public logicsig?: TransactionSignatureLogicsig;\r\n\r\n  /**\r\n   * (msig) structure holding multiple subsignatures.\r\n   * Definition:\r\n   * crypto/multisig.go : MultisigSig\r\n   */\r\n  public multisig?: TransactionSignatureMultisig;\r\n\r\n  /**\r\n   * (sig) Standard ed25519 signature.\r\n   */\r\n  public sig?: Uint8Array;\r\n\r\n  /**\r\n   * Creates a new `TransactionSignature` object.\r\n   * @param logicsig - (lsig) Programatic transaction signature.\r\n   * Definition:\r\n   * data/transactions/logicsig.go\r\n   * @param multisig - (msig) structure holding multiple subsignatures.\r\n   * Definition:\r\n   * crypto/multisig.go : MultisigSig\r\n   * @param sig - (sig) Standard ed25519 signature.\r\n   */\r\n  constructor({\r\n    logicsig,\r\n    multisig,\r\n    sig,\r\n  }: {\r\n    logicsig?: TransactionSignatureLogicsig;\r\n    multisig?: TransactionSignatureMultisig;\r\n    sig?: string | Uint8Array;\r\n  }) {\r\n    super();\r\n    this.logicsig = logicsig;\r\n    this.multisig = multisig;\r\n    this.sig =\r\n      typeof sig === 'string'\r\n        ? new Uint8Array(Buffer.from(sig, 'base64'))\r\n        : sig;\r\n\r\n    this.attribute_map = {\r\n      logicsig: 'logicsig',\r\n      multisig: 'multisig',\r\n      sig: 'sig',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): TransactionSignature {\r\n    /* eslint-disable dot-notation */\r\n    return new TransactionSignature({\r\n      logicsig:\r\n        typeof data['logicsig'] !== 'undefined'\r\n          ? TransactionSignatureLogicsig.from_obj_for_encoding(data['logicsig'])\r\n          : undefined,\r\n      multisig:\r\n        typeof data['multisig'] !== 'undefined'\r\n          ? TransactionSignatureMultisig.from_obj_for_encoding(data['multisig'])\r\n          : undefined,\r\n      sig: data['sig'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * (lsig) Programatic transaction signature.\r\n * Definition:\r\n * data/transactions/logicsig.go\r\n */\r\nexport class TransactionSignatureLogicsig extends BaseModel {\r\n  /**\r\n   * (l) Program signed by a signature or multi signature, or hashed to be the\r\n   * address of ana ccount. Base64 encoded TEAL program.\r\n   */\r\n  public logic: Uint8Array;\r\n\r\n  /**\r\n   * (arg) Logic arguments, base64 encoded.\r\n   */\r\n  public args?: Uint8Array[];\r\n\r\n  /**\r\n   * (msig) structure holding multiple subsignatures.\r\n   * Definition:\r\n   * crypto/multisig.go : MultisigSig\r\n   */\r\n  public multisigSignature?: TransactionSignatureMultisig;\r\n\r\n  /**\r\n   * (sig) ed25519 signature.\r\n   */\r\n  public signature?: Uint8Array;\r\n\r\n  /**\r\n   * Creates a new `TransactionSignatureLogicsig` object.\r\n   * @param logic - (l) Program signed by a signature or multi signature, or hashed to be the\r\n   * address of ana ccount. Base64 encoded TEAL program.\r\n   * @param args - (arg) Logic arguments, base64 encoded.\r\n   * @param multisigSignature - (msig) structure holding multiple subsignatures.\r\n   * Definition:\r\n   * crypto/multisig.go : MultisigSig\r\n   * @param signature - (sig) ed25519 signature.\r\n   */\r\n  constructor({\r\n    logic,\r\n    args,\r\n    multisigSignature,\r\n    signature,\r\n  }: {\r\n    logic: string | Uint8Array;\r\n    args?: Uint8Array[];\r\n    multisigSignature?: TransactionSignatureMultisig;\r\n    signature?: string | Uint8Array;\r\n  }) {\r\n    super();\r\n    this.logic =\r\n      typeof logic === 'string'\r\n        ? new Uint8Array(Buffer.from(logic, 'base64'))\r\n        : logic;\r\n    this.args = args;\r\n    this.multisigSignature = multisigSignature;\r\n    this.signature =\r\n      typeof signature === 'string'\r\n        ? new Uint8Array(Buffer.from(signature, 'base64'))\r\n        : signature;\r\n\r\n    this.attribute_map = {\r\n      logic: 'logic',\r\n      args: 'args',\r\n      multisigSignature: 'multisig-signature',\r\n      signature: 'signature',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): TransactionSignatureLogicsig {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['logic'] === 'undefined')\r\n      throw new Error(`Response is missing required field 'logic': ${data}`);\r\n    return new TransactionSignatureLogicsig({\r\n      logic: data['logic'],\r\n      args: data['args'],\r\n      multisigSignature:\r\n        typeof data['multisig-signature'] !== 'undefined'\r\n          ? TransactionSignatureMultisig.from_obj_for_encoding(\r\n              data['multisig-signature']\r\n            )\r\n          : undefined,\r\n      signature: data['signature'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * (msig) structure holding multiple subsignatures.\r\n * Definition:\r\n * crypto/multisig.go : MultisigSig\r\n */\r\nexport class TransactionSignatureMultisig extends BaseModel {\r\n  /**\r\n   * (subsig) holds pairs of public key and signatures.\r\n   */\r\n  public subsignature?: TransactionSignatureMultisigSubsignature[];\r\n\r\n  /**\r\n   * (thr)\r\n   */\r\n  public threshold?: number | bigint;\r\n\r\n  /**\r\n   * (v)\r\n   */\r\n  public version?: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `TransactionSignatureMultisig` object.\r\n   * @param subsignature - (subsig) holds pairs of public key and signatures.\r\n   * @param threshold - (thr)\r\n   * @param version - (v)\r\n   */\r\n  constructor({\r\n    subsignature,\r\n    threshold,\r\n    version,\r\n  }: {\r\n    subsignature?: TransactionSignatureMultisigSubsignature[];\r\n    threshold?: number | bigint;\r\n    version?: number | bigint;\r\n  }) {\r\n    super();\r\n    this.subsignature = subsignature;\r\n    this.threshold = threshold;\r\n    this.version = version;\r\n\r\n    this.attribute_map = {\r\n      subsignature: 'subsignature',\r\n      threshold: 'threshold',\r\n      version: 'version',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): TransactionSignatureMultisig {\r\n    /* eslint-disable dot-notation */\r\n    return new TransactionSignatureMultisig({\r\n      subsignature:\r\n        typeof data['subsignature'] !== 'undefined'\r\n          ? data['subsignature'].map(\r\n              TransactionSignatureMultisigSubsignature.from_obj_for_encoding\r\n            )\r\n          : undefined,\r\n      threshold: data['threshold'],\r\n      version: data['version'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\nexport class TransactionSignatureMultisigSubsignature extends BaseModel {\r\n  /**\r\n   * (pk)\r\n   */\r\n  public publicKey?: Uint8Array;\r\n\r\n  /**\r\n   * (s)\r\n   */\r\n  public signature?: Uint8Array;\r\n\r\n  /**\r\n   * Creates a new `TransactionSignatureMultisigSubsignature` object.\r\n   * @param publicKey - (pk)\r\n   * @param signature - (s)\r\n   */\r\n  constructor({\r\n    publicKey,\r\n    signature,\r\n  }: {\r\n    publicKey?: string | Uint8Array;\r\n    signature?: string | Uint8Array;\r\n  }) {\r\n    super();\r\n    this.publicKey =\r\n      typeof publicKey === 'string'\r\n        ? new Uint8Array(Buffer.from(publicKey, 'base64'))\r\n        : publicKey;\r\n    this.signature =\r\n      typeof signature === 'string'\r\n        ? new Uint8Array(Buffer.from(signature, 'base64'))\r\n        : signature;\r\n\r\n    this.attribute_map = {\r\n      publicKey: 'public-key',\r\n      signature: 'signature',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): TransactionSignatureMultisigSubsignature {\r\n    /* eslint-disable dot-notation */\r\n    return new TransactionSignatureMultisigSubsignature({\r\n      publicKey: data['public-key'],\r\n      signature: data['signature'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n * Fields for a state proof transaction.\r\n * Definition:\r\n * data/transactions/stateproof.go : StateProofTxnFields\r\n */\r\nexport class TransactionStateProof extends BaseModel {\r\n  /**\r\n   * (spmsg)\r\n   */\r\n  public message?: IndexerStateProofMessage;\r\n\r\n  /**\r\n   * (sp) represents a state proof.\r\n   * Definition:\r\n   * crypto/stateproof/structs.go : StateProof\r\n   */\r\n  public stateProof?: StateProofFields;\r\n\r\n  /**\r\n   * (sptype) Type of the state proof. Integer representing an entry defined in\r\n   * protocol/stateproof.go\r\n   */\r\n  public stateProofType?: number | bigint;\r\n\r\n  /**\r\n   * Creates a new `TransactionStateProof` object.\r\n   * @param message - (spmsg)\r\n   * @param stateProof - (sp) represents a state proof.\r\n   * Definition:\r\n   * crypto/stateproof/structs.go : StateProof\r\n   * @param stateProofType - (sptype) Type of the state proof. Integer representing an entry defined in\r\n   * protocol/stateproof.go\r\n   */\r\n  constructor({\r\n    message,\r\n    stateProof,\r\n    stateProofType,\r\n  }: {\r\n    message?: IndexerStateProofMessage;\r\n    stateProof?: StateProofFields;\r\n    stateProofType?: number | bigint;\r\n  }) {\r\n    super();\r\n    this.message = message;\r\n    this.stateProof = stateProof;\r\n    this.stateProofType = stateProofType;\r\n\r\n    this.attribute_map = {\r\n      message: 'message',\r\n      stateProof: 'state-proof',\r\n      stateProofType: 'state-proof-type',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): TransactionStateProof {\r\n    /* eslint-disable dot-notation */\r\n    return new TransactionStateProof({\r\n      message:\r\n        typeof data['message'] !== 'undefined'\r\n          ? IndexerStateProofMessage.from_obj_for_encoding(data['message'])\r\n          : undefined,\r\n      stateProof:\r\n        typeof data['state-proof'] !== 'undefined'\r\n          ? StateProofFields.from_obj_for_encoding(data['state-proof'])\r\n          : undefined,\r\n      stateProofType: data['state-proof-type'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport class TransactionsResponse extends BaseModel {\r\n  /**\r\n   * Round at which the results were computed.\r\n   */\r\n  public currentRound: number | bigint;\r\n\r\n  public transactions: Transaction[];\r\n\r\n  /**\r\n   * Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\r\n  public nextToken?: string;\r\n\r\n  /**\r\n   * Creates a new `TransactionsResponse` object.\r\n   * @param currentRound - Round at which the results were computed.\r\n   * @param transactions -\r\n   * @param nextToken - Used for pagination, when making another request provide this token with the\r\n   * next parameter.\r\n   */\r\n  constructor({\r\n    currentRound,\r\n    transactions,\r\n    nextToken,\r\n  }: {\r\n    currentRound: number | bigint;\r\n    transactions: Transaction[];\r\n    nextToken?: string;\r\n  }) {\r\n    super();\r\n    this.currentRound = currentRound;\r\n    this.transactions = transactions;\r\n    this.nextToken = nextToken;\r\n\r\n    this.attribute_map = {\r\n      currentRound: 'current-round',\r\n      transactions: 'transactions',\r\n      nextToken: 'next-token',\r\n    };\r\n  }\r\n\r\n  // eslint-disable-next-line camelcase\r\n  static from_obj_for_encoding(\r\n    data: Record<string, any>\r\n  ): TransactionsResponse {\r\n    /* eslint-disable dot-notation */\r\n    if (typeof data['current-round'] === 'undefined')\r\n      throw new Error(\r\n        `Response is missing required field 'current-round': ${data}`\r\n      );\r\n    if (!Array.isArray(data['transactions']))\r\n      throw new Error(\r\n        `Response is missing required array field 'transactions': ${data}`\r\n      );\r\n    return new TransactionsResponse({\r\n      currentRound: data['current-round'],\r\n      transactions: data['transactions'].map(Transaction.from_obj_for_encoding),\r\n      nextToken: data['next-token'],\r\n    });\r\n    /* eslint-enable dot-notation */\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
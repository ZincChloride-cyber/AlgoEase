{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aditya singh\\\\AlgoEase\\\\frontend\\\\src\\\\contexts\\\\WalletContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport algosdk from 'algosdk/dist/browser/algosdk.min.js';\nimport LuteConnect from 'lute-connect';\nimport { PeraWalletConnect } from '@perawallet/connect';\nimport contractUtils from '../utils/contractUtils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WalletContext = /*#__PURE__*/createContext();\n\n// Initialize wallet connections outside component to avoid re-initialization\nconst luteWallet = new LuteConnect('AlgoEase');\nconst peraWallet = new PeraWalletConnect({\n  chainId: 416002 // TestNet chain ID (416001 for MainNet)\n});\nexport const useWallet = () => {\n  _s();\n  const context = useContext(WalletContext);\n  if (!context) {\n    throw new Error('useWallet must be used within a WalletProvider');\n  }\n  return context;\n};\n_s(useWallet, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const WalletProvider = ({\n  children\n}) => {\n  _s2();\n  const [account, setAccount] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [contractState, setContractState] = useState(null);\n  const [isLoadingContract, setIsLoadingContract] = useState(false);\n  const [walletType, setWalletType] = useState(null); // 'pera' or 'lute'\n\n  // Algorand TestNet configuration\n  const algodClient = new algosdk.Algodv2('', 'https://testnet-api.algonode.cloud', '');\n\n  // Check for reconnection on mount\n  useEffect(() => {\n    // Check if Pera Wallet was previously connected\n    peraWallet.reconnectSession().then(accounts => {\n      if (accounts.length > 0) {\n        setAccount(accounts[0]);\n        setIsConnected(true);\n        setWalletType('pera');\n        console.log('Pera Wallet reconnected:', accounts[0]);\n      }\n    }).catch(error => {\n      console.log('Pera Wallet not previously connected');\n    });\n  }, []);\n  const connectWallet = async (walletId = 'pera') => {\n    try {\n      setIsConnecting(true);\n      console.log('Connecting to wallet:', walletId);\n      if (walletId === 'pera') {\n        console.log('Initializing Pera Wallet connection...');\n        // Connect to Pera Wallet\n        const accounts = await peraWallet.connect();\n        console.log('Pera Wallet returned accounts:', accounts);\n        if (accounts && accounts.length > 0) {\n          var _peraWallet$connector;\n          setAccount(accounts[0]);\n          setIsConnected(true);\n          setWalletType('pera');\n          console.log('✅ Pera Wallet connected successfully:', accounts[0]);\n\n          // Listen for disconnect events\n          (_peraWallet$connector = peraWallet.connector) === null || _peraWallet$connector === void 0 ? void 0 : _peraWallet$connector.on('disconnect', () => {\n            console.log('Pera Wallet disconnected');\n            disconnectWallet();\n          });\n          return;\n        }\n      } else if (walletId === 'lute') {\n        console.log('Initializing Lute Wallet connection...');\n        // Connect to Lute Wallet using lute-connect\n        const genesis = await algodClient.genesis().do();\n        const genesisID = `${genesis.network}-${genesis.id}`;\n        const addresses = await luteWallet.connect(genesisID);\n        if (addresses && addresses.length > 0) {\n          setAccount(addresses[0]);\n          setIsConnected(true);\n          setWalletType('lute');\n          console.log('✅ Lute Wallet connected successfully:', addresses[0]);\n          return;\n        }\n      }\n      throw new Error('Failed to connect wallet. Please try again.');\n    } catch (error) {\n      console.error('❌ Failed to connect wallet:', error);\n\n      // User-friendly error messages\n      if (error.message && error.message.includes('rejected')) {\n        alert('Connection was cancelled. Please try again.');\n      } else {\n        alert('Failed to connect wallet: ' + error.message);\n      }\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n  const disconnectWallet = async () => {\n    try {\n      if (walletType === 'pera') {\n        await peraWallet.disconnect();\n      }\n      // Lute wallet doesn't require explicit disconnect\n\n      setAccount(null);\n      setIsConnected(false);\n      setWalletType(null);\n      console.log('Wallet disconnected');\n    } catch (error) {\n      console.error('Failed to disconnect wallet:', error);\n    }\n  };\n  const signTransaction = async txn => {\n    try {\n      if (!isConnected) {\n        throw new Error('No wallet connected. Please connect your wallet first.');\n      }\n      if (walletType === 'pera') {\n        // Sign transaction using Pera Wallet\n        const txnGroup = [{\n          txn,\n          signers: [account]\n        }];\n        const signedTxns = await peraWallet.signTransaction([txnGroup]);\n        if (signedTxns && signedTxns.length > 0) {\n          return signedTxns[0];\n        } else {\n          throw new Error('Failed to sign transaction with Pera Wallet.');\n        }\n      } else if (walletType === 'lute') {\n        // Convert transaction to base64 format for Lute wallet\n        const txnBytes = algosdk.encodeUnsignedTransaction(txn);\n        const txnBase64 = btoa(String.fromCharCode(...txnBytes));\n\n        // Sign transaction using Lute wallet\n        const signedTxns = await luteWallet.signTxns([{\n          txn: txnBase64\n        }]);\n        if (signedTxns && signedTxns.length > 0) {\n          return signedTxns[0];\n        } else {\n          throw new Error('Failed to sign transaction with Lute wallet.');\n        }\n      }\n      throw new Error('Unknown wallet type.');\n    } catch (error) {\n      console.error('Failed to sign transaction:', error);\n\n      // Provide user-friendly error messages\n      if (error.message && error.message.includes('User Rejected Request')) {\n        throw new Error('Transaction signing was cancelled by user.');\n      } else if (error.message && error.message.includes('rejected')) {\n        throw new Error('Transaction signing was cancelled by user.');\n      } else if (error.message && error.message.includes('SignTxnsError')) {\n        throw new Error('Failed to sign transaction. Please check your wallet connection.');\n      } else {\n        throw error;\n      }\n    }\n  };\n  const signTransactionGroup = async txns => {\n    try {\n      if (!isConnected) {\n        throw new Error('No wallet connected. Please connect your wallet first.');\n      }\n      console.log('Signing transaction group with', txns.length, 'transactions');\n      if (walletType === 'pera') {\n        // Sign transaction group using Pera Wallet\n        // Pera Wallet expects an array of transaction groups\n        const txnsToSign = txns.map(txn => {\n          return {\n            txn: txn,\n            signers: [account]\n          };\n        });\n        console.log('Sending to Pera Wallet for signing...');\n        const signedTxns = await peraWallet.signTransaction([txnsToSign]);\n        if (signedTxns && signedTxns.length > 0) {\n          console.log('Successfully signed', signedTxns.length, 'transactions');\n          return signedTxns;\n        } else {\n          throw new Error('Failed to sign transaction group with Pera Wallet.');\n        }\n      } else if (walletType === 'lute') {\n        // Convert all transactions to base64 format for Lute wallet\n        const txnGroup = txns.map(txn => {\n          const txnBytes = algosdk.encodeUnsignedTransaction(txn);\n          const txnBase64 = btoa(String.fromCharCode(...txnBytes));\n          return {\n            txn: txnBase64\n          };\n        });\n\n        // Sign transaction group using Lute wallet\n        const signedTxns = await luteWallet.signTxns(txnGroup);\n        if (signedTxns && signedTxns.length > 0) {\n          return signedTxns;\n        } else {\n          throw new Error('Failed to sign transaction group with Lute wallet.');\n        }\n      }\n      throw new Error('Unknown wallet type.');\n    } catch (error) {\n      console.error('Failed to sign transaction group:', error);\n\n      // Provide user-friendly error messages\n      if (error.message && error.message.includes('User Rejected Request')) {\n        throw new Error('Transaction signing was cancelled by user.');\n      } else if (error.message && error.message.includes('rejected')) {\n        throw new Error('Transaction signing was cancelled by user.');\n      } else if (error.message && error.message.includes('SignTxnsError')) {\n        throw new Error('Failed to sign transaction. Please check your wallet connection.');\n      } else {\n        throw error;\n      }\n    }\n  };\n  const getAccountInfo = async () => {\n    if (!account) return null;\n    try {\n      const accountInfo = await algodClient.accountInformation(account).do();\n      return accountInfo;\n    } catch (error) {\n      console.error('Failed to get account info:', error);\n      return null;\n    }\n  };\n\n  // Smart contract functions\n  const loadContractState = async () => {\n    if (!contractUtils.getAppId()) {\n      console.warn('Contract app ID not set');\n      return null;\n    }\n    try {\n      setIsLoadingContract(true);\n      const state = await contractUtils.getCurrentBounty();\n      setContractState(state);\n      return state;\n    } catch (error) {\n      console.error('Failed to load contract state:', error);\n      setContractState(null);\n      return null;\n    } finally {\n      setIsLoadingContract(false);\n    }\n  };\n  const createBounty = async (amount, deadline, taskDescription, verifierAddress) => {\n    if (!account) {\n      throw new Error('Wallet not connected');\n    }\n    try {\n      const txns = await contractUtils.createBounty(account, amount, deadline, taskDescription, verifierAddress);\n\n      // Sign transaction group\n      const signedTxns = await signTransactionGroup(txns);\n\n      // Submit transaction group\n      const txId = await contractUtils.submitTransactionGroup(signedTxns);\n\n      // Wait for confirmation\n      await contractUtils.waitForConfirmation(txId);\n\n      // Reload contract state\n      await loadContractState();\n      return txId;\n    } catch (error) {\n      console.error('Failed to create bounty:', error);\n\n      // Provide user-friendly error messages\n      if (error.message && error.message.includes('User Rejected Request')) {\n        throw new Error('Transaction was cancelled. Please try again and approve the transaction in your wallet.');\n      } else if (error.message && error.message.includes('SignTxnsError')) {\n        throw new Error('Failed to sign transaction. Please check your wallet connection and try again.');\n      } else {\n        throw error;\n      }\n    }\n  };\n  const acceptBounty = async () => {\n    if (!account) {\n      throw new Error('Wallet not connected');\n    }\n    try {\n      const txn = await contractUtils.acceptBounty(account);\n      const signedTxn = await signTransaction(txn);\n      const txId = await contractUtils.submitTransaction(signedTxn);\n      await contractUtils.waitForConfirmation(txId);\n      await loadContractState();\n      return txId;\n    } catch (error) {\n      console.error('Failed to accept bounty:', error);\n      throw error;\n    }\n  };\n  const approveBounty = async () => {\n    if (!account) {\n      throw new Error('Wallet not connected');\n    }\n    try {\n      const txn = await contractUtils.approveBounty(account);\n      const signedTxn = await signTransaction(txn);\n      const txId = await contractUtils.submitTransaction(signedTxn);\n      await contractUtils.waitForConfirmation(txId);\n      await loadContractState();\n      return txId;\n    } catch (error) {\n      console.error('Failed to approve bounty:', error);\n      throw error;\n    }\n  };\n  const claimBounty = async () => {\n    if (!account) {\n      throw new Error('Wallet not connected');\n    }\n    try {\n      const txn = await contractUtils.claimBounty(account);\n      const signedTxn = await signTransaction(txn);\n      const txId = await contractUtils.submitTransaction(signedTxn);\n      await contractUtils.waitForConfirmation(txId);\n      await loadContractState();\n      return txId;\n    } catch (error) {\n      console.error('Failed to claim bounty:', error);\n      throw error;\n    }\n  };\n  const refundBounty = async () => {\n    if (!account) {\n      throw new Error('Wallet not connected');\n    }\n    try {\n      const txn = await contractUtils.refundBounty(account);\n      const signedTxn = await signTransaction(txn);\n      const txId = await contractUtils.submitTransaction(signedTxn);\n      await contractUtils.waitForConfirmation(txId);\n      await loadContractState();\n      return txId;\n    } catch (error) {\n      console.error('Failed to refund bounty:', error);\n      throw error;\n    }\n  };\n  const canPerformAction = action => {\n    if (!account || !contractState) return false;\n    return contractUtils.canPerformAction(account, action, contractState);\n  };\n  const value = {\n    account,\n    isConnected,\n    isConnecting,\n    walletType,\n    connectWallet,\n    disconnectWallet,\n    signTransaction,\n    signTransactionGroup,\n    getAccountInfo,\n    algodClient,\n    // Smart contract functions\n    contractState,\n    isLoadingContract,\n    loadContractState,\n    createBounty,\n    acceptBounty,\n    approveBounty,\n    claimBounty,\n    refundBounty,\n    canPerformAction\n  };\n  return /*#__PURE__*/_jsxDEV(WalletContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 420,\n    columnNumber: 5\n  }, this);\n};\n_s2(WalletProvider, \"IT8zPThmUq5yXoZ+Sl3C2nP+M2A=\");\n_c = WalletProvider;\nvar _c;\n$RefreshReg$(_c, \"WalletProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","algosdk","LuteConnect","PeraWalletConnect","contractUtils","jsxDEV","_jsxDEV","WalletContext","luteWallet","peraWallet","chainId","useWallet","_s","context","Error","WalletProvider","children","_s2","account","setAccount","isConnected","setIsConnected","isConnecting","setIsConnecting","contractState","setContractState","isLoadingContract","setIsLoadingContract","walletType","setWalletType","algodClient","Algodv2","reconnectSession","then","accounts","length","console","log","catch","error","connectWallet","walletId","connect","_peraWallet$connector","connector","on","disconnectWallet","genesis","do","genesisID","network","id","addresses","message","includes","alert","disconnect","signTransaction","txn","txnGroup","signers","signedTxns","txnBytes","encodeUnsignedTransaction","txnBase64","btoa","String","fromCharCode","signTxns","signTransactionGroup","txns","txnsToSign","map","getAccountInfo","accountInfo","accountInformation","loadContractState","getAppId","warn","state","getCurrentBounty","createBounty","amount","deadline","taskDescription","verifierAddress","txId","submitTransactionGroup","waitForConfirmation","acceptBounty","signedTxn","submitTransaction","approveBounty","claimBounty","refundBounty","canPerformAction","action","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Aditya singh/AlgoEase/frontend/src/contexts/WalletContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport algosdk from 'algosdk/dist/browser/algosdk.min.js';\r\nimport LuteConnect from 'lute-connect';\r\nimport { PeraWalletConnect } from '@perawallet/connect';\r\nimport contractUtils from '../utils/contractUtils';\r\n\r\nconst WalletContext = createContext();\r\n\r\n// Initialize wallet connections outside component to avoid re-initialization\r\nconst luteWallet = new LuteConnect('AlgoEase');\r\nconst peraWallet = new PeraWalletConnect({\r\n  chainId: 416002, // TestNet chain ID (416001 for MainNet)\r\n});\r\n\r\nexport const useWallet = () => {\r\n  const context = useContext(WalletContext);\r\n  if (!context) {\r\n    throw new Error('useWallet must be used within a WalletProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const WalletProvider = ({ children }) => {\r\n  const [account, setAccount] = useState(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [isConnecting, setIsConnecting] = useState(false);\r\n  const [contractState, setContractState] = useState(null);\r\n  const [isLoadingContract, setIsLoadingContract] = useState(false);\r\n  const [walletType, setWalletType] = useState(null); // 'pera' or 'lute'\r\n\r\n  // Algorand TestNet configuration\r\n  const algodClient = new algosdk.Algodv2(\r\n    '',\r\n    'https://testnet-api.algonode.cloud',\r\n    ''\r\n  );\r\n\r\n  // Check for reconnection on mount\r\n  useEffect(() => {\r\n    // Check if Pera Wallet was previously connected\r\n    peraWallet\r\n      .reconnectSession()\r\n      .then((accounts) => {\r\n        if (accounts.length > 0) {\r\n          setAccount(accounts[0]);\r\n          setIsConnected(true);\r\n          setWalletType('pera');\r\n          console.log('Pera Wallet reconnected:', accounts[0]);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log('Pera Wallet not previously connected');\r\n      });\r\n  }, []);\r\n\r\n  const connectWallet = async (walletId = 'pera') => {\r\n    try {\r\n      setIsConnecting(true);\r\n      console.log('Connecting to wallet:', walletId);\r\n      \r\n      if (walletId === 'pera') {\r\n        console.log('Initializing Pera Wallet connection...');\r\n        // Connect to Pera Wallet\r\n        const accounts = await peraWallet.connect();\r\n        console.log('Pera Wallet returned accounts:', accounts);\r\n        \r\n        if (accounts && accounts.length > 0) {\r\n          setAccount(accounts[0]);\r\n          setIsConnected(true);\r\n          setWalletType('pera');\r\n          console.log('✅ Pera Wallet connected successfully:', accounts[0]);\r\n          \r\n          // Listen for disconnect events\r\n          peraWallet.connector?.on('disconnect', () => {\r\n            console.log('Pera Wallet disconnected');\r\n            disconnectWallet();\r\n          });\r\n          \r\n          return;\r\n        }\r\n      } else if (walletId === 'lute') {\r\n        console.log('Initializing Lute Wallet connection...');\r\n        // Connect to Lute Wallet using lute-connect\r\n        const genesis = await algodClient.genesis().do();\r\n        const genesisID = `${genesis.network}-${genesis.id}`;\r\n        const addresses = await luteWallet.connect(genesisID);\r\n        \r\n        if (addresses && addresses.length > 0) {\r\n          setAccount(addresses[0]);\r\n          setIsConnected(true);\r\n          setWalletType('lute');\r\n          console.log('✅ Lute Wallet connected successfully:', addresses[0]);\r\n          return;\r\n        }\r\n      }\r\n      \r\n      throw new Error('Failed to connect wallet. Please try again.');\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Failed to connect wallet:', error);\r\n      \r\n      // User-friendly error messages\r\n      if (error.message && error.message.includes('rejected')) {\r\n        alert('Connection was cancelled. Please try again.');\r\n      } else {\r\n        alert('Failed to connect wallet: ' + error.message);\r\n      }\r\n    } finally {\r\n      setIsConnecting(false);\r\n    }\r\n  };\r\n\r\n\r\n  const disconnectWallet = async () => {\r\n    try {\r\n      if (walletType === 'pera') {\r\n        await peraWallet.disconnect();\r\n      }\r\n      // Lute wallet doesn't require explicit disconnect\r\n      \r\n      setAccount(null);\r\n      setIsConnected(false);\r\n      setWalletType(null);\r\n      console.log('Wallet disconnected');\r\n    } catch (error) {\r\n      console.error('Failed to disconnect wallet:', error);\r\n    }\r\n  };\r\n\r\n  const signTransaction = async (txn) => {\r\n    try {\r\n      if (!isConnected) {\r\n        throw new Error('No wallet connected. Please connect your wallet first.');\r\n      }\r\n      \r\n      if (walletType === 'pera') {\r\n        // Sign transaction using Pera Wallet\r\n        const txnGroup = [{ txn, signers: [account] }];\r\n        const signedTxns = await peraWallet.signTransaction([txnGroup]);\r\n        \r\n        if (signedTxns && signedTxns.length > 0) {\r\n          return signedTxns[0];\r\n        } else {\r\n          throw new Error('Failed to sign transaction with Pera Wallet.');\r\n        }\r\n      } else if (walletType === 'lute') {\r\n        // Convert transaction to base64 format for Lute wallet\r\n        const txnBytes = algosdk.encodeUnsignedTransaction(txn);\r\n        const txnBase64 = btoa(String.fromCharCode(...txnBytes));\r\n        \r\n        // Sign transaction using Lute wallet\r\n        const signedTxns = await luteWallet.signTxns([{ txn: txnBase64 }]);\r\n        \r\n        if (signedTxns && signedTxns.length > 0) {\r\n          return signedTxns[0];\r\n        } else {\r\n          throw new Error('Failed to sign transaction with Lute wallet.');\r\n        }\r\n      }\r\n      \r\n      throw new Error('Unknown wallet type.');\r\n    } catch (error) {\r\n      console.error('Failed to sign transaction:', error);\r\n      \r\n      // Provide user-friendly error messages\r\n      if (error.message && error.message.includes('User Rejected Request')) {\r\n        throw new Error('Transaction signing was cancelled by user.');\r\n      } else if (error.message && error.message.includes('rejected')) {\r\n        throw new Error('Transaction signing was cancelled by user.');\r\n      } else if (error.message && error.message.includes('SignTxnsError')) {\r\n        throw new Error('Failed to sign transaction. Please check your wallet connection.');\r\n      } else {\r\n        throw error;\r\n      }\r\n    }\r\n  };\r\n\r\n  const signTransactionGroup = async (txns) => {\r\n    try {\r\n      if (!isConnected) {\r\n        throw new Error('No wallet connected. Please connect your wallet first.');\r\n      }\r\n      \r\n      console.log('Signing transaction group with', txns.length, 'transactions');\r\n      \r\n      if (walletType === 'pera') {\r\n        // Sign transaction group using Pera Wallet\r\n        // Pera Wallet expects an array of transaction groups\r\n        const txnsToSign = txns.map((txn) => {\r\n          return { txn: txn, signers: [account] };\r\n        });\r\n        \r\n        console.log('Sending to Pera Wallet for signing...');\r\n        const signedTxns = await peraWallet.signTransaction([txnsToSign]);\r\n        \r\n        if (signedTxns && signedTxns.length > 0) {\r\n          console.log('Successfully signed', signedTxns.length, 'transactions');\r\n          return signedTxns;\r\n        } else {\r\n          throw new Error('Failed to sign transaction group with Pera Wallet.');\r\n        }\r\n      } else if (walletType === 'lute') {\r\n        // Convert all transactions to base64 format for Lute wallet\r\n        const txnGroup = txns.map(txn => {\r\n          const txnBytes = algosdk.encodeUnsignedTransaction(txn);\r\n          const txnBase64 = btoa(String.fromCharCode(...txnBytes));\r\n          return { txn: txnBase64 };\r\n        });\r\n        \r\n        // Sign transaction group using Lute wallet\r\n        const signedTxns = await luteWallet.signTxns(txnGroup);\r\n        \r\n        if (signedTxns && signedTxns.length > 0) {\r\n          return signedTxns;\r\n        } else {\r\n          throw new Error('Failed to sign transaction group with Lute wallet.');\r\n        }\r\n      }\r\n      \r\n      throw new Error('Unknown wallet type.');\r\n    } catch (error) {\r\n      console.error('Failed to sign transaction group:', error);\r\n      \r\n      // Provide user-friendly error messages\r\n      if (error.message && error.message.includes('User Rejected Request')) {\r\n        throw new Error('Transaction signing was cancelled by user.');\r\n      } else if (error.message && error.message.includes('rejected')) {\r\n        throw new Error('Transaction signing was cancelled by user.');\r\n      } else if (error.message && error.message.includes('SignTxnsError')) {\r\n        throw new Error('Failed to sign transaction. Please check your wallet connection.');\r\n      } else {\r\n        throw error;\r\n      }\r\n    }\r\n  };\r\n\r\n  const getAccountInfo = async () => {\r\n    if (!account) return null;\r\n    \r\n    try {\r\n      const accountInfo = await algodClient.accountInformation(account).do();\r\n      return accountInfo;\r\n    } catch (error) {\r\n      console.error('Failed to get account info:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Smart contract functions\r\n  const loadContractState = async () => {\r\n    if (!contractUtils.getAppId()) {\r\n      console.warn('Contract app ID not set');\r\n      return null;\r\n    }\r\n\r\n    try {\r\n      setIsLoadingContract(true);\r\n      const state = await contractUtils.getCurrentBounty();\r\n      setContractState(state);\r\n      return state;\r\n    } catch (error) {\r\n      console.error('Failed to load contract state:', error);\r\n      setContractState(null);\r\n      return null;\r\n    } finally {\r\n      setIsLoadingContract(false);\r\n    }\r\n  };\r\n\r\n  const createBounty = async (amount, deadline, taskDescription, verifierAddress) => {\r\n    if (!account) {\r\n      throw new Error('Wallet not connected');\r\n    }\r\n\r\n    try {\r\n      const txns = await contractUtils.createBounty(\r\n        account,\r\n        amount,\r\n        deadline,\r\n        taskDescription,\r\n        verifierAddress\r\n      );\r\n\r\n      // Sign transaction group\r\n      const signedTxns = await signTransactionGroup(txns);\r\n\r\n      // Submit transaction group\r\n      const txId = await contractUtils.submitTransactionGroup(signedTxns);\r\n      \r\n      // Wait for confirmation\r\n      await contractUtils.waitForConfirmation(txId);\r\n      \r\n      // Reload contract state\r\n      await loadContractState();\r\n      \r\n      return txId;\r\n    } catch (error) {\r\n      console.error('Failed to create bounty:', error);\r\n      \r\n      // Provide user-friendly error messages\r\n      if (error.message && error.message.includes('User Rejected Request')) {\r\n        throw new Error('Transaction was cancelled. Please try again and approve the transaction in your wallet.');\r\n      } else if (error.message && error.message.includes('SignTxnsError')) {\r\n        throw new Error('Failed to sign transaction. Please check your wallet connection and try again.');\r\n      } else {\r\n        throw error;\r\n      }\r\n    }\r\n  };\r\n\r\n  const acceptBounty = async () => {\r\n    if (!account) {\r\n      throw new Error('Wallet not connected');\r\n    }\r\n\r\n    try {\r\n      const txn = await contractUtils.acceptBounty(account);\r\n      const signedTxn = await signTransaction(txn);\r\n      const txId = await contractUtils.submitTransaction(signedTxn);\r\n      \r\n      await contractUtils.waitForConfirmation(txId);\r\n      await loadContractState();\r\n      \r\n      return txId;\r\n    } catch (error) {\r\n      console.error('Failed to accept bounty:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const approveBounty = async () => {\r\n    if (!account) {\r\n      throw new Error('Wallet not connected');\r\n    }\r\n\r\n    try {\r\n      const txn = await contractUtils.approveBounty(account);\r\n      const signedTxn = await signTransaction(txn);\r\n      const txId = await contractUtils.submitTransaction(signedTxn);\r\n      \r\n      await contractUtils.waitForConfirmation(txId);\r\n      await loadContractState();\r\n      \r\n      return txId;\r\n    } catch (error) {\r\n      console.error('Failed to approve bounty:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const claimBounty = async () => {\r\n    if (!account) {\r\n      throw new Error('Wallet not connected');\r\n    }\r\n\r\n    try {\r\n      const txn = await contractUtils.claimBounty(account);\r\n      const signedTxn = await signTransaction(txn);\r\n      const txId = await contractUtils.submitTransaction(signedTxn);\r\n      \r\n      await contractUtils.waitForConfirmation(txId);\r\n      await loadContractState();\r\n      \r\n      return txId;\r\n    } catch (error) {\r\n      console.error('Failed to claim bounty:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const refundBounty = async () => {\r\n    if (!account) {\r\n      throw new Error('Wallet not connected');\r\n    }\r\n\r\n    try {\r\n      const txn = await contractUtils.refundBounty(account);\r\n      const signedTxn = await signTransaction(txn);\r\n      const txId = await contractUtils.submitTransaction(signedTxn);\r\n      \r\n      await contractUtils.waitForConfirmation(txId);\r\n      await loadContractState();\r\n      \r\n      return txId;\r\n    } catch (error) {\r\n      console.error('Failed to refund bounty:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const canPerformAction = (action) => {\r\n    if (!account || !contractState) return false;\r\n    return contractUtils.canPerformAction(account, action, contractState);\r\n  };\r\n\r\n  const value = {\r\n    account,\r\n    isConnected,\r\n    isConnecting,\r\n    walletType,\r\n    connectWallet,\r\n    disconnectWallet,\r\n    signTransaction,\r\n    signTransactionGroup,\r\n    getAccountInfo,\r\n    algodClient,\r\n    // Smart contract functions\r\n    contractState,\r\n    isLoadingContract,\r\n    loadContractState,\r\n    createBounty,\r\n    acceptBounty,\r\n    approveBounty,\r\n    claimBounty,\r\n    refundBounty,\r\n    canPerformAction\r\n  };\r\n\r\n  return (\r\n    <WalletContext.Provider value={value}>\r\n      {children}\r\n    </WalletContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
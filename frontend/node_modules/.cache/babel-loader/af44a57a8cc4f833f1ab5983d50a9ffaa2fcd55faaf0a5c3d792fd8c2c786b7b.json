{"ast":null,"code":"import JSONRequest from '../jsonrequest';\nexport default class LookupBlock extends JSONRequest {\n  /**\r\n   * Returns the block for the passed round.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const targetBlock = 18309917;\r\n   * const blockInfo = await indexerClient.lookupBlock(targetBlock).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2blocksround-number)\r\n   * @param round - The number of the round to look up.\r\n   * @category GET\r\n   */\n  constructor(c, intDecoding, round) {\n    super(c, intDecoding);\n    this.round = round;\n    this.round = round;\n  }\n  /**\r\n   * @returns `/v2/blocks/${round}`\r\n   */\n  path() {\n    return `/v2/blocks/${this.round}`;\n  }\n  /**\r\n   * Header only flag. When this is set to true, returned block does not contain the\r\n   * transactions.\r\n   */\n  headerOnly(headerOnly) {\n    this.query['header-only'] = headerOnly;\n    return this;\n  }\n}","map":{"version":3,"names":["JSONRequest","LookupBlock","constructor","c","intDecoding","round","path","headerOnly","query"],"sources":["C:\\Users\\Aditya singh\\AlgoEase\\frontend\\node_modules\\algosdk\\src\\client\\v2\\indexer\\lookupBlock.ts"],"sourcesContent":["import JSONRequest from '../jsonrequest';\r\nimport HTTPClient from '../../client';\r\nimport IntDecoding from '../../../types/intDecoding';\r\n\r\nexport default class LookupBlock extends JSONRequest {\r\n  /**\r\n   * Returns the block for the passed round.\r\n   *\r\n   * #### Example\r\n   * ```typescript\r\n   * const targetBlock = 18309917;\r\n   * const blockInfo = await indexerClient.lookupBlock(targetBlock).do();\r\n   * ```\r\n   *\r\n   * [Response data schema details](https://developer.algorand.org/docs/rest-apis/indexer/#get-v2blocksround-number)\r\n   * @param round - The number of the round to look up.\r\n   * @category GET\r\n   */\r\n  constructor(c: HTTPClient, intDecoding: IntDecoding, private round: number) {\r\n    super(c, intDecoding);\r\n    this.round = round;\r\n  }\r\n\r\n  /**\r\n   * @returns `/v2/blocks/${round}`\r\n   */\r\n  path() {\r\n    return `/v2/blocks/${this.round}`;\r\n  }\r\n\r\n  /**\r\n   * Header only flag. When this is set to true, returned block does not contain the\r\n   * transactions.\r\n   */\r\n  headerOnly(headerOnly: boolean) {\r\n    this.query['header-only'] = headerOnly;\r\n    return this;\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,gBAAgB;AAIxC,eAAc,MAAOC,WAAY,SAAQD,WAAW;EAClD;;;;;;;;;;;;;EAaAE,YAAYC,CAAa,EAAEC,WAAwB,EAAUC,KAAa;IACxE,KAAK,CAACF,CAAC,EAAEC,WAAW,CAAC;IADsC,KAAAC,KAAK,GAALA,KAAK;IAEhE,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;EAEA;;;EAGAC,IAAIA,CAAA;IACF,OAAO,cAAc,IAAI,CAACD,KAAK,EAAE;EACnC;EAEA;;;;EAIAE,UAAUA,CAACA,UAAmB;IAC5B,IAAI,CAACC,KAAK,CAAC,aAAa,CAAC,GAAGD,UAAU;IACtC,OAAO,IAAI;EACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
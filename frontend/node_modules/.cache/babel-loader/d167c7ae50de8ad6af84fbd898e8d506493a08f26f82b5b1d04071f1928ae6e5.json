{"ast":null,"code":"class SignTxnsError extends Error {\n  code;\n  data;\n  constructor(message, code, data) {\n    super(message);\n    this.name = \"SignTxnsError\";\n    this.code = code;\n    this.data = data;\n  }\n}\nvar ScopeType;\n(function (ScopeType) {\n  ScopeType[ScopeType[\"UNKNOWN\"] = -1] = \"UNKNOWN\";\n  ScopeType[ScopeType[\"AUTH\"] = 1] = \"AUTH\";\n})(ScopeType || (ScopeType = {}));\nclass SignDataError extends Error {\n  code;\n  data;\n  constructor(message, code, data) {\n    super(message);\n    this.name = \"SignDataError\";\n    this.code = code;\n    this.data = data;\n  }\n}\nconst left = 100 + window.screenX;\nconst top = 100 + window.screenY;\nconst PARAMS = `width=500,height=750,left=${left},top=${top}`;\nconst BASE_URL = \"https://lute.app\";\nconst EXT_ID = \"kiaoohollfkjhikdifohdckeidckokjh\";\nclass LuteConnect {\n  siteName;\n  forceWeb = false;\n  constructor(siteName) {\n    this.siteName = siteName || document.title || \"Unknown site\";\n  }\n  connect(genesisID) {\n    return new Promise(async (resolve, reject) => {\n      const useExt = this.forceWeb ? false : window.lute;\n      let win;\n      if (useExt) {\n        window.dispatchEvent(new CustomEvent(\"lute-connect\", {\n          detail: {\n            action: \"connect\",\n            genesisID\n          }\n        }));\n      } else {\n        win = open(`${BASE_URL}/connect`, this.siteName, PARAMS);\n      }\n      const type = useExt ? \"connect-response\" : \"message\";\n      window.addEventListener(type, messageHandler);\n      function messageHandler(event) {\n        if (!useExt && event.origin !== BASE_URL) return;\n        const data = event.data || event.detail;\n        if (data.debug) console.log(\"[Lute Debug]\", data);\n        switch (data.action) {\n          case \"ready\":\n            win?.postMessage({\n              action: \"network\",\n              genesisID\n            }, \"*\");\n            break;\n          case \"connect\":\n            window.removeEventListener(type, messageHandler);\n            resolve(data.addrs);\n            break;\n          case \"error\":\n            window.removeEventListener(type, messageHandler);\n            reject(new Error(data.message));\n            break;\n          case \"close\":\n            window.removeEventListener(type, messageHandler);\n            reject(new Error(\"Operation Cancelled\"));\n            break;\n        }\n      }\n    });\n  }\n  signTxns(txns) {\n    return new Promise(async (resolve, reject) => {\n      const useExt = this.forceWeb ? false : window.lute;\n      let win;\n      if (useExt) {\n        window.dispatchEvent(new CustomEvent(\"lute-connect\", {\n          detail: {\n            action: \"sign\",\n            txns\n          }\n        }));\n      } else {\n        win = open(`${BASE_URL}/sign`, this.siteName, PARAMS);\n      }\n      const type = useExt ? \"sign-txns-response\" : \"message\";\n      window.addEventListener(type, messageHandler);\n      function messageHandler(event) {\n        if (!useExt && event.origin !== BASE_URL) return;\n        const detail = event.data || event.detail;\n        if (detail.debug) console.log(\"[Lute Debug]\", detail);\n        switch (detail.action) {\n          case \"ready\":\n            win?.postMessage({\n              action: \"sign\",\n              txns\n            }, \"*\");\n            break;\n          case \"signed\":\n            window.removeEventListener(type, messageHandler);\n            resolve(detail.txns);\n            break;\n          case \"error\":\n            window.removeEventListener(type, messageHandler);\n            reject(new SignTxnsError(detail.message, detail.code || 4300));\n            break;\n          case \"close\":\n            window.removeEventListener(type, messageHandler);\n            reject(new SignTxnsError(\"User Rejected Request\", 4100));\n            break;\n        }\n      }\n    });\n  }\n  signData(data, metadata) {\n    return new Promise(async (resolve, reject) => {\n      const useExt = this.forceWeb ? false : window.lute;\n      let win;\n      if (useExt) {\n        window.dispatchEvent(new CustomEvent(\"lute-connect\", {\n          detail: {\n            action: \"data\",\n            data,\n            metadata\n          }\n        }));\n      } else {\n        win = open(`${BASE_URL}/auth`, this.siteName, PARAMS);\n      }\n      const type = useExt ? \"sign-data-response\" : \"message\";\n      window.addEventListener(type, messageHandler);\n      function messageHandler(event) {\n        if (!useExt && event.origin !== BASE_URL) return;\n        const detail = event.data || event.detail;\n        if (detail.debug) console.log(\"[Lute Debug]\", detail);\n        switch (detail.action) {\n          case \"ready\":\n            win?.postMessage({\n              action: \"data\",\n              data,\n              metadata\n            }, \"*\");\n            break;\n          case \"signed\":\n            window.removeEventListener(type, messageHandler);\n            resolve(detail.signerResponse);\n            break;\n          case \"error\":\n            window.removeEventListener(type, messageHandler);\n            reject(new SignDataError(detail.message, detail.code || 4300));\n            break;\n          case \"close\":\n            window.removeEventListener(type, messageHandler);\n            reject(new SignDataError(\"User Rejected Request\", 4100));\n            break;\n        }\n      }\n    });\n  }\n}\nexport { BASE_URL, EXT_ID, ScopeType, SignDataError, SignTxnsError, LuteConnect as default };","map":{"version":3,"names":["SignTxnsError","Error","code","data","constructor","message","name","ScopeType","SignDataError","left","window","screenX","top","screenY","PARAMS","BASE_URL","EXT_ID","LuteConnect","siteName","forceWeb","document","title","connect","genesisID","Promise","resolve","reject","useExt","lute","win","dispatchEvent","CustomEvent","detail","action","open","type","addEventListener","messageHandler","event","origin","debug","console","log","postMessage","removeEventListener","addrs","signTxns","txns","signData","metadata","signerResponse","default"],"sources":["C:/Users/Aditya singh/AlgoEase/frontend/node_modules/lute-connect/dist/main.esm.js"],"sourcesContent":["class SignTxnsError extends Error {\r\n    code;\r\n    data;\r\n    constructor(message, code, data) {\r\n        super(message);\r\n        this.name = \"SignTxnsError\";\r\n        this.code = code;\r\n        this.data = data;\r\n    }\r\n}\r\nvar ScopeType;\r\n(function (ScopeType) {\r\n    ScopeType[ScopeType[\"UNKNOWN\"] = -1] = \"UNKNOWN\";\r\n    ScopeType[ScopeType[\"AUTH\"] = 1] = \"AUTH\";\r\n})(ScopeType || (ScopeType = {}));\r\nclass SignDataError extends Error {\r\n    code;\r\n    data;\r\n    constructor(message, code, data) {\r\n        super(message);\r\n        this.name = \"SignDataError\";\r\n        this.code = code;\r\n        this.data = data;\r\n    }\r\n}\r\nconst left = 100 + window.screenX;\r\nconst top = 100 + window.screenY;\r\nconst PARAMS = `width=500,height=750,left=${left},top=${top}`;\r\nconst BASE_URL = \"https://lute.app\";\r\nconst EXT_ID = \"kiaoohollfkjhikdifohdckeidckokjh\";\r\nclass LuteConnect {\r\n    siteName;\r\n    forceWeb = false;\r\n    constructor(siteName) {\r\n        this.siteName = siteName || document.title || \"Unknown site\";\r\n    }\r\n    connect(genesisID) {\r\n        return new Promise(async (resolve, reject) => {\r\n            const useExt = this.forceWeb ? false : window.lute;\r\n            let win;\r\n            if (useExt) {\r\n                window.dispatchEvent(new CustomEvent(\"lute-connect\", {\r\n                    detail: { action: \"connect\", genesisID },\r\n                }));\r\n            }\r\n            else {\r\n                win = open(`${BASE_URL}/connect`, this.siteName, PARAMS);\r\n            }\r\n            const type = useExt ? \"connect-response\" : \"message\";\r\n            window.addEventListener(type, messageHandler);\r\n            function messageHandler(event) {\r\n                if (!useExt && event.origin !== BASE_URL)\r\n                    return;\r\n                const data = event.data || event.detail;\r\n                if (data.debug)\r\n                    console.log(\"[Lute Debug]\", data);\r\n                switch (data.action) {\r\n                    case \"ready\":\r\n                        win?.postMessage({ action: \"network\", genesisID }, \"*\");\r\n                        break;\r\n                    case \"connect\":\r\n                        window.removeEventListener(type, messageHandler);\r\n                        resolve(data.addrs);\r\n                        break;\r\n                    case \"error\":\r\n                        window.removeEventListener(type, messageHandler);\r\n                        reject(new Error(data.message));\r\n                        break;\r\n                    case \"close\":\r\n                        window.removeEventListener(type, messageHandler);\r\n                        reject(new Error(\"Operation Cancelled\"));\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    signTxns(txns) {\r\n        return new Promise(async (resolve, reject) => {\r\n            const useExt = this.forceWeb ? false : window.lute;\r\n            let win;\r\n            if (useExt) {\r\n                window.dispatchEvent(new CustomEvent(\"lute-connect\", {\r\n                    detail: { action: \"sign\", txns },\r\n                }));\r\n            }\r\n            else {\r\n                win = open(`${BASE_URL}/sign`, this.siteName, PARAMS);\r\n            }\r\n            const type = useExt ? \"sign-txns-response\" : \"message\";\r\n            window.addEventListener(type, messageHandler);\r\n            function messageHandler(event) {\r\n                if (!useExt && event.origin !== BASE_URL)\r\n                    return;\r\n                const detail = event.data || event.detail;\r\n                if (detail.debug)\r\n                    console.log(\"[Lute Debug]\", detail);\r\n                switch (detail.action) {\r\n                    case \"ready\":\r\n                        win?.postMessage({ action: \"sign\", txns }, \"*\");\r\n                        break;\r\n                    case \"signed\":\r\n                        window.removeEventListener(type, messageHandler);\r\n                        resolve(detail.txns);\r\n                        break;\r\n                    case \"error\":\r\n                        window.removeEventListener(type, messageHandler);\r\n                        reject(new SignTxnsError(detail.message, detail.code || 4300));\r\n                        break;\r\n                    case \"close\":\r\n                        window.removeEventListener(type, messageHandler);\r\n                        reject(new SignTxnsError(\"User Rejected Request\", 4100));\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    signData(data, metadata) {\r\n        return new Promise(async (resolve, reject) => {\r\n            const useExt = this.forceWeb ? false : window.lute;\r\n            let win;\r\n            if (useExt) {\r\n                window.dispatchEvent(new CustomEvent(\"lute-connect\", {\r\n                    detail: { action: \"data\", data, metadata },\r\n                }));\r\n            }\r\n            else {\r\n                win = open(`${BASE_URL}/auth`, this.siteName, PARAMS);\r\n            }\r\n            const type = useExt ? \"sign-data-response\" : \"message\";\r\n            window.addEventListener(type, messageHandler);\r\n            function messageHandler(event) {\r\n                if (!useExt && event.origin !== BASE_URL)\r\n                    return;\r\n                const detail = event.data || event.detail;\r\n                if (detail.debug)\r\n                    console.log(\"[Lute Debug]\", detail);\r\n                switch (detail.action) {\r\n                    case \"ready\":\r\n                        win?.postMessage({ action: \"data\", data, metadata }, \"*\");\r\n                        break;\r\n                    case \"signed\":\r\n                        window.removeEventListener(type, messageHandler);\r\n                        resolve(detail.signerResponse);\r\n                        break;\r\n                    case \"error\":\r\n                        window.removeEventListener(type, messageHandler);\r\n                        reject(new SignDataError(detail.message, detail.code || 4300));\r\n                        break;\r\n                    case \"close\":\r\n                        window.removeEventListener(type, messageHandler);\r\n                        reject(new SignDataError(\"User Rejected Request\", 4100));\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport { BASE_URL, EXT_ID, ScopeType, SignDataError, SignTxnsError, LuteConnect as default };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
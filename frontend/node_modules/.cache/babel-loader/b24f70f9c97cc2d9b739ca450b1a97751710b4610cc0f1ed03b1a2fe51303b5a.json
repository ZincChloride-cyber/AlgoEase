{"ast":null,"code":"/**\r\n * Enum for application transaction types.\r\n *\r\n * The full list is available at https://developer.algorand.org/docs/reference/transactions/\r\n */\nexport var TransactionType;\n(function (TransactionType) {\n  /**\r\n   * Payment transaction\r\n   */\n  TransactionType[\"pay\"] = \"pay\";\n  /**\r\n   * Key registration transaction\r\n   */\n  TransactionType[\"keyreg\"] = \"keyreg\";\n  /**\r\n   * Asset configuration transaction\r\n   */\n  TransactionType[\"acfg\"] = \"acfg\";\n  /**\r\n   * Asset transfer transaction\r\n   */\n  TransactionType[\"axfer\"] = \"axfer\";\n  /**\r\n   * Asset freeze transaction\r\n   */\n  TransactionType[\"afrz\"] = \"afrz\";\n  /**\r\n   * Application transaction\r\n   */\n  TransactionType[\"appl\"] = \"appl\";\n  /**\r\n   * State proof transaction\r\n   */\n  TransactionType[\"stpf\"] = \"stpf\";\n  /**\r\n   * Heartbeat transaction\r\n   */\n  TransactionType[\"hb\"] = \"hb\";\n})(TransactionType || (TransactionType = {}));\nexport function isTransactionType(s) {\n  return s === TransactionType.pay || s === TransactionType.keyreg || s === TransactionType.acfg || s === TransactionType.axfer || s === TransactionType.afrz || s === TransactionType.appl || s === TransactionType.stpf || s === TransactionType.hb;\n}\n/**\r\n * Enums for application transactions on-transaction-complete behavior\r\n */\nexport var OnApplicationComplete;\n(function (OnApplicationComplete) {\n  /**\r\n   * NoOpOC indicates that an application transaction will simply call its\r\n   * ApprovalProgram\r\n   */\n  OnApplicationComplete[OnApplicationComplete[\"NoOpOC\"] = 0] = \"NoOpOC\";\n  /**\r\n   * OptInOC indicates that an application transaction will allocate some\r\n   * LocalState for the application in the sender's account\r\n   */\n  OnApplicationComplete[OnApplicationComplete[\"OptInOC\"] = 1] = \"OptInOC\";\n  /**\r\n   * CloseOutOC indicates that an application transaction will deallocate\r\n   * some LocalState for the application from the user's account\r\n   */\n  OnApplicationComplete[OnApplicationComplete[\"CloseOutOC\"] = 2] = \"CloseOutOC\";\n  /**\r\n   * ClearStateOC is similar to CloseOutOC, but may never fail. This\r\n   * allows users to reclaim their minimum balance from an application\r\n   * they no longer wish to opt in to.\r\n   */\n  OnApplicationComplete[OnApplicationComplete[\"ClearStateOC\"] = 3] = \"ClearStateOC\";\n  /**\r\n   * UpdateApplicationOC indicates that an application transaction will\r\n   * update the ApprovalProgram and ClearStateProgram for the application\r\n   */\n  OnApplicationComplete[OnApplicationComplete[\"UpdateApplicationOC\"] = 4] = \"UpdateApplicationOC\";\n  /**\r\n   * DeleteApplicationOC indicates that an application transaction will\r\n   * delete the AppParams for the application from the creator's balance\r\n   * record\r\n   */\n  OnApplicationComplete[OnApplicationComplete[\"DeleteApplicationOC\"] = 5] = \"DeleteApplicationOC\";\n})(OnApplicationComplete || (OnApplicationComplete = {}));","map":{"version":3,"names":["TransactionType","isTransactionType","s","pay","keyreg","acfg","axfer","afrz","appl","stpf","hb","OnApplicationComplete"],"sources":["C:\\Users\\Aditya singh\\AlgoEase\\frontend\\node_modules\\algosdk\\src\\types\\transactions\\base.ts"],"sourcesContent":["/**\r\n * Enum for application transaction types.\r\n *\r\n * The full list is available at https://developer.algorand.org/docs/reference/transactions/\r\n */\r\nexport enum TransactionType {\r\n  /**\r\n   * Payment transaction\r\n   */\r\n  pay = 'pay',\r\n\r\n  /**\r\n   * Key registration transaction\r\n   */\r\n  keyreg = 'keyreg',\r\n\r\n  /**\r\n   * Asset configuration transaction\r\n   */\r\n  acfg = 'acfg',\r\n\r\n  /**\r\n   * Asset transfer transaction\r\n   */\r\n  axfer = 'axfer',\r\n\r\n  /**\r\n   * Asset freeze transaction\r\n   */\r\n  afrz = 'afrz',\r\n\r\n  /**\r\n   * Application transaction\r\n   */\r\n  appl = 'appl',\r\n  /**\r\n   * State proof transaction\r\n   */\r\n  stpf = 'stpf',\r\n\r\n  /**\r\n   * Heartbeat transaction\r\n   */\r\n  hb = 'hb',\r\n}\r\n\r\nexport function isTransactionType(s: string): s is TransactionType {\r\n  return (\r\n    s === TransactionType.pay ||\r\n    s === TransactionType.keyreg ||\r\n    s === TransactionType.acfg ||\r\n    s === TransactionType.axfer ||\r\n    s === TransactionType.afrz ||\r\n    s === TransactionType.appl ||\r\n    s === TransactionType.stpf ||\r\n    s === TransactionType.hb\r\n  );\r\n}\r\n\r\n/**\r\n * Enums for application transactions on-transaction-complete behavior\r\n */\r\nexport enum OnApplicationComplete {\r\n  /**\r\n   * NoOpOC indicates that an application transaction will simply call its\r\n   * ApprovalProgram\r\n   */\r\n  NoOpOC,\r\n\r\n  /**\r\n   * OptInOC indicates that an application transaction will allocate some\r\n   * LocalState for the application in the sender's account\r\n   */\r\n  OptInOC,\r\n\r\n  /**\r\n   * CloseOutOC indicates that an application transaction will deallocate\r\n   * some LocalState for the application from the user's account\r\n   */\r\n  CloseOutOC,\r\n\r\n  /**\r\n   * ClearStateOC is similar to CloseOutOC, but may never fail. This\r\n   * allows users to reclaim their minimum balance from an application\r\n   * they no longer wish to opt in to.\r\n   */\r\n  ClearStateOC,\r\n\r\n  /**\r\n   * UpdateApplicationOC indicates that an application transaction will\r\n   * update the ApprovalProgram and ClearStateProgram for the application\r\n   */\r\n  UpdateApplicationOC,\r\n\r\n  /**\r\n   * DeleteApplicationOC indicates that an application transaction will\r\n   * delete the AppParams for the application from the creator's balance\r\n   * record\r\n   */\r\n  DeleteApplicationOC,\r\n}\r\n\r\n/**\r\n * A dict holding common-to-all-txns arguments\r\n */\r\nexport interface SuggestedParams {\r\n  /**\r\n   * Set this to true to specify fee as microalgos-per-txn\r\n   *   If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum\r\n   */\r\n  flatFee?: boolean;\r\n\r\n  /**\r\n   * Integer fee per byte, in microAlgos. For a flat fee, set flatFee to true\r\n   */\r\n  fee: number;\r\n\r\n  /**\r\n   * First protocol round on which this txn is valid\r\n   */\r\n  firstRound: number;\r\n\r\n  /**\r\n   * Last protocol round on which this txn is valid\r\n   */\r\n  lastRound: number;\r\n\r\n  /**\r\n   * Specifies genesis ID of network in use\r\n   */\r\n  genesisID: string;\r\n\r\n  /**\r\n   * Specifies hash genesis block of network in use\r\n   */\r\n  genesisHash: string;\r\n}\r\n\r\nexport type SuggestedParamsWithMinFee = SuggestedParams & {\r\n  /**\r\n   * Minimum fee (not per byte) required for the transaction to be confirmed\r\n   */\r\n  minFee: number;\r\n};\r\n\r\n/**\r\n * A grouping of the app ID and name of the box in an Uint8Array\r\n */\r\nexport interface BoxReference {\r\n  /**\r\n   * A unique application index\r\n   */\r\n  appIndex: number;\r\n\r\n  /**\r\n   * Name of box to reference\r\n   */\r\n  name: Uint8Array;\r\n}\r\n\r\ninterface heartbeatFields {\r\n  a: string;\r\n  prf: Uint8Array;\r\n  sd: Uint8Array;\r\n  vid: Uint8Array;\r\n  kd: number;\r\n}\r\n\r\n/**\r\n * A full list of all available transaction parameters\r\n *\r\n * The full documentation is available at:\r\n * https://developer.algorand.org/docs/reference/transactions/#common-fields-header-and-type\r\n */\r\nexport interface TransactionParams {\r\n  /**\r\n   * String representation of Algorand address of sender\r\n   */\r\n  from: string;\r\n\r\n  /**\r\n   * String representation of Algorand address of recipient\r\n   */\r\n  to: string;\r\n\r\n  /**\r\n   * Integer fee per byte, in microAlgos. For a flat fee, set flatFee to true\r\n   */\r\n  fee: number;\r\n\r\n  /**\r\n   * Integer amount to send\r\n   */\r\n  amount: number | bigint;\r\n\r\n  /**\r\n   * Integer first protocol round on which this txn is valid\r\n   */\r\n  firstRound: number;\r\n\r\n  /**\r\n   * Integer last protocol round on which this txn is valid\r\n   */\r\n  lastRound: number;\r\n\r\n  /**\r\n   * Arbitrary data for sender to store\r\n   */\r\n  note?: Uint8Array;\r\n\r\n  /**\r\n   * Specifies genesis ID of network in use\r\n   */\r\n  genesisID: string;\r\n\r\n  /**\r\n   * Specifies hash genesis block of network in use\r\n   */\r\n  genesisHash: string;\r\n\r\n  /**\r\n   * Lease a transaction. The sender cannot send another txn with that same lease until the last round of original txn has passed\r\n   */\r\n  lease?: Uint8Array;\r\n\r\n  /**\r\n   * Close out remaining account balance to this account\r\n   */\r\n  closeRemainderTo?: string;\r\n\r\n  /**\r\n   * Voting key bytes. For key deregistration, leave undefined\r\n   */\r\n  voteKey: Uint8Array | string;\r\n\r\n  /**\r\n   *Selection key bytes. For key deregistration, leave undefined\r\n   */\r\n  selectionKey: Uint8Array | string;\r\n\r\n  /**\r\n   * State proof key bytes. For key deregistration, leave undefined\r\n   */\r\n  stateProofKey: Uint8Array | string;\r\n\r\n  /**\r\n   * First round on which voteKey is valid\r\n   */\r\n  voteFirst: number;\r\n\r\n  /**\r\n   * Last round on which voteKey is valid\r\n   */\r\n  voteLast: number;\r\n\r\n  /**\r\n   * The dilution fo the 2-level participation key\r\n   */\r\n  voteKeyDilution: number;\r\n\r\n  /**\r\n   * Asset index uniquely specifying the asset\r\n   */\r\n  assetIndex: number;\r\n\r\n  /**\r\n   * Total supply of the asset\r\n   */\r\n  assetTotal: number | bigint;\r\n\r\n  /**\r\n   * Integer number of decimals for asset unit calcuation\r\n   */\r\n  assetDecimals: number;\r\n\r\n  /**\r\n   * Whether asset accounts should default to being frozen\r\n   */\r\n  assetDefaultFrozen: boolean;\r\n\r\n  /**\r\n   * String representation of Algorand address in charge of reserve, freeze, clawback, destruction, etc.\r\n   */\r\n  assetManager?: string;\r\n\r\n  /**\r\n   * String representation of Algorand address representing asset reserve\r\n   */\r\n  assetReserve?: string;\r\n\r\n  /**\r\n   * String representation of Algorand address with power to freeze/unfreeze asset holdings\r\n   */\r\n  assetFreeze?: string;\r\n\r\n  /**\r\n   * String representation of Algorand address with power to revoke asset holdings\r\n   */\r\n  assetClawback?: string;\r\n\r\n  /**\r\n   * Unit name for this asset\r\n   */\r\n  assetUnitName?: string;\r\n  /**\r\n   * Name for this asset\r\n   */\r\n  assetName?: string;\r\n\r\n  /**\r\n   * URL relating to this asset\r\n   */\r\n  assetURL?: string;\r\n\r\n  /**\r\n   * Uint8Array or UTF-8 string representation of a hash commitment with respect to the asset. Must be exactly 32 bytes long.\r\n   */\r\n  assetMetadataHash?: Uint8Array | string;\r\n\r\n  /**\r\n   * String representation of Algorand address being frozen or unfrozen\r\n   */\r\n  freezeAccount: string;\r\n\r\n  /**\r\n   * true if freezeTarget should be frozen, false if freezeTarget should be allowed to transact\r\n   */\r\n  freezeState: boolean;\r\n\r\n  /**\r\n   * String representation of Algorand address – if provided, and if \"from\" is\r\n   * the asset's revocation manager, then deduct from \"revocationTarget\" rather than \"from\"\r\n   */\r\n  assetRevocationTarget?: string;\r\n\r\n  /**\r\n   * A unique application index\r\n   */\r\n  appIndex: number;\r\n\r\n  /**\r\n   * What application should do once the program has been run\r\n   */\r\n  appOnComplete: OnApplicationComplete;\r\n\r\n  /**\r\n   * Restricts number of ints in per-user local state\r\n   */\r\n  appLocalInts: number;\r\n\r\n  /**\r\n   * Restricts number of byte slices in per-user local state\r\n   */\r\n  appLocalByteSlices: number;\r\n\r\n  /**\r\n   * Restricts number of ints in global state\r\n   */\r\n  appGlobalInts: number;\r\n\r\n  /**\r\n   * Restricts number of byte slices in global state\r\n   */\r\n  appGlobalByteSlices: number;\r\n\r\n  /**\r\n   * The compiled TEAL that approves a transaction\r\n   */\r\n  appApprovalProgram: Uint8Array;\r\n\r\n  /**\r\n   * The compiled TEAL program that runs when clearing state\r\n   */\r\n  appClearProgram: Uint8Array;\r\n\r\n  /**\r\n   * Array of Uint8Array, any additional arguments to the application\r\n   */\r\n  appArgs?: Uint8Array[];\r\n\r\n  /**\r\n   * Array of Address strings, any additional accounts to supply to the application\r\n   */\r\n  appAccounts?: string[];\r\n\r\n  /**\r\n   * Array of int, any other apps used by the application, identified by index\r\n   */\r\n  appForeignApps?: number[];\r\n\r\n  /**\r\n   * Array of int, any assets used by the application, identified by index\r\n   */\r\n  appForeignAssets?: number[];\r\n\r\n  /**\r\n   * Transaction type\r\n   */\r\n  type?: TransactionType;\r\n\r\n  /**\r\n   * Set this to true to specify fee as microalgos-per-txn.\r\n   *\r\n   * If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum\r\n   */\r\n  flatFee?: boolean;\r\n\r\n  /**\r\n   * A dict holding common-to-all-txns arguments\r\n   */\r\n  suggestedParams: SuggestedParams;\r\n\r\n  /**\r\n   * String representation of the Algorand address that will be used to authorize all future transactions\r\n   */\r\n  reKeyTo?: string;\r\n\r\n  /**\r\n   * Set this value to true to mark this account as nonparticipating.\r\n   *\r\n   * All new Algorand accounts are participating by default. This means they earn rewards.\r\n   */\r\n  nonParticipation?: boolean;\r\n\r\n  /**\r\n   * Int representing extra pages of memory to rent during an application create transaction.\r\n   */\r\n  extraPages?: number;\r\n\r\n  /**\r\n   * A grouping of the app ID and name of the box in an Uint8Array\r\n   */\r\n  boxes?: BoxReference[];\r\n\r\n  /*\r\n   * Uint64 identifying a particular configuration of state proofs.\r\n   */\r\n  stateProofType?: number | bigint;\r\n\r\n  /**\r\n   * Byte array containing the state proof.\r\n   */\r\n  stateProof?: Uint8Array;\r\n\r\n  /**\r\n   * Byte array containing the state proof message.\r\n   */\r\n  stateProofMessage?: Uint8Array;\r\n\r\n  /**\r\n   * HeartbeatFields fields\r\n   */\r\n  heartbeatFields?: heartbeatFields;\r\n}\r\n"],"mappings":"AAAA;;;;;AAKA,WAAYA,eAuCX;AAvCD,WAAYA,eAAe;EACzB;;;EAGAA,eAAA,eAAW;EAEX;;;EAGAA,eAAA,qBAAiB;EAEjB;;;EAGAA,eAAA,iBAAa;EAEb;;;EAGAA,eAAA,mBAAe;EAEf;;;EAGAA,eAAA,iBAAa;EAEb;;;EAGAA,eAAA,iBAAa;EACb;;;EAGAA,eAAA,iBAAa;EAEb;;;EAGAA,eAAA,aAAS;AACX,CAAC,EAvCWA,eAAe,KAAfA,eAAe;AAyC3B,OAAM,SAAUC,iBAAiBA,CAACC,CAAS;EACzC,OACEA,CAAC,KAAKF,eAAe,CAACG,GAAG,IACzBD,CAAC,KAAKF,eAAe,CAACI,MAAM,IAC5BF,CAAC,KAAKF,eAAe,CAACK,IAAI,IAC1BH,CAAC,KAAKF,eAAe,CAACM,KAAK,IAC3BJ,CAAC,KAAKF,eAAe,CAACO,IAAI,IAC1BL,CAAC,KAAKF,eAAe,CAACQ,IAAI,IAC1BN,CAAC,KAAKF,eAAe,CAACS,IAAI,IAC1BP,CAAC,KAAKF,eAAe,CAACU,EAAE;AAE5B;AAEA;;;AAGA,WAAYC,qBAsCX;AAtCD,WAAYA,qBAAqB;EAC/B;;;;EAIAA,qBAAA,CAAAA,qBAAA,0BAAM;EAEN;;;;EAIAA,qBAAA,CAAAA,qBAAA,4BAAO;EAEP;;;;EAIAA,qBAAA,CAAAA,qBAAA,kCAAU;EAEV;;;;;EAKAA,qBAAA,CAAAA,qBAAA,sCAAY;EAEZ;;;;EAIAA,qBAAA,CAAAA,qBAAA,oDAAmB;EAEnB;;;;;EAKAA,qBAAA,CAAAA,qBAAA,oDAAmB;AACrB,CAAC,EAtCWA,qBAAqB,KAArBA,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}